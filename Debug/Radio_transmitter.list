
Radio_transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007c10  08007c10  00008c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800800c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001dc  080081e8  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080081e8  0000a544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b93b  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec5  00000000  00000000  00015b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00017a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087b  00000000  00000000  00018530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176e4  00000000  00000000  00018dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b95c  00000000  00000000  0003048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b878  00000000  00000000  0003bdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f1c  00000000  00000000  000c76a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cb5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bf4 	.word	0x08007bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007bf4 	.word	0x08007bf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2180      	movs	r1, #128	@ 0x80
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <csn_high+0x14>)
 8000eee:	f001 fd51 	bl	8002994 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <csn_low>:

void csn_low(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <csn_low+0x14>)
 8000f06:	f001 fd45 	bl	8002994 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020400 	.word	0x40020400

08000f14 <ce_high>:

void ce_high(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <ce_high+0x14>)
 8000f1e:	f001 fd39 	bl	8002994 <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400

08000f2c <ce_low>:

void ce_low(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2140      	movs	r1, #64	@ 0x40
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <ce_low+0x14>)
 8000f36:	f001 fd2d 	bl	8002994 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020400 	.word	0x40020400

08000f44 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000f5e:	f7ff ffcd 	bl	8000efc <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000f62:	f107 010f 	add.w	r1, r7, #15
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <nrf24_w_reg+0x4c>)
 8000f6e:	f002 fa0c 	bl	800338a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <nrf24_w_reg+0x4c>)
 8000f7e:	f002 fa04 	bl	800338a <HAL_SPI_Transmit>

	csn_high();
 8000f82:	f7ff ffaf 	bl	8000ee4 <csn_high>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000031c 	.word	0x2000031c

08000f94 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000fac:	f7ff ffa6 	bl	8000efc <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fb0:	f107 010f 	add.w	r1, r7, #15
 8000fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <nrf24_r_reg+0x4c>)
 8000fbc:	f002 f9e5 	bl	800338a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 010e 	add.w	r1, r7, #14
 8000fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <nrf24_r_reg+0x4c>)
 8000fce:	f002 fb20 	bl	8003612 <HAL_SPI_Receive>

	csn_high();
 8000fd2:	f7ff ff87 	bl	8000ee4 <csn_high>

	return data;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000031c 	.word	0x2000031c

08000fe4 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <nrf24_w_spec_cmd+0x20>)
 8000ff8:	f002 f9c7 	bl	800338a <HAL_SPI_Transmit>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000031c 	.word	0x2000031c

08001008 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffbd 	bl	8000f94 <nrf24_r_reg>
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ff88 	bl	8000f44 <nrf24_w_reg>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 800104a:	2101      	movs	r1, #1
 800104c:	2006      	movs	r0, #6
 800104e:	f7ff ffa1 	bl	8000f94 <nrf24_r_reg>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b25a      	sxtb	r2, r3
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001074:	f107 030f 	add.w	r3, r7, #15
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff ff61 	bl	8000f44 <nrf24_w_reg>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8001098:	2101      	movs	r1, #1
 800109a:	2006      	movs	r0, #6
 800109c:	f7ff ff7a 	bl	8000f94 <nrf24_r_reg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e007      	b.n	80010d0 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d104      	bne.n	80010d0 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	2006      	movs	r0, #6
 80010da:	f7ff ff33 	bl	8000f44 <nrf24_w_reg>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	2005      	movs	r0, #5
 80010f8:	f7ff ff24 	bl	8000f44 <nrf24_w_reg>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 800110c:	2205      	movs	r2, #5
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2010      	movs	r0, #16
 8001112:	f7ff ff17 	bl	8000f44 <nrf24_w_reg>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	2b20      	cmp	r3, #32
 8001134:	d901      	bls.n	800113a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8001136:	2320      	movs	r3, #32
 8001138:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d839      	bhi.n	80011b4 <nrf24_pipe_pld_size+0x94>
 8001140:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <nrf24_pipe_pld_size+0x28>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001161 	.word	0x08001161
 800114c:	0800116f 	.word	0x0800116f
 8001150:	0800117d 	.word	0x0800117d
 8001154:	0800118b 	.word	0x0800118b
 8001158:	08001199 	.word	0x08001199
 800115c:	080011a7 	.word	0x080011a7
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2011      	movs	r0, #17
 8001168:	f7ff feec 	bl	8000f44 <nrf24_w_reg>

		break;
 800116c:	e022      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	2012      	movs	r0, #18
 8001176:	f7ff fee5 	bl	8000f44 <nrf24_w_reg>

		break;
 800117a:	e01b      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff fede 	bl	8000f44 <nrf24_w_reg>

		break;
 8001188:	e014      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	2014      	movs	r0, #20
 8001192:	f7ff fed7 	bl	8000f44 <nrf24_w_reg>

		break;
 8001196:	e00d      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	2015      	movs	r0, #21
 80011a0:	f7ff fed0 	bl	8000f44 <nrf24_w_reg>

		break;
 80011a4:	e006      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	2201      	movs	r2, #1
 80011aa:	4619      	mov	r1, r3
 80011ac:	2016      	movs	r0, #22
 80011ae:	f7ff fec9 	bl	8000f44 <nrf24_w_reg>

		break;
 80011b2:	bf00      	nop
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fee0 	bl	8000f94 <nrf24_r_reg>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d850      	bhi.n	8001280 <nrf24_open_rx_pipe+0xc4>
 80011de:	a201      	add	r2, pc, #4	@ (adr r2, 80011e4 <nrf24_open_rx_pipe+0x28>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001213 	.word	0x08001213
 80011ec:	08001229 	.word	0x08001229
 80011f0:	0800123f 	.word	0x0800123f
 80011f4:	08001255 	.word	0x08001255
 80011f8:	0800126b 	.word	0x0800126b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 80011fc:	2205      	movs	r2, #5
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	200a      	movs	r0, #10
 8001202:	f7ff fe9f 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
		break;
 8001210:	e036      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8001212:	2205      	movs	r2, #5
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	200b      	movs	r0, #11
 8001218:	f7ff fe94 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73fb      	strb	r3, [r7, #15]
		break;
 8001226:	e02b      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	200c      	movs	r0, #12
 800122e:	f7ff fe89 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	73fb      	strb	r3, [r7, #15]
		break;
 800123c:	e020      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	200d      	movs	r0, #13
 8001244:	f7ff fe7e 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
		break;
 8001252:	e015      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	200e      	movs	r0, #14
 800125a:	f7ff fe73 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73fb      	strb	r3, [r7, #15]
		break;
 8001268:	e00a      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fe68 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	b2db      	uxtb	r3, r3
 800127c:	73fb      	strb	r3, [r7, #15]
		break;
 800127e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8001280:	f107 030f 	add.w	r3, r7, #15
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff fe5b 	bl	8000f44 <nrf24_w_reg>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop

08001298 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fe72 	bl	8000f94 <nrf24_r_reg>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 030c 	bic.w	r3, r3, #12
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80012de:	f107 030f 	add.w	r3, r7, #15
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fe2c 	bl	8000f44 <nrf24_w_reg>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	3b02      	subs	r3, #2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff fe19 	bl	8000f44 <nrf24_w_reg>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
	csn_low();
 800131e:	f7ff fded 	bl	8000efc <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8001322:	20e1      	movs	r0, #225	@ 0xe1
 8001324:	f7ff fe5e 	bl	8000fe4 <nrf24_w_spec_cmd>
	csn_high();
 8001328:	f7ff fddc 	bl	8000ee4 <csn_high>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	csn_low();
 8001334:	f7ff fde2 	bl	8000efc <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8001338:	20e2      	movs	r0, #226	@ 0xe2
 800133a:	f7ff fe53 	bl	8000fe4 <nrf24_w_spec_cmd>
	csn_high();
 800133e:	f7ff fdd1 	bl	8000ee4 <csn_high>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8001352:	23ff      	movs	r3, #255	@ 0xff
 8001354:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8001356:	f7ff fdd1 	bl	8000efc <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	1db9      	adds	r1, r7, #6
 800135e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <nrf24_r_status+0x34>)
 8001368:	f002 fa6c 	bl	8003844 <HAL_SPI_TransmitReceive>
	csn_high();
 800136c:	f7ff fdba 	bl	8000ee4 <csn_high>

	return data;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000031c 	.word	0x2000031c

08001380 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800138a:	f7ff ffdd 	bl	8001348 <nrf24_r_status>
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001398:	b2db      	uxtb	r3, r3
 800139a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff fdce 	bl	8000f44 <nrf24_w_reg>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80013ba:	f7ff ffc5 	bl	8001348 <nrf24_r_status>
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	2007      	movs	r0, #7
 80013d4:	f7ff fdb6 	bl	8000f44 <nrf24_w_reg>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80013ea:	f7ff ffad 	bl	8001348 <nrf24_r_status>
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fd9e 	bl	8000f44 <nrf24_w_reg>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fdb9 	bl	8000f94 <nrf24_r_reg>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fd84 	bl	8000f44 <nrf24_w_reg>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800144e:	2101      	movs	r1, #1
 8001450:	201d      	movs	r0, #29
 8001452:	f7ff fd9f 	bl	8000f94 <nrf24_r_reg>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e004      	b.n	8001476 <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	b2db      	uxtb	r3, r3
 8001474:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8001476:	f107 030f 	add.w	r3, r7, #15
 800147a:	2201      	movs	r2, #1
 800147c:	4619      	mov	r1, r3
 800147e:	201d      	movs	r0, #29
 8001480:	f7ff fd60 	bl	8000f44 <nrf24_w_reg>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8001496:	2101      	movs	r1, #1
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fd7b 	bl	8000f94 <nrf24_r_reg>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]

	if(ack){
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <nrf24_auto_ack_all+0x22>
		enaa = 63;
 80014a8:	233f      	movs	r3, #63	@ 0x3f
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 80014b2:	f107 030f 	add.w	r3, r7, #15
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fd42 	bl	8000f44 <nrf24_w_reg>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80014d2:	2101      	movs	r1, #1
 80014d4:	201d      	movs	r0, #29
 80014d6:	f7ff fd5d 	bl	8000f94 <nrf24_r_reg>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]

	if(en){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e004      	b.n	80014fa <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f023 0302 	bic.w	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80014fa:	f107 030f 	add.w	r3, r7, #15
 80014fe:	2201      	movs	r2, #1
 8001500:	4619      	mov	r1, r3
 8001502:	201d      	movs	r0, #29
 8001504:	f7ff fd1e 	bl	8000f44 <nrf24_w_reg>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800151a:	2101      	movs	r1, #1
 800151c:	2004      	movs	r0, #4
 800151e:	f7ff fd39 	bl	8000f94 <nrf24_r_reg>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	b25a      	sxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25b      	sxtb	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001544:	f107 030f 	add.w	r3, r7, #15
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fcf9 	bl	8000f44 <nrf24_w_reg>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8001564:	2101      	movs	r1, #1
 8001566:	2004      	movs	r0, #4
 8001568:	f7ff fd14 	bl	8000f94 <nrf24_r_reg>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f023 030f 	bic.w	r3, r3, #15
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fcd9 	bl	8000f44 <nrf24_w_reg>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80015a8:	f7ff fcc0 	bl	8000f2c <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80015ac:	23a0      	movs	r3, #160	@ 0xa0
 80015ae:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80015b0:	f7ff fca4 	bl	8000efc <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80015b4:	f107 010f 	add.w	r1, r7, #15
 80015b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015bc:	2201      	movs	r2, #1
 80015be:	4813      	ldr	r0, [pc, #76]	@ (800160c <nrf24_transmit+0x70>)
 80015c0:	f001 fee3 	bl	800338a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <nrf24_transmit+0x70>)
 80015d0:	f001 fedb 	bl	800338a <HAL_SPI_Transmit>
	csn_high();
 80015d4:	f7ff fc86 	bl	8000ee4 <csn_high>

	ce_high();
 80015d8:	f7ff fc9c 	bl	8000f14 <ce_high>
	HAL_Delay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f000 fe8d 	bl	80022fc <HAL_Delay>
	ce_low();
 80015e2:	f7ff fca3 	bl	8000f2c <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 80015e6:	f7ff feaf 	bl	8001348 <nrf24_r_status>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 80015f4:	f7ff fef4 	bl	80013e0 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 80015f8:	f7ff fe8f 	bl	800131a <nrf24_flush_tx>
		return 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <nrf24_transmit+0x66>
	}

	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000031c 	.word	0x2000031c

08001610 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 8001614:	f7ff fcf8 	bl	8001008 <nrf24_pwr_up>

	nrf24_flush_tx();
 8001618:	f7ff fe7f 	bl	800131a <nrf24_flush_tx>
	nrf24_flush_rx();
 800161c:	f7ff fe88 	bl	8001330 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 8001620:	f7ff feae 	bl	8001380 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8001624:	f7ff fec4 	bl	80013b0 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8001628:	f7ff feda 	bl	80013e0 <nrf24_clear_max_rt>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <processa_pacote>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t usart_rx[sizeof(Pacote) + 2];
Pacote pacote_recebido;
Pacote pct_temp;
void processa_pacote(uint8_t* buffer) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    if (buffer[0] == 0xAA && buffer[1] == 0xBB) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2baa      	cmp	r3, #170	@ 0xaa
 800163e:	d138      	bne.n	80016b2 <processa_pacote+0x82>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2bbb      	cmp	r3, #187	@ 0xbb
 8001648:	d133      	bne.n	80016b2 <processa_pacote+0x82>
        memcpy(&pacote_recebido, &buffer[2], sizeof(Pacote));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3302      	adds	r3, #2
 800164e:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <processa_pacote+0x8c>)
 8001650:	4614      	mov	r4, r2
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

        memcpy(&pct_temp, &buffer[2], sizeof(Pacote));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3302      	adds	r3, #2
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <processa_pacote+0x90>)
 8001662:	4614      	mov	r4, r2
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if(pct_temp.id != 0xFF){
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <processa_pacote+0x90>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d011      	beq.n	800169a <processa_pacote+0x6a>
        	memcpy(&pct_robo[pacote_recebido.id], &buffer[2], sizeof(Pacote));
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <processa_pacote+0x8c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <processa_pacote+0x94>)
 800167e:	1898      	adds	r0, r3, r2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3302      	adds	r3, #2
 8001684:	2210      	movs	r2, #16
 8001686:	4619      	mov	r1, r3
 8001688:	f004 fa67 	bl	8005b5a <memcpy>
            pendente[pacote_recebido.id] = 1;
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <processa_pacote+0x8c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <processa_pacote+0x98>)
 8001694:	2101      	movs	r1, #1
 8001696:	5499      	strb	r1, [r3, r2]
        } else {
        	memcpy(&pct_undf, &buffer[2], sizeof(Pacote));
        	pendente_undf = 1;
        }
    }
}
 8001698:	e00b      	b.n	80016b2 <processa_pacote+0x82>
        	memcpy(&pct_undf, &buffer[2], sizeof(Pacote));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3302      	adds	r3, #2
 800169e:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <processa_pacote+0x9c>)
 80016a0:	4614      	mov	r4, r2
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        	pendente_undf = 1;
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <processa_pacote+0xa0>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003d0 	.word	0x200003d0
 80016c0:	200003e0 	.word	0x200003e0
 80016c4:	20000208 	.word	0x20000208
 80016c8:	2000030c 	.word	0x2000030c
 80016cc:	200001f8 	.word	0x200001f8
 80016d0:	20000308 	.word	0x20000308

080016d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_UART_RxCpltCallback+0x2c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d107      	bne.n	80016f6 <HAL_UART_RxCpltCallback+0x22>
        processa_pacote(usart_rx);
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <HAL_UART_RxCpltCallback+0x30>)
 80016e8:	f7ff ffa2 	bl	8001630 <processa_pacote>
        HAL_UART_Receive_IT(&huart1, usart_rx, sizeof(usart_rx));  // reinicia recepção
 80016ec:	2212      	movs	r2, #18
 80016ee:	4905      	ldr	r1, [pc, #20]	@ (8001704 <HAL_UART_RxCpltCallback+0x30>)
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <HAL_UART_RxCpltCallback+0x34>)
 80016f2:	f002 fc6e 	bl	8003fd2 <HAL_UART_Receive_IT>
    }
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40011000 	.word	0x40011000
 8001704:	200003bc 	.word	0x200003bc
 8001708:	20000374 	.word	0x20000374

0800170c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001710:	b0bd      	sub	sp, #244	@ 0xf4
 8001712:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f000 fd80 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 fa64 	bl	8001be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 fb2a 	bl	8001d74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001720:	f000 fac8 	bl	8001cb4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001724:	f000 fafc 	bl	8001d20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ce_high();
 8001728:	f7ff fbf4 	bl	8000f14 <ce_high>

  HAL_Delay(5);
 800172c:	2005      	movs	r0, #5
 800172e:	f000 fde5 	bl	80022fc <HAL_Delay>

  ce_low();
 8001732:	f7ff fbfb 	bl	8000f2c <ce_low>

  nrf24_init();
 8001736:	f7ff ff6b 	bl	8001610 <nrf24_init>

  nrf24_auto_ack_all(auto_ack);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fea6 	bl	800148c <nrf24_auto_ack_all>
  nrf24_en_ack_pld(disable);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fec1 	bl	80014c8 <nrf24_en_ack_pld>
  nrf24_dpl(disable);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fe7c 	bl	8001444 <nrf24_dpl>

  nrf24_tx_pwr(_0dbm);
 800174c:	2003      	movs	r0, #3
 800174e:	f7ff fc75 	bl	800103c <nrf24_tx_pwr>
  nrf24_data_rate(_2mbps);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fc99 	bl	800108a <nrf24_data_rate>
  nrf24_set_channel(channel);
 8001758:	4bce      	ldr	r3, [pc, #824]	@ (8001a94 <main+0x388>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fcc2 	bl	80010e6 <nrf24_set_channel>
  nrf24_set_addr_width(5);
 8001762:	2005      	movs	r0, #5
 8001764:	f7ff fdc6 	bl	80012f4 <nrf24_set_addr_width>

  nrf24_pipe_pld_size(0, pld_size);
 8001768:	4bcb      	ldr	r3, [pc, #812]	@ (8001a98 <main+0x38c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fcd6 	bl	8001120 <nrf24_pipe_pld_size>
  nrf24_set_crc(en_crc, _1byte);
 8001774:	2100      	movs	r1, #0
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fd8e 	bl	8001298 <nrf24_set_crc>

  nrf24_auto_retr_delay(0);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fec7 	bl	8001510 <nrf24_auto_retr_delay>
  nrf24_auto_retr_limit(5);
 8001782:	2005      	movs	r0, #5
 8001784:	f7ff fee9 	bl	800155a <nrf24_auto_retr_limit>

  nrf24_open_tx_pipe(addr);
 8001788:	48c4      	ldr	r0, [pc, #784]	@ (8001a9c <main+0x390>)
 800178a:	f7ff fcbb 	bl	8001104 <nrf24_open_tx_pipe>
  nrf24_open_rx_pipe(0, addr);
 800178e:	49c3      	ldr	r1, [pc, #780]	@ (8001a9c <main+0x390>)
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fd13 	bl	80011bc <nrf24_open_rx_pipe>

  nrf24_stop_listen();
 8001796:	f7ff fe3b 	bl	8001410 <nrf24_stop_listen>


  ce_high();
 800179a:	f7ff fbbb 	bl	8000f14 <ce_high>
  HAL_Delay(5);
 800179e:	2005      	movs	r0, #5
 80017a0:	f000 fdac 	bl	80022fc <HAL_Delay>

  char welcome_msg[] = "Estacao de rádio pronta!\r\n";
 80017a4:	4bbe      	ldr	r3, [pc, #760]	@ (8001aa0 <main+0x394>)
 80017a6:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 80017aa:	461d      	mov	r5, r3
 80017ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t*)welcome_msg, strlen(welcome_msg), 100); // 100ms de timeout
 80017b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fd5f 	bl	8000280 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80017ca:	2364      	movs	r3, #100	@ 0x64
 80017cc:	48b5      	ldr	r0, [pc, #724]	@ (8001aa4 <main+0x398>)
 80017ce:	f002 fb75 	bl	8003ebc <HAL_UART_Transmit>

  for (int i = 0; i < 16; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017d8:	e048      	b.n	800186c <main+0x160>
      pct_robo[i].id = i;
 80017da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017de:	b2d9      	uxtb	r1, r3
 80017e0:	4ab1      	ldr	r2, [pc, #708]	@ (8001aa8 <main+0x39c>)
 80017e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	460a      	mov	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
      pct_robo[i].Vx = 0;
 80017ee:	4aae      	ldr	r2, [pc, #696]	@ (8001aa8 <main+0x39c>)
 80017f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f8c3 2001 	str.w	r2, [r3, #1]
      pct_robo[i].Vy = 0;
 8001800:	4aa9      	ldr	r2, [pc, #676]	@ (8001aa8 <main+0x39c>)
 8001802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f8c3 2005 	str.w	r2, [r3, #5]
      pct_robo[i].Vang = 0;
 8001812:	4aa5      	ldr	r2, [pc, #660]	@ (8001aa8 <main+0x39c>)
 8001814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	3308      	adds	r3, #8
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f8c3 2001 	str.w	r2, [r3, #1]
      pct_robo[i].kicker = 0;
 8001826:	4aa0      	ldr	r2, [pc, #640]	@ (8001aa8 <main+0x39c>)
 8001828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	330d      	adds	r3, #13
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
      pct_robo[i].config = 0;
 8001836:	4a9c      	ldr	r2, [pc, #624]	@ (8001aa8 <main+0x39c>)
 8001838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	330e      	adds	r3, #14
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
      pct_robo[i].param = 0;
 8001846:	4a98      	ldr	r2, [pc, #608]	@ (8001aa8 <main+0x39c>)
 8001848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	330f      	adds	r3, #15
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
      pendente[i] = 0;
 8001856:	4a95      	ldr	r2, [pc, #596]	@ (8001aac <main+0x3a0>)
 8001858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800185c:	4413      	add	r3, r2
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 16; i++) {
 8001862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001866:	3301      	adds	r3, #1
 8001868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800186c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001870:	2b0f      	cmp	r3, #15
 8001872:	ddb2      	ble.n	80017da <main+0xce>
  }
  pct_undf.id = 0xFF;
 8001874:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab0 <main+0x3a4>)
 8001876:	22ff      	movs	r2, #255	@ 0xff
 8001878:	701a      	strb	r2, [r3, #0]
  pct_undf.Vx = 0;
 800187a:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab0 <main+0x3a4>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f8c3 2001 	str.w	r2, [r3, #1]
  pct_undf.Vy = 0;
 8001884:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab0 <main+0x3a4>)
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f8c3 2005 	str.w	r2, [r3, #5]
  pct_undf.Vang = 0;
 800188e:	4b88      	ldr	r3, [pc, #544]	@ (8001ab0 <main+0x3a4>)
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f8c3 2009 	str.w	r2, [r3, #9]
  pct_undf.kicker = 0;
 8001898:	4b85      	ldr	r3, [pc, #532]	@ (8001ab0 <main+0x3a4>)
 800189a:	2200      	movs	r2, #0
 800189c:	735a      	strb	r2, [r3, #13]
  pct_undf.config = 0;
 800189e:	4b84      	ldr	r3, [pc, #528]	@ (8001ab0 <main+0x3a4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	739a      	strb	r2, [r3, #14]
  pct_undf.param = 0;
 80018a4:	4b82      	ldr	r3, [pc, #520]	@ (8001ab0 <main+0x3a4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	73da      	strb	r2, [r3, #15]
  pendente_undf = 0;
 80018aa:	4b82      	ldr	r3, [pc, #520]	@ (8001ab4 <main+0x3a8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

  pct_temp.id = 0xFF;
 80018b0:	4b81      	ldr	r3, [pc, #516]	@ (8001ab8 <main+0x3ac>)
 80018b2:	22ff      	movs	r2, #255	@ 0xff
 80018b4:	701a      	strb	r2, [r3, #0]
  pct_temp.Vx = 0;
 80018b6:	4b80      	ldr	r3, [pc, #512]	@ (8001ab8 <main+0x3ac>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f8c3 2001 	str.w	r2, [r3, #1]
  pct_temp.Vy = 0;
 80018c0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab8 <main+0x3ac>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f8c3 2005 	str.w	r2, [r3, #5]
  pct_temp.Vang = 0;
 80018ca:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab8 <main+0x3ac>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f8c3 2009 	str.w	r2, [r3, #9]
  pct_temp.kicker = 0;
 80018d4:	4b78      	ldr	r3, [pc, #480]	@ (8001ab8 <main+0x3ac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	735a      	strb	r2, [r3, #13]
  pct_temp.config = 0;
 80018da:	4b77      	ldr	r3, [pc, #476]	@ (8001ab8 <main+0x3ac>)
 80018dc:	2200      	movs	r2, #0
 80018de:	739a      	strb	r2, [r3, #14]
  pct_temp.param = 0;
 80018e0:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <main+0x3ac>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	73da      	strb	r2, [r3, #15]


  HAL_UART_Receive_IT(&huart1, usart_rx, sizeof(usart_rx));  // primeira chamada
 80018e6:	2212      	movs	r2, #18
 80018e8:	4974      	ldr	r1, [pc, #464]	@ (8001abc <main+0x3b0>)
 80018ea:	486e      	ldr	r0, [pc, #440]	@ (8001aa4 <main+0x398>)
 80018ec:	f002 fb71 	bl	8003fd2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 80018f0:	466b      	mov	r3, sp
 80018f2:	603b      	str	r3, [r7, #0]

	  uint8_t tx_buffer[pld_size];
 80018f4:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <main+0x38c>)
 80018f6:	7819      	ldrb	r1, [r3, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001900:	b2cb      	uxtb	r3, r1
 8001902:	2200      	movs	r2, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	617a      	str	r2, [r7, #20]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001914:	4628      	mov	r0, r5
 8001916:	00c3      	lsls	r3, r0, #3
 8001918:	4620      	mov	r0, r4
 800191a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800191e:	4620      	mov	r0, r4
 8001920:	00c2      	lsls	r2, r0, #3
 8001922:	b2cb      	uxtb	r3, r1
 8001924:	2200      	movs	r2, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	60fa      	str	r2, [r7, #12]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001936:	4628      	mov	r0, r5
 8001938:	00c3      	lsls	r3, r0, #3
 800193a:	4620      	mov	r0, r4
 800193c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001940:	4620      	mov	r0, r4
 8001942:	00c2      	lsls	r2, r0, #3
 8001944:	460b      	mov	r3, r1
 8001946:	3307      	adds	r3, #7
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	ebad 0d03 	sub.w	sp, sp, r3
 8001950:	ab0a      	add	r3, sp, #40	@ 0x28
 8001952:	3300      	adds	r3, #0
 8001954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	  char tx_usart_buffer[64];
	  char msg[64];
	  for (int i = 0; i < 16 ; i++){
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800195e:	e12d      	b.n	8001bbc <main+0x4b0>
		  if (pendente[i]){
 8001960:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <main+0x3a0>)
 8001962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80b1 	beq.w	8001ad2 <main+0x3c6>
			  memcpy(tx_buffer, &pct_robo[i], sizeof(Pacote));
 8001970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa8 <main+0x39c>)
 8001978:	4413      	add	r3, r2
 800197a:	2210      	movs	r2, #16
 800197c:	4619      	mov	r1, r3
 800197e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001982:	f004 f8ea 	bl	8005b5a <memcpy>
			  sprintf(tx_usart_buffer, "\nPacote enviado para robo %d\n", i);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800198e:	494c      	ldr	r1, [pc, #304]	@ (8001ac0 <main+0x3b4>)
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fffd 	bl	8005990 <siprintf>
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
					   pct_robo[i].id,
 8001996:	4a44      	ldr	r2, [pc, #272]	@ (8001aa8 <main+0x39c>)
 8001998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 80019a2:	607b      	str	r3, [r7, #4]
					   pct_robo[i].Vx,
 80019a4:	4a40      	ldr	r2, [pc, #256]	@ (8001aa8 <main+0x39c>)
 80019a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	f8d3 3001 	ldr.w	r3, [r3, #1]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	4680      	mov	r8, r0
 80019ba:	4689      	mov	r9, r1
					   pct_robo[i].Vy,
 80019bc:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa8 <main+0x39c>)
 80019be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f8d3 3005 	ldr.w	r3, [r3, #5]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdc4 	bl	8000558 <__aeabi_f2d>
 80019d0:	4682      	mov	sl, r0
 80019d2:	468b      	mov	fp, r1
					   pct_robo[i].Vang,
 80019d4:	4a34      	ldr	r2, [pc, #208]	@ (8001aa8 <main+0x39c>)
 80019d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	3308      	adds	r3, #8
 80019e0:	f8d3 3001 	ldr.w	r3, [r3, #1]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdb7 	bl	8000558 <__aeabi_f2d>
 80019ea:	4604      	mov	r4, r0
 80019ec:	460d      	mov	r5, r1
					   pct_robo[i].kicker,
 80019ee:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa8 <main+0x39c>)
 80019f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	330d      	adds	r3, #13
 80019fa:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 80019fc:	461e      	mov	r6, r3
					   pct_robo[i].config,
 80019fe:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <main+0x39c>)
 8001a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	330e      	adds	r3, #14
 8001a0a:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001a0c:	4619      	mov	r1, r3
					   pct_robo[i].param);
 8001a0e:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <main+0x39c>)
 8001a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	330f      	adds	r3, #15
 8001a1a:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001a1c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001a20:	9308      	str	r3, [sp, #32]
 8001a22:	9107      	str	r1, [sp, #28]
 8001a24:	9606      	str	r6, [sp, #24]
 8001a26:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001a2a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001a2e:	e9cd 8900 	strd	r8, r9, [sp]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <main+0x3b8>)
 8001a36:	2140      	movs	r1, #64	@ 0x40
 8001a38:	f003 ff74 	bl	8005924 <sniprintf>

			  if (nrf24_transmit(tx_buffer, pld_size)) {
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <main+0x38c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001a46:	f7ff fda9 	bl	800159c <nrf24_transmit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03b      	beq.n	8001ac8 <main+0x3bc>
				  HAL_UART_Transmit(&huart1, (uint8_t*)tx_usart_buffer, strlen(tx_usart_buffer), 100);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fc13 	bl	8000280 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f107 011c 	add.w	r1, r7, #28
 8001a62:	2364      	movs	r3, #100	@ 0x64
 8001a64:	480f      	ldr	r0, [pc, #60]	@ (8001aa4 <main+0x398>)
 8001a66:	f002 fa29 	bl	8003ebc <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8001a6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fc06 	bl	8000280 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001a7c:	2364      	movs	r3, #100	@ 0x64
 8001a7e:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <main+0x398>)
 8001a80:	f002 fa1c 	bl	8003ebc <HAL_UART_Transmit>
				  pendente[i] = 0;
 8001a84:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <main+0x3a0>)
 8001a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e01f      	b.n	8001ad2 <main+0x3c6>
 8001a92:	bf00      	nop
 8001a94:	20000005 	.word	0x20000005
 8001a98:	20000006 	.word	0x20000006
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	08007c50 	.word	0x08007c50
 8001aa4:	20000374 	.word	0x20000374
 8001aa8:	20000208 	.word	0x20000208
 8001aac:	2000030c 	.word	0x2000030c
 8001ab0:	200001f8 	.word	0x200001f8
 8001ab4:	20000308 	.word	0x20000308
 8001ab8:	200003e0 	.word	0x200003e0
 8001abc:	200003bc 	.word	0x200003bc
 8001ac0:	08007c10 	.word	0x08007c10
 8001ac4:	08007c30 	.word	0x08007c30
			  }
			  else {
				  i--;	//nao sei, resolveu, ele simplesmente nao transmite os pares sem isso. deve ser bobeira
 8001ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001acc:	3b01      	subs	r3, #1
 8001ace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			  }
		  }
		  if (pendente_undf){
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <main+0x4c0>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06b      	beq.n	8001bb2 <main+0x4a6>
		  			  memcpy(tx_buffer, &pct_undf, sizeof(Pacote));
 8001ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ade:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd0 <main+0x4c4>)
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	4615      	mov	r5, r2
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	6020      	str	r0, [r4, #0]
 8001ae8:	6061      	str	r1, [r4, #4]
 8001aea:	60a2      	str	r2, [r4, #8]
 8001aec:	60e3      	str	r3, [r4, #12]
		  			  sprintf(tx_usart_buffer, "\nPacote enviado para robo %d\n", i);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001af6:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <main+0x4c8>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 ff49 	bl	8005990 <siprintf>
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
		  					   pct_undf.id,
 8001afe:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <main+0x4c4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b02:	461e      	mov	r6, r3
							   pct_undf.Vx,
 8001b04:	4b32      	ldr	r3, [pc, #200]	@ (8001bd0 <main+0x4c4>)
 8001b06:	f8d3 3001 	ldr.w	r3, [r3, #1]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	4680      	mov	r8, r0
 8001b12:	4689      	mov	r9, r1
							   pct_undf.Vy,
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <main+0x4c4>)
 8001b16:	f8d3 3005 	ldr.w	r3, [r3, #5]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd1c 	bl	8000558 <__aeabi_f2d>
 8001b20:	4682      	mov	sl, r0
 8001b22:	468b      	mov	fp, r1
							   pct_undf.Vang,
 8001b24:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <main+0x4c4>)
 8001b26:	f8d3 3009 	ldr.w	r3, [r3, #9]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
							   pct_undf.kicker,
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <main+0x4c4>)
 8001b36:	7b5b      	ldrb	r3, [r3, #13]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b38:	4619      	mov	r1, r3
							   pct_undf.config,
 8001b3a:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <main+0x4c4>)
 8001b3c:	7b9b      	ldrb	r3, [r3, #14]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b3e:	461a      	mov	r2, r3
							   pct_undf.param);
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <main+0x4c4>)
 8001b42:	7bdb      	ldrb	r3, [r3, #15]
		  			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d %d %d\r\n",
 8001b44:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001b48:	9308      	str	r3, [sp, #32]
 8001b4a:	9207      	str	r2, [sp, #28]
 8001b4c:	9106      	str	r1, [sp, #24]
 8001b4e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001b52:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001b56:	e9cd 8900 	strd	r8, r9, [sp]
 8001b5a:	4633      	mov	r3, r6
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <main+0x4cc>)
 8001b5e:	2140      	movs	r1, #64	@ 0x40
 8001b60:	f003 fee0 	bl	8005924 <sniprintf>

		  			  if (nrf24_transmit(tx_buffer, pld_size)) {
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <main+0x4d0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001b6e:	f7ff fd15 	bl	800159c <nrf24_transmit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <main+0x4a6>
		  				  HAL_UART_Transmit(&huart1, (uint8_t*)tx_usart_buffer, strlen(tx_usart_buffer), 100);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb7f 	bl	8000280 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f107 011c 	add.w	r1, r7, #28
 8001b8a:	2364      	movs	r3, #100	@ 0x64
 8001b8c:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <main+0x4d4>)
 8001b8e:	f002 f995 	bl	8003ebc <HAL_UART_Transmit>
		  				  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8001b92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb72 	bl	8000280 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001ba4:	2364      	movs	r3, #100	@ 0x64
 8001ba6:	480e      	ldr	r0, [pc, #56]	@ (8001be0 <main+0x4d4>)
 8001ba8:	f002 f988 	bl	8003ebc <HAL_UART_Transmit>
		  				  pendente_undf = 0;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <main+0x4c0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 16 ; i++){
 8001bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	f77f aecd 	ble.w	8001960 <main+0x254>
 8001bc6:	f8d7 d000 	ldr.w	sp, [r7]
  {
 8001bca:	e691      	b.n	80018f0 <main+0x1e4>
 8001bcc:	20000308 	.word	0x20000308
 8001bd0:	200001f8 	.word	0x200001f8
 8001bd4:	08007c10 	.word	0x08007c10
 8001bd8:	08007c30 	.word	0x08007c30
 8001bdc:	20000006 	.word	0x20000006
 8001be0:	20000374 	.word	0x20000374

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b094      	sub	sp, #80	@ 0x50
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2230      	movs	r2, #48	@ 0x30
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 ff31 	bl	8005a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <SystemClock_Config+0xc8>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <SystemClock_Config+0xc8>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <SystemClock_Config+0xc8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <SystemClock_Config+0xcc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <SystemClock_Config+0xcc>)
 8001c2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <SystemClock_Config+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c44:	2301      	movs	r3, #1
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c48:	2310      	movs	r3, #16
 8001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c54:	2308      	movs	r3, #8
 8001c56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001c58:	2350      	movs	r3, #80	@ 0x50
 8001c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fead 	bl	80029c8 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c74:	f000 f8ce 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2102      	movs	r1, #2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 f90f 	bl	8002eb8 <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ca0:	f000 f8b8 	bl	8001e14 <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	@ 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <MX_SPI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce8:	2210      	movs	r2, #16
 8001cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d06:	f001 fab7 	bl	8003278 <HAL_SPI_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f000 f880 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000031c 	.word	0x2000031c
 8001d1c:	40013000 	.word	0x40013000

08001d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <MX_USART1_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d58:	f002 f860 	bl	8003e1c <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 f857 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000374 	.word	0x20000374
 8001d70:	40011000 	.word	0x40011000

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_GPIO_Init+0x98>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	21c0      	movs	r1, #192	@ 0xc0
 8001de2:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <MX_GPIO_Init+0x9c>)
 8001de4:	f000 fdd6 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001de8:	23c0      	movs	r3, #192	@ 0xc0
 8001dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_GPIO_Init+0x9c>)
 8001e00:	f000 fc44 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <Error_Handler+0x8>

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	4a08      	ldr	r2, [pc, #32]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_SPI_MspInit+0x84>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12b      	bne.n	8001eea <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eca:	23e0      	movs	r3, #224	@ 0xe0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	2305      	movs	r3, #5
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <HAL_SPI_MspInit+0x8c>)
 8001ee6:	f000 fbd1 	bl	800268c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	@ 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000

08001f00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_UART_MspInit+0x94>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d134      	bne.n	8001f8c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_UART_MspInit+0x98>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <HAL_UART_MspInit+0x9c>)
 8001f78:	f000 fb88 	bl	800268c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2025      	movs	r0, #37	@ 0x25
 8001f82:	f000 faba 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f86:	2025      	movs	r0, #37	@ 0x25
 8001f88:	f000 fad3 	bl	8002532 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff6:	f000 f961 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <USART1_IRQHandler+0x10>)
 8002006:	f002 f809 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000374 	.word	0x20000374

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_kill>:

int _kill(int pid, int sig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202e:	f003 fd67 	bl	8005b00 <__errno>
 8002032:	4603      	mov	r3, r0
 8002034:	2216      	movs	r2, #22
 8002036:	601a      	str	r2, [r3, #0]
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_exit>:

void _exit (int status)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800204c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffe7 	bl	8002024 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002056:	bf00      	nop
 8002058:	e7fd      	b.n	8002056 <_exit+0x12>

0800205a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e00a      	b.n	8002082 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800206c:	f3af 8000 	nop.w
 8002070:	4601      	mov	r1, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf0      	blt.n	800206c <_read+0x12>
  }

  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e009      	b.n	80020ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbf1      	blt.n	80020a6 <_write+0x12>
  }
  return len;
 80020c2:	687b      	ldr	r3, [r7, #4]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_close>:

int _close(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f4:	605a      	str	r2, [r3, #4]
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_isatty>:

int _isatty(int file)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f003 fccc 	bl	8005b00 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20020000 	.word	0x20020000
 8002194:	00000400 	.word	0x00000400
 8002198:	200003f0 	.word	0x200003f0
 800219c:	20000548 	.word	0x20000548

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021c8:	f7ff ffea 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	@ (8002204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f2:	f003 fc8b 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff fa89 	bl	800170c <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002208:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 800220c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002210:	20000544 	.word	0x20000544

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f94f 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	200f      	movs	r0, #15
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fde8 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f967 	bl	800254e <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002298:	f000 f92f 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	@ (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000010 	.word	0x20000010
 80022b8:	2000000c 	.word	0x2000000c

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000010 	.word	0x20000010
 80022e0:	200003f4 	.word	0x200003f4

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200003f4 	.word	0x200003f4

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000010 	.word	0x20000010

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff feb6 	bl	80022e4 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d008      	beq.n	8002598 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e052      	b.n	800263e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0216 	bic.w	r2, r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <HAL_DMA_Abort+0x62>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e8:	e013      	b.n	8002612 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ea:	f7ff fe7b 	bl	80022e4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d90c      	bls.n	8002612 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e015      	b.n	800263e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e4      	bne.n	80025ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	223f      	movs	r2, #63	@ 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00c      	b.n	800267e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e159      	b.n	800295c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8148 	bne.w	8002956 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a2 	beq.w	8002956 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b57      	ldr	r3, [pc, #348]	@ (8002974 <HAL_GPIO_Init+0x2e8>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	4a56      	ldr	r2, [pc, #344]	@ (8002974 <HAL_GPIO_Init+0x2e8>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44
 8002822:	4b54      	ldr	r3, [pc, #336]	@ (8002974 <HAL_GPIO_Init+0x2e8>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a52      	ldr	r2, [pc, #328]	@ (8002978 <HAL_GPIO_Init+0x2ec>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a49      	ldr	r2, [pc, #292]	@ (800297c <HAL_GPIO_Init+0x2f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x202>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a48      	ldr	r2, [pc, #288]	@ (8002980 <HAL_GPIO_Init+0x2f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x1fe>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a47      	ldr	r2, [pc, #284]	@ (8002984 <HAL_GPIO_Init+0x2f8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x1fa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a46      	ldr	r2, [pc, #280]	@ (8002988 <HAL_GPIO_Init+0x2fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x1f6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a45      	ldr	r2, [pc, #276]	@ (800298c <HAL_GPIO_Init+0x300>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x1f2>
 800287a:	2304      	movs	r3, #4
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800287e:	2307      	movs	r3, #7
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x204>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x204>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x204>
 800288e:	2300      	movs	r3, #0
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	@ (8002978 <HAL_GPIO_Init+0x2ec>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ae:	4b38      	ldr	r3, [pc, #224]	@ (8002990 <HAL_GPIO_Init+0x304>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002990 <HAL_GPIO_Init+0x304>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <HAL_GPIO_Init+0x304>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028fc:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <HAL_GPIO_Init+0x304>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002902:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <HAL_GPIO_Init+0x304>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002926:	4a1a      	ldr	r2, [pc, #104]	@ (8002990 <HAL_GPIO_Init+0x304>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <HAL_GPIO_Init+0x304>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002950:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_GPIO_Init+0x304>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	f67f aea2 	bls.w	80026a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	@ 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b0:	e003      	b.n	80029ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	041a      	lsls	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	619a      	str	r2, [r3, #24]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e267      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029e6:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e242      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x74>
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b6d      	ldr	r3, [pc, #436]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6c      	ldr	r2, [pc, #432]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a60:	4b69      	ldr	r3, [pc, #420]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a68      	ldr	r2, [pc, #416]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fc30 	bl	80022e4 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff fc2c 	bl	80022e4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	@ 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e207      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fc1c 	bl	80022e4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fc18 	bl	80022e4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1f3      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b51      	ldr	r3, [pc, #324]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ade:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b41      	ldr	r3, [pc, #260]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1c7      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4937      	ldr	r1, [pc, #220]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b34      	ldr	r3, [pc, #208]	@ (8002c0c <HAL_RCC_OscConfig+0x244>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fbd1 	bl	80022e4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff fbcd 	bl	80022e4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1a8      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4925      	ldr	r1, [pc, #148]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_RCC_OscConfig+0x244>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff fbb0 	bl	80022e4 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff fbac 	bl	80022e4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e187      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d036      	beq.n	8002c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_RCC_OscConfig+0x248>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff fb90 	bl	80022e4 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7ff fb8c 	bl	80022e4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e167      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_OscConfig+0x248>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7ff fb79 	bl	80022e4 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e00e      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff fb75 	bl	80022e4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d907      	bls.n	8002c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e150      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470000 	.word	0x42470000
 8002c10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b88      	ldr	r3, [pc, #544]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ea      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b81      	ldr	r3, [pc, #516]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b7d      	ldr	r3, [pc, #500]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	4a7c      	ldr	r2, [pc, #496]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b77      	ldr	r3, [pc, #476]	@ (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b74      	ldr	r3, [pc, #464]	@ (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a73      	ldr	r2, [pc, #460]	@ (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7ff fb35 	bl	80022e4 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7ff fb31 	bl	80022e4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e10c      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b6a      	ldr	r3, [pc, #424]	@ (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2ea>
 8002ca4:	4b64      	ldr	r3, [pc, #400]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a63      	ldr	r2, [pc, #396]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0x324>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x30c>
 8002cba:	4b5f      	ldr	r3, [pc, #380]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cca:	4a5b      	ldr	r2, [pc, #364]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x324>
 8002cd4:	4b58      	ldr	r3, [pc, #352]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a57      	ldr	r2, [pc, #348]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	4b55      	ldr	r3, [pc, #340]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a54      	ldr	r2, [pc, #336]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 0304 	bic.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7ff faf6 	bl	80022e4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7ff faf2 	bl	80022e4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0cb      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <HAL_RCC_OscConfig+0x334>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7ff fae0 	bl	80022e4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff fadc 	bl	80022e4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0b5      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ee      	bne.n	8002d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b39      	ldr	r3, [pc, #228]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a1 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d05c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d141      	bne.n	8002dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fab0 	bl	80022e4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff faac 	bl	80022e4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e087      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	491b      	ldr	r1, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7ff fa85 	bl	80022e4 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7ff fa81 	bl	80022e4 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e05c      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x416>
 8002dfc:	e054      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7ff fa6e 	bl	80022e4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff fa6a 	bl	80022e4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e045      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x444>
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e038      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x4ec>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d028      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d121      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d11a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cc      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b68      	ldr	r3, [pc, #416]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b65      	ldr	r3, [pc, #404]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a52      	ldr	r2, [pc, #328]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d044      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e067      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b37      	ldr	r3, [pc, #220]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4934      	ldr	r1, [pc, #208]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7ff f99c 	bl	80022e4 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7ff f998 	bl	80022e4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20c      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f8fc 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00
 8003074:	40023800 	.word	0x40023800
 8003078:	08007c6c 	.word	0x08007c6c
 800307c:	20000008 	.word	0x20000008
 8003080:	2000000c 	.word	0x2000000c

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003088:	b090      	sub	sp, #64	@ 0x40
 800308a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800309c:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x40>
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	f200 80a1 	bhi.w	80031f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x34>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x3a>
 80030b6:	e09b      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x184>)
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030bc:	e09b      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030be:	4b53      	ldr	r3, [pc, #332]	@ (800320c <HAL_RCC_GetSysClockFreq+0x188>)
 80030c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030c2:	e098      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	2200      	movs	r2, #0
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030ec:	2100      	movs	r1, #0
 80030ee:	4b47      	ldr	r3, [pc, #284]	@ (800320c <HAL_RCC_GetSysClockFreq+0x188>)
 80030f0:	fb03 f201 	mul.w	r2, r3, r1
 80030f4:	2300      	movs	r3, #0
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	4a43      	ldr	r2, [pc, #268]	@ (800320c <HAL_RCC_GetSysClockFreq+0x188>)
 80030fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003102:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003104:	460a      	mov	r2, r1
 8003106:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800310a:	4413      	add	r3, r2
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	2200      	movs	r2, #0
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	61fa      	str	r2, [r7, #28]
 8003116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800311a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800311e:	f7fd fd4b 	bl	8000bb8 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4613      	mov	r3, r2
 8003128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800312a:	e053      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312c:	4b35      	ldr	r3, [pc, #212]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	2200      	movs	r2, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	617a      	str	r2, [r7, #20]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800313e:	f04f 0b00 	mov.w	fp, #0
 8003142:	4652      	mov	r2, sl
 8003144:	465b      	mov	r3, fp
 8003146:	f04f 0000 	mov.w	r0, #0
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	0159      	lsls	r1, r3, #5
 8003150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003154:	0150      	lsls	r0, r2, #5
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	ebb2 080a 	subs.w	r8, r2, sl
 800315e:	eb63 090b 	sbc.w	r9, r3, fp
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800316e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003172:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003176:	ebb2 0408 	subs.w	r4, r2, r8
 800317a:	eb63 0509 	sbc.w	r5, r3, r9
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	00eb      	lsls	r3, r5, #3
 8003188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318c:	00e2      	lsls	r2, r4, #3
 800318e:	4614      	mov	r4, r2
 8003190:	461d      	mov	r5, r3
 8003192:	eb14 030a 	adds.w	r3, r4, sl
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	eb45 030b 	adc.w	r3, r5, fp
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031aa:	4629      	mov	r1, r5
 80031ac:	028b      	lsls	r3, r1, #10
 80031ae:	4621      	mov	r1, r4
 80031b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b4:	4621      	mov	r1, r4
 80031b6:	028a      	lsls	r2, r1, #10
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031be:	2200      	movs	r2, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	60fa      	str	r2, [r7, #12]
 80031c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c8:	f7fd fcf6 	bl	8000bb8 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4613      	mov	r3, r2
 80031d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	3301      	adds	r3, #1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80031e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x184>)
 80031f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3740      	adds	r7, #64	@ 0x40
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400
 800320c:	017d7840 	.word	0x017d7840

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000008 	.word	0x20000008

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a9b      	lsrs	r3, r3, #10
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	@ (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	08007c7c 	.word	0x08007c7c

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003254:	f7ff ffdc 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0b5b      	lsrs	r3, r3, #13
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	08007c7c 	.word	0x08007c7c

08003278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07b      	b.n	8003382 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800329a:	d009      	beq.n	80032b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
 80032a2:	e005      	b.n	80032b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fdd0 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0104 	and.w	r1, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0210 	and.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b088      	sub	sp, #32
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339a:	f7fe ffa3 	bl	80022e4 <HAL_GetTick>
 800339e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
 80033b2:	e12a      	b.n	800360a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_Transmit+0x36>
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e122      	b.n	800360a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_SPI_Transmit+0x48>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e11b      	b.n	800360a <HAL_SPI_Transmit+0x280>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2203      	movs	r2, #3
 80033de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	88fa      	ldrh	r2, [r7, #6]
 80033f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003420:	d10f      	bne.n	8003442 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b40      	cmp	r3, #64	@ 0x40
 800344e:	d007      	beq.n	8003460 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003468:	d152      	bne.n	8003510 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_SPI_Transmit+0xee>
 8003472:	8b7b      	ldrh	r3, [r7, #26]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d145      	bne.n	8003504 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	881a      	ldrh	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	1c9a      	adds	r2, r3, #2
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800349c:	e032      	b.n	8003504 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d112      	bne.n	80034d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034d0:	e018      	b.n	8003504 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d2:	f7fe ff07 	bl	80022e4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d803      	bhi.n	80034ea <HAL_SPI_Transmit+0x160>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034e8:	d102      	bne.n	80034f0 <HAL_SPI_Transmit+0x166>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e082      	b.n	800360a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1c7      	bne.n	800349e <HAL_SPI_Transmit+0x114>
 800350e:	e053      	b.n	80035b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Transmit+0x194>
 8003518:	8b7b      	ldrh	r3, [r7, #26]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d147      	bne.n	80035ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003544:	e033      	b.n	80035ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d113      	bne.n	800357c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	@ 0x36
 800357a:	e018      	b.n	80035ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357c:	f7fe feb2 	bl	80022e4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_Transmit+0x20a>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003592:	d102      	bne.n	800359a <HAL_SPI_Transmit+0x210>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e02d      	b.n	800360a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1c6      	bne.n	8003546 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fbd9 	bl	8003d74 <SPI_EndRxTxTransaction>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003608:	2300      	movs	r3, #0
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af02      	add	r7, sp, #8
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	e104      	b.n	800383c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Receive+0x2c>
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0fc      	b.n	800383c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800364a:	d112      	bne.n	8003672 <HAL_SPI_Receive+0x60>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2204      	movs	r2, #4
 8003658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f8eb 	bl	8003844 <HAL_SPI_TransmitReceive>
 800366e:	4603      	mov	r3, r0
 8003670:	e0e4      	b.n	800383c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003672:	f7fe fe37 	bl	80022e4 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_SPI_Receive+0x74>
 8003682:	2302      	movs	r3, #2
 8003684:	e0da      	b.n	800383c <HAL_SPI_Receive+0x22a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2204      	movs	r2, #4
 8003692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d4:	d10f      	bne.n	80036f6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d007      	beq.n	8003714 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d170      	bne.n	80037fe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800371c:	e035      	b.n	800378a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d115      	bne.n	8003758 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f103 020c 	add.w	r2, r3, #12
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003756:	e018      	b.n	800378a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003758:	f7fe fdc4 	bl	80022e4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d803      	bhi.n	8003770 <HAL_SPI_Receive+0x15e>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800376e:	d102      	bne.n	8003776 <HAL_SPI_Receive+0x164>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e058      	b.n	800383c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1c4      	bne.n	800371e <HAL_SPI_Receive+0x10c>
 8003794:	e038      	b.n	8003808 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d113      	bne.n	80037cc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	b292      	uxth	r2, r2
 80037b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	1c9a      	adds	r2, r3, #2
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037ca:	e018      	b.n	80037fe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037cc:	f7fe fd8a 	bl	80022e4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d803      	bhi.n	80037e4 <HAL_SPI_Receive+0x1d2>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037e2:	d102      	bne.n	80037ea <HAL_SPI_Receive+0x1d8>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e01e      	b.n	800383c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1c6      	bne.n	8003796 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fa4b 	bl	8003ca8 <SPI_EndRxTransaction>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800383a:	2300      	movs	r3, #0
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003856:	f7fe fd45 	bl	80022e4 <HAL_GetTick>
 800385a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003862:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d00c      	beq.n	800388e <HAL_SPI_TransmitReceive+0x4a>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800387a:	d106      	bne.n	800388a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_SPI_TransmitReceive+0x46>
 8003884:	7ffb      	ldrb	r3, [r7, #31]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d001      	beq.n	800388e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	e17f      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x5c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x5c>
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e174      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x6e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e16d      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d003      	beq.n	80038ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2205      	movs	r2, #5
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	887a      	ldrh	r2, [r7, #2]
 80038f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	2b40      	cmp	r3, #64	@ 0x40
 8003910:	d007      	beq.n	8003922 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392a:	d17e      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_TransmitReceive+0xf6>
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d16c      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	881a      	ldrh	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395e:	e059      	b.n	8003a14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d11b      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x162>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x162>
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	2b01      	cmp	r3, #1
 800397c:	d113      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d119      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x1a4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d014      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	b292      	uxth	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039e4:	2301      	movs	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039e8:	f7fe fc7c 	bl	80022e4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d80d      	bhi.n	8003a14 <HAL_SPI_TransmitReceive+0x1d0>
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fe:	d009      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0bc      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1a0      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x11c>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d19b      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x11c>
 8003a28:	e082      	b.n	8003b30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x1f4>
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d171      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5e:	e05d      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x264>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x264>
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d114      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d119      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2a6>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d014      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003aea:	f7fe fbfb 	bl	80022e4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d803      	bhi.n	8003b02 <HAL_SPI_TransmitReceive+0x2be>
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b00:	d102      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x2c4>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e038      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d19c      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x21c>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d197      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f91d 	bl	8003d74 <SPI_EndRxTxTransaction>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e01d      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3728      	adds	r7, #40	@ 0x28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba8:	f7fe fb9c 	bl	80022e4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb8:	f7fe fb94 	bl	80022e4 <HAL_GetTick>
 8003bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	0d1b      	lsrs	r3, r3, #20
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bce:	e055      	b.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd6:	d051      	beq.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd8:	f7fe fb84 	bl	80022e4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d902      	bls.n	8003bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13d      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c06:	d111      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c10:	d004      	beq.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d107      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c34:	d10f      	bne.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e018      	b.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e002      	b.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d19a      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000008 	.word	0x20000008

08003ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cbc:	d111      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc6:	d004      	beq.n	8003cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd0:	d107      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cea:	d12a      	bne.n	8003d42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf4:	d012      	beq.n	8003d1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2180      	movs	r1, #128	@ 0x80
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff49 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d02d      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e026      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2101      	movs	r1, #1
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff36 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01a      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e013      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ff23 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e000      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2201      	movs	r2, #1
 8003d88:	2102      	movs	r1, #2
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ff04 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e032      	b.n	8003e0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003da6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <SPI_EndRxTxTransaction+0xa0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e18 <SPI_EndRxTxTransaction+0xa4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	0d5b      	lsrs	r3, r3, #21
 8003db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc4:	d112      	bne.n	8003dec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	@ 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fee1 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e00f      	b.n	8003e0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e02:	2b80      	cmp	r3, #128	@ 0x80
 8003e04:	d0f2      	beq.n	8003dec <SPI_EndRxTxTransaction+0x78>
 8003e06:	e000      	b.n	8003e0a <SPI_EndRxTxTransaction+0x96>
        break;
 8003e08:	bf00      	nop
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000008 	.word	0x20000008
 8003e18:	165e9f81 	.word	0x165e9f81

08003e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e042      	b.n	8003eb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fe f85c 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	@ 0x24
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fdd3 	bl	8004a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	@ 0x28
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d175      	bne.n	8003fc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Transmit+0x2c>
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e06e      	b.n	8003fca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2221      	movs	r2, #33	@ 0x21
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003efa:	f7fe f9f3 	bl	80022e4 <HAL_GetTick>
 8003efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f14:	d108      	bne.n	8003f28 <HAL_UART_Transmit+0x6c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d104      	bne.n	8003f28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e003      	b.n	8003f30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f30:	e02e      	b.n	8003f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2180      	movs	r1, #128	@ 0x80
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fb37 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e03a      	b.n	8003fca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e007      	b.n	8003f82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1cb      	bne.n	8003f32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2140      	movs	r1, #64	@ 0x40
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fb03 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e006      	b.n	8003fca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d112      	bne.n	8004012 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_UART_Receive_IT+0x26>
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e00b      	b.n	8004014 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	461a      	mov	r2, r3
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fb2a 	bl	8004662 <UART_Start_Receive_IT>
 800400e:	4603      	mov	r3, r0
 8004010:	e000      	b.n	8004014 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b0ba      	sub	sp, #232	@ 0xe8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800405a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fc07 	bl	800488e <UART_Receive_IT>
      return;
 8004080:	e273      	b.n	800456a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80de 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80d1 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 820a 	beq.w	8004560 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb92 	bl	800488e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_UART_IRQHandler+0x17a>
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04f      	beq.n	8004236 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa9d 	bl	80046d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b40      	cmp	r3, #64	@ 0x40
 80041a8:	d141      	bne.n	800422e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d9      	bne.n	80041aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	4a8a      	ldr	r2, [pc, #552]	@ (800442c <HAL_UART_IRQHandler+0x410>)
 8004204:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fa1b 	bl	8002646 <HAL_DMA_Abort_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00e      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9ac 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00a      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9a8 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e006      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9a4 	bl	8004584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004242:	e18d      	b.n	8004560 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	bf00      	nop
    return;
 8004246:	e18b      	b.n	8004560 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 8167 	bne.w	8004520 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8160 	beq.w	8004520 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8159 	beq.w	8004520 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	f040 80ce 	bne.w	8004430 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80a9 	beq.w	80043fc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f080 80a2 	bcs.w	80043fc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ca:	f000 8088 	beq.w	80043de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004306:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1d9      	bne.n	80042ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800432a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800433e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004342:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004346:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e1      	bne.n	800431a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800437a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800437c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004380:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e3      	bne.n	8004356 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e3      	bne.n	800439c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe f8c4 	bl	8002566 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8cf 	bl	8004598 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043fa:	e0b3      	b.n	8004564 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004404:	429a      	cmp	r2, r3
 8004406:	f040 80ad 	bne.w	8004564 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004414:	f040 80a6 	bne.w	8004564 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8b7 	bl	8004598 <HAL_UARTEx_RxEventCallback>
      return;
 800442a:	e09b      	b.n	8004564 <HAL_UART_IRQHandler+0x548>
 800442c:	0800479d 	.word	0x0800479d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 808e 	beq.w	8004568 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800444c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8089 	beq.w	8004568 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800446c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800447a:	647a      	str	r2, [r7, #68]	@ 0x44
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e3      	bne.n	8004456 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	623b      	str	r3, [r7, #32]
   return(result);
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e3      	bne.n	800448e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044f8:	61fa      	str	r2, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e3      	bne.n	80044d4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f83d 	bl	8004598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800451e:	e023      	b.n	8004568 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_UART_IRQHandler+0x524>
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f940 	bl	80047be <UART_Transmit_IT>
    return;
 800453e:	e014      	b.n	800456a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <HAL_UART_IRQHandler+0x54e>
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f980 	bl	800485e <UART_EndTransmit_IT>
    return;
 800455e:	e004      	b.n	800456a <HAL_UART_IRQHandler+0x54e>
    return;
 8004560:	bf00      	nop
 8004562:	e002      	b.n	800456a <HAL_UART_IRQHandler+0x54e>
      return;
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <HAL_UART_IRQHandler+0x54e>
      return;
 8004568:	bf00      	nop
  }
}
 800456a:	37e8      	adds	r7, #232	@ 0xe8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c0:	e03b      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045c8:	d037      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fd fe8b 	bl	80022e4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e03a      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b80      	cmp	r3, #128	@ 0x80
 80045f6:	d020      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d01d      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b08      	cmp	r3, #8
 800460a:	d116      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f857 	bl	80046d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2208      	movs	r2, #8
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e00f      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	429a      	cmp	r2, r3
 8004656:	d0b4      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2222      	movs	r2, #34	@ 0x22
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0220 	orr.w	r2, r2, #32
 80046c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b095      	sub	sp, #84	@ 0x54
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	61fb      	str	r3, [r7, #28]
   return(result);
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	2b01      	cmp	r3, #1
 800474c:	d119      	bne.n	8004782 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	60bb      	str	r3, [r7, #8]
   return(result);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0310 	bic.w	r3, r3, #16
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800476e:	61ba      	str	r2, [r7, #24]
 8004770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	613b      	str	r3, [r7, #16]
   return(result);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004790:	bf00      	nop
 8004792:	3754      	adds	r7, #84	@ 0x54
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fee7 	bl	8004584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b21      	cmp	r3, #33	@ 0x21
 80047d0:	d13e      	bne.n	8004850 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047da:	d114      	bne.n	8004806 <UART_Transmit_IT+0x48>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	621a      	str	r2, [r3, #32]
 8004804:	e008      	b.n	8004818 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6211      	str	r1, [r2, #32]
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4619      	mov	r1, r3
 8004826:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800483a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800484a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004874:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe76 	bl	8004570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08c      	sub	sp, #48	@ 0x30
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b22      	cmp	r3, #34	@ 0x22
 80048a8:	f040 80aa 	bne.w	8004a00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b4:	d115      	bne.n	80048e2 <UART_Receive_IT+0x54>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d111      	bne.n	80048e2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e0:	e024      	b.n	800492c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f0:	d007      	beq.n	8004902 <UART_Receive_IT+0x74>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <UART_Receive_IT+0x82>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e008      	b.n	8004922 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491c:	b2da      	uxtb	r2, r3
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29b      	uxth	r3, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4619      	mov	r1, r3
 800493a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800493c:	2b00      	cmp	r3, #0
 800493e:	d15d      	bne.n	80049fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0220 	bic.w	r2, r2, #32
 800494e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	2b01      	cmp	r3, #1
 8004984:	d135      	bne.n	80049f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ac:	623a      	str	r2, [r7, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d10a      	bne.n	80049e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fdd4 	bl	8004598 <HAL_UARTEx_RxEventCallback>
 80049f0:	e002      	b.n	80049f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fc fe6e 	bl	80016d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e002      	b.n	8004a02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e000      	b.n	8004a02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	@ 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b0c0      	sub	sp, #256	@ 0x100
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	ea40 0301 	orr.w	r3, r0, r1
 8004a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a64:	f021 010c 	bic.w	r1, r1, #12
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a86:	6999      	ldr	r1, [r3, #24]
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	ea40 0301 	orr.w	r3, r0, r1
 8004a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd8 <UART_SetConfig+0x2cc>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d005      	beq.n	8004aac <UART_SetConfig+0xa0>
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8004cdc <UART_SetConfig+0x2d0>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d104      	bne.n	8004ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe fbd0 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ab4:	e003      	b.n	8004abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ab6:	f7fe fbb7 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8004aba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac8:	f040 810c 	bne.w	8004ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	1891      	adds	r1, r2, r2
 8004ae4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aee:	4621      	mov	r1, r4
 8004af0:	eb12 0801 	adds.w	r8, r2, r1
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb43 0901 	adc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	eb49 0303 	adc.w	r3, r9, r3
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	18db      	adds	r3, r3, r3
 8004b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b40:	4613      	mov	r3, r2
 8004b42:	eb42 0303 	adc.w	r3, r2, r3
 8004b46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b50:	f7fc f832 	bl	8000bb8 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4b61      	ldr	r3, [pc, #388]	@ (8004ce0 <UART_SetConfig+0x2d4>)
 8004b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	011c      	lsls	r4, r3, #4
 8004b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b84:	4641      	mov	r1, r8
 8004b86:	eb12 0a01 	adds.w	sl, r2, r1
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba4:	4692      	mov	sl, r2
 8004ba6:	469b      	mov	fp, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	eb1a 0303 	adds.w	r3, sl, r3
 8004bae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	18db      	adds	r3, r3, r3
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	eb42 0303 	adc.w	r3, r2, r3
 8004bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004be6:	f7fb ffe7 	bl	8000bb8 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <UART_SetConfig+0x2d4>)
 8004bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2264      	movs	r2, #100	@ 0x64
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	1acb      	subs	r3, r1, r3
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c06:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <UART_SetConfig+0x2d4>)
 8004c08:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c14:	441c      	add	r4, r3
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c30:	415b      	adcs	r3, r3
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ca2:	f7fb ff89 	bl	8000bb8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <UART_SetConfig+0x2d4>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	@ 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3332      	adds	r3, #50	@ 0x32
 8004cbe:	4a08      	ldr	r2, [pc, #32]	@ (8004ce0 <UART_SetConfig+0x2d4>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 0207 	and.w	r2, r3, #7
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4422      	add	r2, r4
 8004cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cd4:	e106      	b.n	8004ee4 <UART_SetConfig+0x4d8>
 8004cd6:	bf00      	nop
 8004cd8:	40011000 	.word	0x40011000
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	1891      	adds	r1, r2, r2
 8004cfc:	6239      	str	r1, [r7, #32]
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d06:	4641      	mov	r1, r8
 8004d08:	1854      	adds	r4, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb43 0501 	adc.w	r5, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	00eb      	lsls	r3, r5, #3
 8004d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1e:	00e2      	lsls	r2, r4, #3
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	18e3      	adds	r3, r4, r3
 8004d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	eb45 0303 	adc.w	r3, r5, r3
 8004d32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d52:	4629      	mov	r1, r5
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	008a      	lsls	r2, r1, #2
 8004d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d64:	f7fb ff28 	bl	8000bb8 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b60      	ldr	r3, [pc, #384]	@ (8004ef0 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	61b9      	str	r1, [r7, #24]
 8004d90:	415b      	adcs	r3, r3
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	4641      	mov	r1, r8
 8004d9a:	1851      	adds	r1, r2, r1
 8004d9c:	6139      	str	r1, [r7, #16]
 8004d9e:	4649      	mov	r1, r9
 8004da0:	414b      	adcs	r3, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db0:	4659      	mov	r1, fp
 8004db2:	00cb      	lsls	r3, r1, #3
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dba:	4651      	mov	r1, sl
 8004dbc:	00ca      	lsls	r2, r1, #3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dcc:	464b      	mov	r3, r9
 8004dce:	460a      	mov	r2, r1
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004de2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e02:	f7fb fed9 	bl	8000bb8 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4b38      	ldr	r3, [pc, #224]	@ (8004ef0 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2264      	movs	r2, #100	@ 0x64
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	1acb      	subs	r3, r1, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	@ 0x32
 8004e20:	4a33      	ldr	r2, [pc, #204]	@ (8004ef0 <UART_SetConfig+0x4e4>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e2c:	441c      	add	r4, r3
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	415b      	adcs	r3, r3
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7e:	464b      	mov	r3, r9
 8004e80:	460a      	mov	r2, r1
 8004e82:	eb42 0303 	adc.w	r3, r2, r3
 8004e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	008b      	lsls	r3, r1, #2
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eaa:	4641      	mov	r1, r8
 8004eac:	008a      	lsls	r2, r1, #2
 8004eae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004eb2:	f7fb fe81 	bl	8000bb8 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <UART_SetConfig+0x4e4>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	@ 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	3332      	adds	r3, #50	@ 0x32
 8004ece:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <UART_SetConfig+0x4e4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4422      	add	r2, r4
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef0:	51eb851f 	.word	0x51eb851f

08004ef4 <__cvt>:
 8004ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	ec57 6b10 	vmov	r6, r7, d0
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4619      	mov	r1, r3
 8004f02:	463b      	mov	r3, r7
 8004f04:	bfbb      	ittet	lt
 8004f06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f0a:	461f      	movlt	r7, r3
 8004f0c:	2300      	movge	r3, #0
 8004f0e:	232d      	movlt	r3, #45	@ 0x2d
 8004f10:	700b      	strb	r3, [r1, #0]
 8004f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f18:	4691      	mov	r9, r2
 8004f1a:	f023 0820 	bic.w	r8, r3, #32
 8004f1e:	bfbc      	itt	lt
 8004f20:	4632      	movlt	r2, r6
 8004f22:	4616      	movlt	r6, r2
 8004f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f28:	d005      	beq.n	8004f36 <__cvt+0x42>
 8004f2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f2e:	d100      	bne.n	8004f32 <__cvt+0x3e>
 8004f30:	3401      	adds	r4, #1
 8004f32:	2102      	movs	r1, #2
 8004f34:	e000      	b.n	8004f38 <__cvt+0x44>
 8004f36:	2103      	movs	r1, #3
 8004f38:	ab03      	add	r3, sp, #12
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	ab02      	add	r3, sp, #8
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	ec47 6b10 	vmov	d0, r6, r7
 8004f44:	4653      	mov	r3, sl
 8004f46:	4622      	mov	r2, r4
 8004f48:	f000 fe9e 	bl	8005c88 <_dtoa_r>
 8004f4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f50:	4605      	mov	r5, r0
 8004f52:	d119      	bne.n	8004f88 <__cvt+0x94>
 8004f54:	f019 0f01 	tst.w	r9, #1
 8004f58:	d00e      	beq.n	8004f78 <__cvt+0x84>
 8004f5a:	eb00 0904 	add.w	r9, r0, r4
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f6a:	b108      	cbz	r0, 8004f70 <__cvt+0x7c>
 8004f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f70:	2230      	movs	r2, #48	@ 0x30
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	454b      	cmp	r3, r9
 8004f76:	d31e      	bcc.n	8004fb6 <__cvt+0xc2>
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f7c:	1b5b      	subs	r3, r3, r5
 8004f7e:	4628      	mov	r0, r5
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	b004      	add	sp, #16
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f8c:	eb00 0904 	add.w	r9, r0, r4
 8004f90:	d1e5      	bne.n	8004f5e <__cvt+0x6a>
 8004f92:	7803      	ldrb	r3, [r0, #0]
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d10a      	bne.n	8004fae <__cvt+0xba>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fa4:	b918      	cbnz	r0, 8004fae <__cvt+0xba>
 8004fa6:	f1c4 0401 	rsb	r4, r4, #1
 8004faa:	f8ca 4000 	str.w	r4, [sl]
 8004fae:	f8da 3000 	ldr.w	r3, [sl]
 8004fb2:	4499      	add	r9, r3
 8004fb4:	e7d3      	b.n	8004f5e <__cvt+0x6a>
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	9103      	str	r1, [sp, #12]
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e7d9      	b.n	8004f72 <__cvt+0x7e>

08004fbe <__exponent>:
 8004fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	bfba      	itte	lt
 8004fc4:	4249      	neglt	r1, r1
 8004fc6:	232d      	movlt	r3, #45	@ 0x2d
 8004fc8:	232b      	movge	r3, #43	@ 0x2b
 8004fca:	2909      	cmp	r1, #9
 8004fcc:	7002      	strb	r2, [r0, #0]
 8004fce:	7043      	strb	r3, [r0, #1]
 8004fd0:	dd29      	ble.n	8005026 <__exponent+0x68>
 8004fd2:	f10d 0307 	add.w	r3, sp, #7
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	270a      	movs	r7, #10
 8004fda:	461a      	mov	r2, r3
 8004fdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fe0:	fb07 1416 	mls	r4, r7, r6, r1
 8004fe4:	3430      	adds	r4, #48	@ 0x30
 8004fe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004fea:	460c      	mov	r4, r1
 8004fec:	2c63      	cmp	r4, #99	@ 0x63
 8004fee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	dcf1      	bgt.n	8004fda <__exponent+0x1c>
 8004ff6:	3130      	adds	r1, #48	@ 0x30
 8004ff8:	1e94      	subs	r4, r2, #2
 8004ffa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ffe:	1c41      	adds	r1, r0, #1
 8005000:	4623      	mov	r3, r4
 8005002:	42ab      	cmp	r3, r5
 8005004:	d30a      	bcc.n	800501c <__exponent+0x5e>
 8005006:	f10d 0309 	add.w	r3, sp, #9
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	42ac      	cmp	r4, r5
 800500e:	bf88      	it	hi
 8005010:	2300      	movhi	r3, #0
 8005012:	3302      	adds	r3, #2
 8005014:	4403      	add	r3, r0
 8005016:	1a18      	subs	r0, r3, r0
 8005018:	b003      	add	sp, #12
 800501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800501c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005020:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005024:	e7ed      	b.n	8005002 <__exponent+0x44>
 8005026:	2330      	movs	r3, #48	@ 0x30
 8005028:	3130      	adds	r1, #48	@ 0x30
 800502a:	7083      	strb	r3, [r0, #2]
 800502c:	70c1      	strb	r1, [r0, #3]
 800502e:	1d03      	adds	r3, r0, #4
 8005030:	e7f1      	b.n	8005016 <__exponent+0x58>
	...

08005034 <_printf_float>:
 8005034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	b08d      	sub	sp, #52	@ 0x34
 800503a:	460c      	mov	r4, r1
 800503c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005040:	4616      	mov	r6, r2
 8005042:	461f      	mov	r7, r3
 8005044:	4605      	mov	r5, r0
 8005046:	f000 fd11 	bl	8005a6c <_localeconv_r>
 800504a:	6803      	ldr	r3, [r0, #0]
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb f916 	bl	8000280 <strlen>
 8005054:	2300      	movs	r3, #0
 8005056:	930a      	str	r3, [sp, #40]	@ 0x28
 8005058:	f8d8 3000 	ldr.w	r3, [r8]
 800505c:	9005      	str	r0, [sp, #20]
 800505e:	3307      	adds	r3, #7
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	f103 0208 	add.w	r2, r3, #8
 8005068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800506c:	f8d4 b000 	ldr.w	fp, [r4]
 8005070:	f8c8 2000 	str.w	r2, [r8]
 8005074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005082:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508a:	4b9c      	ldr	r3, [pc, #624]	@ (80052fc <_printf_float+0x2c8>)
 800508c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005090:	f7fb fd54 	bl	8000b3c <__aeabi_dcmpun>
 8005094:	bb70      	cbnz	r0, 80050f4 <_printf_float+0xc0>
 8005096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509a:	4b98      	ldr	r3, [pc, #608]	@ (80052fc <_printf_float+0x2c8>)
 800509c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050a0:	f7fb fd2e 	bl	8000b00 <__aeabi_dcmple>
 80050a4:	bb30      	cbnz	r0, 80050f4 <_printf_float+0xc0>
 80050a6:	2200      	movs	r2, #0
 80050a8:	2300      	movs	r3, #0
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb fd1d 	bl	8000aec <__aeabi_dcmplt>
 80050b2:	b110      	cbz	r0, 80050ba <_printf_float+0x86>
 80050b4:	232d      	movs	r3, #45	@ 0x2d
 80050b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ba:	4a91      	ldr	r2, [pc, #580]	@ (8005300 <_printf_float+0x2cc>)
 80050bc:	4b91      	ldr	r3, [pc, #580]	@ (8005304 <_printf_float+0x2d0>)
 80050be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050c2:	bf8c      	ite	hi
 80050c4:	4690      	movhi	r8, r2
 80050c6:	4698      	movls	r8, r3
 80050c8:	2303      	movs	r3, #3
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	f02b 0304 	bic.w	r3, fp, #4
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	f04f 0900 	mov.w	r9, #0
 80050d6:	9700      	str	r7, [sp, #0]
 80050d8:	4633      	mov	r3, r6
 80050da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050dc:	4621      	mov	r1, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f9d2 	bl	8005488 <_printf_common>
 80050e4:	3001      	adds	r0, #1
 80050e6:	f040 808d 	bne.w	8005204 <_printf_float+0x1d0>
 80050ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050ee:	b00d      	add	sp, #52	@ 0x34
 80050f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb fd1e 	bl	8000b3c <__aeabi_dcmpun>
 8005100:	b140      	cbz	r0, 8005114 <_printf_float+0xe0>
 8005102:	464b      	mov	r3, r9
 8005104:	2b00      	cmp	r3, #0
 8005106:	bfbc      	itt	lt
 8005108:	232d      	movlt	r3, #45	@ 0x2d
 800510a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800510e:	4a7e      	ldr	r2, [pc, #504]	@ (8005308 <_printf_float+0x2d4>)
 8005110:	4b7e      	ldr	r3, [pc, #504]	@ (800530c <_printf_float+0x2d8>)
 8005112:	e7d4      	b.n	80050be <_printf_float+0x8a>
 8005114:	6863      	ldr	r3, [r4, #4]
 8005116:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800511a:	9206      	str	r2, [sp, #24]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	d13b      	bne.n	8005198 <_printf_float+0x164>
 8005120:	2306      	movs	r3, #6
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005128:	2300      	movs	r3, #0
 800512a:	6022      	str	r2, [r4, #0]
 800512c:	9303      	str	r3, [sp, #12]
 800512e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005130:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005134:	ab09      	add	r3, sp, #36	@ 0x24
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	6861      	ldr	r1, [r4, #4]
 800513a:	ec49 8b10 	vmov	d0, r8, r9
 800513e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff fed6 	bl	8004ef4 <__cvt>
 8005148:	9b06      	ldr	r3, [sp, #24]
 800514a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800514c:	2b47      	cmp	r3, #71	@ 0x47
 800514e:	4680      	mov	r8, r0
 8005150:	d129      	bne.n	80051a6 <_printf_float+0x172>
 8005152:	1cc8      	adds	r0, r1, #3
 8005154:	db02      	blt.n	800515c <_printf_float+0x128>
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	4299      	cmp	r1, r3
 800515a:	dd41      	ble.n	80051e0 <_printf_float+0x1ac>
 800515c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005160:	fa5f fa8a 	uxtb.w	sl, sl
 8005164:	3901      	subs	r1, #1
 8005166:	4652      	mov	r2, sl
 8005168:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800516c:	9109      	str	r1, [sp, #36]	@ 0x24
 800516e:	f7ff ff26 	bl	8004fbe <__exponent>
 8005172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005174:	1813      	adds	r3, r2, r0
 8005176:	2a01      	cmp	r2, #1
 8005178:	4681      	mov	r9, r0
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	dc02      	bgt.n	8005184 <_printf_float+0x150>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	07d2      	lsls	r2, r2, #31
 8005182:	d501      	bpl.n	8005188 <_printf_float+0x154>
 8005184:	3301      	adds	r3, #1
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0a2      	beq.n	80050d6 <_printf_float+0xa2>
 8005190:	232d      	movs	r3, #45	@ 0x2d
 8005192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005196:	e79e      	b.n	80050d6 <_printf_float+0xa2>
 8005198:	9a06      	ldr	r2, [sp, #24]
 800519a:	2a47      	cmp	r2, #71	@ 0x47
 800519c:	d1c2      	bne.n	8005124 <_printf_float+0xf0>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1c0      	bne.n	8005124 <_printf_float+0xf0>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7bd      	b.n	8005122 <_printf_float+0xee>
 80051a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051aa:	d9db      	bls.n	8005164 <_printf_float+0x130>
 80051ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051b0:	d118      	bne.n	80051e4 <_printf_float+0x1b0>
 80051b2:	2900      	cmp	r1, #0
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	dd0b      	ble.n	80051d0 <_printf_float+0x19c>
 80051b8:	6121      	str	r1, [r4, #16]
 80051ba:	b913      	cbnz	r3, 80051c2 <_printf_float+0x18e>
 80051bc:	6822      	ldr	r2, [r4, #0]
 80051be:	07d0      	lsls	r0, r2, #31
 80051c0:	d502      	bpl.n	80051c8 <_printf_float+0x194>
 80051c2:	3301      	adds	r3, #1
 80051c4:	440b      	add	r3, r1
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051ca:	f04f 0900 	mov.w	r9, #0
 80051ce:	e7db      	b.n	8005188 <_printf_float+0x154>
 80051d0:	b913      	cbnz	r3, 80051d8 <_printf_float+0x1a4>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	07d2      	lsls	r2, r2, #31
 80051d6:	d501      	bpl.n	80051dc <_printf_float+0x1a8>
 80051d8:	3302      	adds	r3, #2
 80051da:	e7f4      	b.n	80051c6 <_printf_float+0x192>
 80051dc:	2301      	movs	r3, #1
 80051de:	e7f2      	b.n	80051c6 <_printf_float+0x192>
 80051e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e6:	4299      	cmp	r1, r3
 80051e8:	db05      	blt.n	80051f6 <_printf_float+0x1c2>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	6121      	str	r1, [r4, #16]
 80051ee:	07d8      	lsls	r0, r3, #31
 80051f0:	d5ea      	bpl.n	80051c8 <_printf_float+0x194>
 80051f2:	1c4b      	adds	r3, r1, #1
 80051f4:	e7e7      	b.n	80051c6 <_printf_float+0x192>
 80051f6:	2900      	cmp	r1, #0
 80051f8:	bfd4      	ite	le
 80051fa:	f1c1 0202 	rsble	r2, r1, #2
 80051fe:	2201      	movgt	r2, #1
 8005200:	4413      	add	r3, r2
 8005202:	e7e0      	b.n	80051c6 <_printf_float+0x192>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	055a      	lsls	r2, r3, #21
 8005208:	d407      	bmi.n	800521a <_printf_float+0x1e6>
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	4642      	mov	r2, r8
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	d12b      	bne.n	8005270 <_printf_float+0x23c>
 8005218:	e767      	b.n	80050ea <_printf_float+0xb6>
 800521a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800521e:	f240 80dd 	bls.w	80053dc <_printf_float+0x3a8>
 8005222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005226:	2200      	movs	r2, #0
 8005228:	2300      	movs	r3, #0
 800522a:	f7fb fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800522e:	2800      	cmp	r0, #0
 8005230:	d033      	beq.n	800529a <_printf_float+0x266>
 8005232:	4a37      	ldr	r2, [pc, #220]	@ (8005310 <_printf_float+0x2dc>)
 8005234:	2301      	movs	r3, #1
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	f43f af54 	beq.w	80050ea <_printf_float+0xb6>
 8005242:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005246:	4543      	cmp	r3, r8
 8005248:	db02      	blt.n	8005250 <_printf_float+0x21c>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	07d8      	lsls	r0, r3, #31
 800524e:	d50f      	bpl.n	8005270 <_printf_float+0x23c>
 8005250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f af45 	beq.w	80050ea <_printf_float+0xb6>
 8005260:	f04f 0900 	mov.w	r9, #0
 8005264:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005268:	f104 0a1a 	add.w	sl, r4, #26
 800526c:	45c8      	cmp	r8, r9
 800526e:	dc09      	bgt.n	8005284 <_printf_float+0x250>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	079b      	lsls	r3, r3, #30
 8005274:	f100 8103 	bmi.w	800547e <_printf_float+0x44a>
 8005278:	68e0      	ldr	r0, [r4, #12]
 800527a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800527c:	4298      	cmp	r0, r3
 800527e:	bfb8      	it	lt
 8005280:	4618      	movlt	r0, r3
 8005282:	e734      	b.n	80050ee <_printf_float+0xba>
 8005284:	2301      	movs	r3, #1
 8005286:	4652      	mov	r2, sl
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af2b 	beq.w	80050ea <_printf_float+0xb6>
 8005294:	f109 0901 	add.w	r9, r9, #1
 8005298:	e7e8      	b.n	800526c <_printf_float+0x238>
 800529a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	dc39      	bgt.n	8005314 <_printf_float+0x2e0>
 80052a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <_printf_float+0x2dc>)
 80052a2:	2301      	movs	r3, #1
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af1d 	beq.w	80050ea <_printf_float+0xb6>
 80052b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052b4:	ea59 0303 	orrs.w	r3, r9, r3
 80052b8:	d102      	bne.n	80052c0 <_printf_float+0x28c>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	07d9      	lsls	r1, r3, #31
 80052be:	d5d7      	bpl.n	8005270 <_printf_float+0x23c>
 80052c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f af0d 	beq.w	80050ea <_printf_float+0xb6>
 80052d0:	f04f 0a00 	mov.w	sl, #0
 80052d4:	f104 0b1a 	add.w	fp, r4, #26
 80052d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052da:	425b      	negs	r3, r3
 80052dc:	4553      	cmp	r3, sl
 80052de:	dc01      	bgt.n	80052e4 <_printf_float+0x2b0>
 80052e0:	464b      	mov	r3, r9
 80052e2:	e793      	b.n	800520c <_printf_float+0x1d8>
 80052e4:	2301      	movs	r3, #1
 80052e6:	465a      	mov	r2, fp
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	f43f aefb 	beq.w	80050ea <_printf_float+0xb6>
 80052f4:	f10a 0a01 	add.w	sl, sl, #1
 80052f8:	e7ee      	b.n	80052d8 <_printf_float+0x2a4>
 80052fa:	bf00      	nop
 80052fc:	7fefffff 	.word	0x7fefffff
 8005300:	08007c88 	.word	0x08007c88
 8005304:	08007c84 	.word	0x08007c84
 8005308:	08007c90 	.word	0x08007c90
 800530c:	08007c8c 	.word	0x08007c8c
 8005310:	08007c94 	.word	0x08007c94
 8005314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800531a:	4553      	cmp	r3, sl
 800531c:	bfa8      	it	ge
 800531e:	4653      	movge	r3, sl
 8005320:	2b00      	cmp	r3, #0
 8005322:	4699      	mov	r9, r3
 8005324:	dc36      	bgt.n	8005394 <_printf_float+0x360>
 8005326:	f04f 0b00 	mov.w	fp, #0
 800532a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800532e:	f104 021a 	add.w	r2, r4, #26
 8005332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005334:	9306      	str	r3, [sp, #24]
 8005336:	eba3 0309 	sub.w	r3, r3, r9
 800533a:	455b      	cmp	r3, fp
 800533c:	dc31      	bgt.n	80053a2 <_printf_float+0x36e>
 800533e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005340:	459a      	cmp	sl, r3
 8005342:	dc3a      	bgt.n	80053ba <_printf_float+0x386>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07da      	lsls	r2, r3, #31
 8005348:	d437      	bmi.n	80053ba <_printf_float+0x386>
 800534a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534c:	ebaa 0903 	sub.w	r9, sl, r3
 8005350:	9b06      	ldr	r3, [sp, #24]
 8005352:	ebaa 0303 	sub.w	r3, sl, r3
 8005356:	4599      	cmp	r9, r3
 8005358:	bfa8      	it	ge
 800535a:	4699      	movge	r9, r3
 800535c:	f1b9 0f00 	cmp.w	r9, #0
 8005360:	dc33      	bgt.n	80053ca <_printf_float+0x396>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800536a:	f104 0b1a 	add.w	fp, r4, #26
 800536e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005370:	ebaa 0303 	sub.w	r3, sl, r3
 8005374:	eba3 0309 	sub.w	r3, r3, r9
 8005378:	4543      	cmp	r3, r8
 800537a:	f77f af79 	ble.w	8005270 <_printf_float+0x23c>
 800537e:	2301      	movs	r3, #1
 8005380:	465a      	mov	r2, fp
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	47b8      	blx	r7
 8005388:	3001      	adds	r0, #1
 800538a:	f43f aeae 	beq.w	80050ea <_printf_float+0xb6>
 800538e:	f108 0801 	add.w	r8, r8, #1
 8005392:	e7ec      	b.n	800536e <_printf_float+0x33a>
 8005394:	4642      	mov	r2, r8
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	d1c2      	bne.n	8005326 <_printf_float+0x2f2>
 80053a0:	e6a3      	b.n	80050ea <_printf_float+0xb6>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	9206      	str	r2, [sp, #24]
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f ae9c 	beq.w	80050ea <_printf_float+0xb6>
 80053b2:	9a06      	ldr	r2, [sp, #24]
 80053b4:	f10b 0b01 	add.w	fp, fp, #1
 80053b8:	e7bb      	b.n	8005332 <_printf_float+0x2fe>
 80053ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	d1c0      	bne.n	800534a <_printf_float+0x316>
 80053c8:	e68f      	b.n	80050ea <_printf_float+0xb6>
 80053ca:	9a06      	ldr	r2, [sp, #24]
 80053cc:	464b      	mov	r3, r9
 80053ce:	4442      	add	r2, r8
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	d1c3      	bne.n	8005362 <_printf_float+0x32e>
 80053da:	e686      	b.n	80050ea <_printf_float+0xb6>
 80053dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053e0:	f1ba 0f01 	cmp.w	sl, #1
 80053e4:	dc01      	bgt.n	80053ea <_printf_float+0x3b6>
 80053e6:	07db      	lsls	r3, r3, #31
 80053e8:	d536      	bpl.n	8005458 <_printf_float+0x424>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4642      	mov	r2, r8
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae78 	beq.w	80050ea <_printf_float+0xb6>
 80053fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae70 	beq.w	80050ea <_printf_float+0xb6>
 800540a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005416:	f7fb fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800541a:	b9c0      	cbnz	r0, 800544e <_printf_float+0x41a>
 800541c:	4653      	mov	r3, sl
 800541e:	f108 0201 	add.w	r2, r8, #1
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	d10c      	bne.n	8005446 <_printf_float+0x412>
 800542c:	e65d      	b.n	80050ea <_printf_float+0xb6>
 800542e:	2301      	movs	r3, #1
 8005430:	465a      	mov	r2, fp
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f ae56 	beq.w	80050ea <_printf_float+0xb6>
 800543e:	f108 0801 	add.w	r8, r8, #1
 8005442:	45d0      	cmp	r8, sl
 8005444:	dbf3      	blt.n	800542e <_printf_float+0x3fa>
 8005446:	464b      	mov	r3, r9
 8005448:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800544c:	e6df      	b.n	800520e <_printf_float+0x1da>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	f104 0b1a 	add.w	fp, r4, #26
 8005456:	e7f4      	b.n	8005442 <_printf_float+0x40e>
 8005458:	2301      	movs	r3, #1
 800545a:	4642      	mov	r2, r8
 800545c:	e7e1      	b.n	8005422 <_printf_float+0x3ee>
 800545e:	2301      	movs	r3, #1
 8005460:	464a      	mov	r2, r9
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae3e 	beq.w	80050ea <_printf_float+0xb6>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005476:	1a5b      	subs	r3, r3, r1
 8005478:	4543      	cmp	r3, r8
 800547a:	dcf0      	bgt.n	800545e <_printf_float+0x42a>
 800547c:	e6fc      	b.n	8005278 <_printf_float+0x244>
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	f104 0919 	add.w	r9, r4, #25
 8005486:	e7f4      	b.n	8005472 <_printf_float+0x43e>

08005488 <_printf_common>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	4616      	mov	r6, r2
 800548e:	4698      	mov	r8, r3
 8005490:	688a      	ldr	r2, [r1, #8]
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005498:	4293      	cmp	r3, r2
 800549a:	bfb8      	it	lt
 800549c:	4613      	movlt	r3, r2
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a4:	4607      	mov	r7, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b10a      	cbz	r2, 80054ae <_printf_common+0x26>
 80054aa:	3301      	adds	r3, #1
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	6833      	ldrmi	r3, [r6, #0]
 80054b6:	3302      	addmi	r3, #2
 80054b8:	6033      	strmi	r3, [r6, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d106      	bne.n	80054d0 <_printf_common+0x48>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	6832      	ldr	r2, [r6, #0]
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dc26      	bgt.n	800551e <_printf_common+0x96>
 80054d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	3b00      	subs	r3, #0
 80054d8:	bf18      	it	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	0692      	lsls	r2, r2, #26
 80054de:	d42b      	bmi.n	8005538 <_printf_common+0xb0>
 80054e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e4:	4641      	mov	r1, r8
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c8      	blx	r9
 80054ea:	3001      	adds	r0, #1
 80054ec:	d01e      	beq.n	800552c <_printf_common+0xa4>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf02      	ittt	eq
 80054fa:	68e5      	ldreq	r5, [r4, #12]
 80054fc:	6833      	ldreq	r3, [r6, #0]
 80054fe:	1aed      	subeq	r5, r5, r3
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	bf0c      	ite	eq
 8005504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005508:	2500      	movne	r5, #0
 800550a:	4293      	cmp	r3, r2
 800550c:	bfc4      	itt	gt
 800550e:	1a9b      	subgt	r3, r3, r2
 8005510:	18ed      	addgt	r5, r5, r3
 8005512:	2600      	movs	r6, #0
 8005514:	341a      	adds	r4, #26
 8005516:	42b5      	cmp	r5, r6
 8005518:	d11a      	bne.n	8005550 <_printf_common+0xc8>
 800551a:	2000      	movs	r0, #0
 800551c:	e008      	b.n	8005530 <_printf_common+0xa8>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4641      	mov	r1, r8
 8005524:	4638      	mov	r0, r7
 8005526:	47c8      	blx	r9
 8005528:	3001      	adds	r0, #1
 800552a:	d103      	bne.n	8005534 <_printf_common+0xac>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005534:	3501      	adds	r5, #1
 8005536:	e7c6      	b.n	80054c6 <_printf_common+0x3e>
 8005538:	18e1      	adds	r1, r4, r3
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	2030      	movs	r0, #48	@ 0x30
 800553e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005542:	4422      	add	r2, r4
 8005544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800554c:	3302      	adds	r3, #2
 800554e:	e7c7      	b.n	80054e0 <_printf_common+0x58>
 8005550:	2301      	movs	r3, #1
 8005552:	4622      	mov	r2, r4
 8005554:	4641      	mov	r1, r8
 8005556:	4638      	mov	r0, r7
 8005558:	47c8      	blx	r9
 800555a:	3001      	adds	r0, #1
 800555c:	d0e6      	beq.n	800552c <_printf_common+0xa4>
 800555e:	3601      	adds	r6, #1
 8005560:	e7d9      	b.n	8005516 <_printf_common+0x8e>
	...

08005564 <_printf_i>:
 8005564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	7e0f      	ldrb	r7, [r1, #24]
 800556a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800556c:	2f78      	cmp	r7, #120	@ 0x78
 800556e:	4691      	mov	r9, r2
 8005570:	4680      	mov	r8, r0
 8005572:	460c      	mov	r4, r1
 8005574:	469a      	mov	sl, r3
 8005576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557a:	d807      	bhi.n	800558c <_printf_i+0x28>
 800557c:	2f62      	cmp	r7, #98	@ 0x62
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x32>
 8005580:	2f00      	cmp	r7, #0
 8005582:	f000 80d1 	beq.w	8005728 <_printf_i+0x1c4>
 8005586:	2f58      	cmp	r7, #88	@ 0x58
 8005588:	f000 80b8 	beq.w	80056fc <_printf_i+0x198>
 800558c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005594:	e03a      	b.n	800560c <_printf_i+0xa8>
 8005596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559a:	2b15      	cmp	r3, #21
 800559c:	d8f6      	bhi.n	800558c <_printf_i+0x28>
 800559e:	a101      	add	r1, pc, #4	@ (adr r1, 80055a4 <_printf_i+0x40>)
 80055a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	08005611 	.word	0x08005611
 80055ac:	0800558d 	.word	0x0800558d
 80055b0:	0800558d 	.word	0x0800558d
 80055b4:	0800558d 	.word	0x0800558d
 80055b8:	0800558d 	.word	0x0800558d
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800558d 	.word	0x0800558d
 80055c4:	0800558d 	.word	0x0800558d
 80055c8:	0800558d 	.word	0x0800558d
 80055cc:	0800558d 	.word	0x0800558d
 80055d0:	0800570f 	.word	0x0800570f
 80055d4:	0800563b 	.word	0x0800563b
 80055d8:	080056c9 	.word	0x080056c9
 80055dc:	0800558d 	.word	0x0800558d
 80055e0:	0800558d 	.word	0x0800558d
 80055e4:	08005731 	.word	0x08005731
 80055e8:	0800558d 	.word	0x0800558d
 80055ec:	0800563b 	.word	0x0800563b
 80055f0:	0800558d 	.word	0x0800558d
 80055f4:	0800558d 	.word	0x0800558d
 80055f8:	080056d1 	.word	0x080056d1
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800560c:	2301      	movs	r3, #1
 800560e:	e09c      	b.n	800574a <_printf_i+0x1e6>
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	6031      	str	r1, [r6, #0]
 8005618:	0606      	lsls	r6, r0, #24
 800561a:	d501      	bpl.n	8005620 <_printf_i+0xbc>
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	e003      	b.n	8005628 <_printf_i+0xc4>
 8005620:	0645      	lsls	r5, r0, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0xb8>
 8005624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005628:	2d00      	cmp	r5, #0
 800562a:	da03      	bge.n	8005634 <_printf_i+0xd0>
 800562c:	232d      	movs	r3, #45	@ 0x2d
 800562e:	426d      	negs	r5, r5
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005634:	4858      	ldr	r0, [pc, #352]	@ (8005798 <_printf_i+0x234>)
 8005636:	230a      	movs	r3, #10
 8005638:	e011      	b.n	800565e <_printf_i+0xfa>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	0608      	lsls	r0, r1, #24
 8005640:	f853 5b04 	ldr.w	r5, [r3], #4
 8005644:	d402      	bmi.n	800564c <_printf_i+0xe8>
 8005646:	0649      	lsls	r1, r1, #25
 8005648:	bf48      	it	mi
 800564a:	b2ad      	uxthmi	r5, r5
 800564c:	2f6f      	cmp	r7, #111	@ 0x6f
 800564e:	4852      	ldr	r0, [pc, #328]	@ (8005798 <_printf_i+0x234>)
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	bf14      	ite	ne
 8005654:	230a      	movne	r3, #10
 8005656:	2308      	moveq	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565e:	6866      	ldr	r6, [r4, #4]
 8005660:	60a6      	str	r6, [r4, #8]
 8005662:	2e00      	cmp	r6, #0
 8005664:	db05      	blt.n	8005672 <_printf_i+0x10e>
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	432e      	orrs	r6, r5
 800566a:	f021 0104 	bic.w	r1, r1, #4
 800566e:	6021      	str	r1, [r4, #0]
 8005670:	d04b      	beq.n	800570a <_printf_i+0x1a6>
 8005672:	4616      	mov	r6, r2
 8005674:	fbb5 f1f3 	udiv	r1, r5, r3
 8005678:	fb03 5711 	mls	r7, r3, r1, r5
 800567c:	5dc7      	ldrb	r7, [r0, r7]
 800567e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005682:	462f      	mov	r7, r5
 8005684:	42bb      	cmp	r3, r7
 8005686:	460d      	mov	r5, r1
 8005688:	d9f4      	bls.n	8005674 <_printf_i+0x110>
 800568a:	2b08      	cmp	r3, #8
 800568c:	d10b      	bne.n	80056a6 <_printf_i+0x142>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	07df      	lsls	r7, r3, #31
 8005692:	d508      	bpl.n	80056a6 <_printf_i+0x142>
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	6861      	ldr	r1, [r4, #4]
 8005698:	4299      	cmp	r1, r3
 800569a:	bfde      	ittt	le
 800569c:	2330      	movle	r3, #48	@ 0x30
 800569e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056a6:	1b92      	subs	r2, r2, r6
 80056a8:	6122      	str	r2, [r4, #16]
 80056aa:	f8cd a000 	str.w	sl, [sp]
 80056ae:	464b      	mov	r3, r9
 80056b0:	aa03      	add	r2, sp, #12
 80056b2:	4621      	mov	r1, r4
 80056b4:	4640      	mov	r0, r8
 80056b6:	f7ff fee7 	bl	8005488 <_printf_common>
 80056ba:	3001      	adds	r0, #1
 80056bc:	d14a      	bne.n	8005754 <_printf_i+0x1f0>
 80056be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056c2:	b004      	add	sp, #16
 80056c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	f043 0320 	orr.w	r3, r3, #32
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	4832      	ldr	r0, [pc, #200]	@ (800579c <_printf_i+0x238>)
 80056d2:	2778      	movs	r7, #120	@ 0x78
 80056d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	6831      	ldr	r1, [r6, #0]
 80056dc:	061f      	lsls	r7, r3, #24
 80056de:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e2:	d402      	bmi.n	80056ea <_printf_i+0x186>
 80056e4:	065f      	lsls	r7, r3, #25
 80056e6:	bf48      	it	mi
 80056e8:	b2ad      	uxthmi	r5, r5
 80056ea:	6031      	str	r1, [r6, #0]
 80056ec:	07d9      	lsls	r1, r3, #31
 80056ee:	bf44      	itt	mi
 80056f0:	f043 0320 	orrmi.w	r3, r3, #32
 80056f4:	6023      	strmi	r3, [r4, #0]
 80056f6:	b11d      	cbz	r5, 8005700 <_printf_i+0x19c>
 80056f8:	2310      	movs	r3, #16
 80056fa:	e7ad      	b.n	8005658 <_printf_i+0xf4>
 80056fc:	4826      	ldr	r0, [pc, #152]	@ (8005798 <_printf_i+0x234>)
 80056fe:	e7e9      	b.n	80056d4 <_printf_i+0x170>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	f023 0320 	bic.w	r3, r3, #32
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	e7f6      	b.n	80056f8 <_printf_i+0x194>
 800570a:	4616      	mov	r6, r2
 800570c:	e7bd      	b.n	800568a <_printf_i+0x126>
 800570e:	6833      	ldr	r3, [r6, #0]
 8005710:	6825      	ldr	r5, [r4, #0]
 8005712:	6961      	ldr	r1, [r4, #20]
 8005714:	1d18      	adds	r0, r3, #4
 8005716:	6030      	str	r0, [r6, #0]
 8005718:	062e      	lsls	r6, r5, #24
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	d501      	bpl.n	8005722 <_printf_i+0x1be>
 800571e:	6019      	str	r1, [r3, #0]
 8005720:	e002      	b.n	8005728 <_printf_i+0x1c4>
 8005722:	0668      	lsls	r0, r5, #25
 8005724:	d5fb      	bpl.n	800571e <_printf_i+0x1ba>
 8005726:	8019      	strh	r1, [r3, #0]
 8005728:	2300      	movs	r3, #0
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	4616      	mov	r6, r2
 800572e:	e7bc      	b.n	80056aa <_printf_i+0x146>
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	1d1a      	adds	r2, r3, #4
 8005734:	6032      	str	r2, [r6, #0]
 8005736:	681e      	ldr	r6, [r3, #0]
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	2100      	movs	r1, #0
 800573c:	4630      	mov	r0, r6
 800573e:	f7fa fd4f 	bl	80001e0 <memchr>
 8005742:	b108      	cbz	r0, 8005748 <_printf_i+0x1e4>
 8005744:	1b80      	subs	r0, r0, r6
 8005746:	6060      	str	r0, [r4, #4]
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	2300      	movs	r3, #0
 800574e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005752:	e7aa      	b.n	80056aa <_printf_i+0x146>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	4632      	mov	r2, r6
 8005758:	4649      	mov	r1, r9
 800575a:	4640      	mov	r0, r8
 800575c:	47d0      	blx	sl
 800575e:	3001      	adds	r0, #1
 8005760:	d0ad      	beq.n	80056be <_printf_i+0x15a>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	079b      	lsls	r3, r3, #30
 8005766:	d413      	bmi.n	8005790 <_printf_i+0x22c>
 8005768:	68e0      	ldr	r0, [r4, #12]
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	4298      	cmp	r0, r3
 800576e:	bfb8      	it	lt
 8005770:	4618      	movlt	r0, r3
 8005772:	e7a6      	b.n	80056c2 <_printf_i+0x15e>
 8005774:	2301      	movs	r3, #1
 8005776:	4632      	mov	r2, r6
 8005778:	4649      	mov	r1, r9
 800577a:	4640      	mov	r0, r8
 800577c:	47d0      	blx	sl
 800577e:	3001      	adds	r0, #1
 8005780:	d09d      	beq.n	80056be <_printf_i+0x15a>
 8005782:	3501      	adds	r5, #1
 8005784:	68e3      	ldr	r3, [r4, #12]
 8005786:	9903      	ldr	r1, [sp, #12]
 8005788:	1a5b      	subs	r3, r3, r1
 800578a:	42ab      	cmp	r3, r5
 800578c:	dcf2      	bgt.n	8005774 <_printf_i+0x210>
 800578e:	e7eb      	b.n	8005768 <_printf_i+0x204>
 8005790:	2500      	movs	r5, #0
 8005792:	f104 0619 	add.w	r6, r4, #25
 8005796:	e7f5      	b.n	8005784 <_printf_i+0x220>
 8005798:	08007c96 	.word	0x08007c96
 800579c:	08007ca7 	.word	0x08007ca7

080057a0 <std>:
 80057a0:	2300      	movs	r3, #0
 80057a2:	b510      	push	{r4, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	e9c0 3300 	strd	r3, r3, [r0]
 80057aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ae:	6083      	str	r3, [r0, #8]
 80057b0:	8181      	strh	r1, [r0, #12]
 80057b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057b4:	81c2      	strh	r2, [r0, #14]
 80057b6:	6183      	str	r3, [r0, #24]
 80057b8:	4619      	mov	r1, r3
 80057ba:	2208      	movs	r2, #8
 80057bc:	305c      	adds	r0, #92	@ 0x5c
 80057be:	f000 f94c 	bl	8005a5a <memset>
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <std+0x58>)
 80057c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x5c>)
 80057c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x60>)
 80057cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <std+0x64>)
 80057d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x68>)
 80057d4:	6224      	str	r4, [r4, #32]
 80057d6:	429c      	cmp	r4, r3
 80057d8:	d006      	beq.n	80057e8 <std+0x48>
 80057da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057de:	4294      	cmp	r4, r2
 80057e0:	d002      	beq.n	80057e8 <std+0x48>
 80057e2:	33d0      	adds	r3, #208	@ 0xd0
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d105      	bne.n	80057f4 <std+0x54>
 80057e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f000 b9b0 	b.w	8005b54 <__retarget_lock_init_recursive>
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	080059d5 	.word	0x080059d5
 80057fc:	080059f7 	.word	0x080059f7
 8005800:	08005a2f 	.word	0x08005a2f
 8005804:	08005a53 	.word	0x08005a53
 8005808:	200003f8 	.word	0x200003f8

0800580c <stdio_exit_handler>:
 800580c:	4a02      	ldr	r2, [pc, #8]	@ (8005818 <stdio_exit_handler+0xc>)
 800580e:	4903      	ldr	r1, [pc, #12]	@ (800581c <stdio_exit_handler+0x10>)
 8005810:	4803      	ldr	r0, [pc, #12]	@ (8005820 <stdio_exit_handler+0x14>)
 8005812:	f000 b869 	b.w	80058e8 <_fwalk_sglue>
 8005816:	bf00      	nop
 8005818:	20000014 	.word	0x20000014
 800581c:	080074d5 	.word	0x080074d5
 8005820:	20000024 	.word	0x20000024

08005824 <cleanup_stdio>:
 8005824:	6841      	ldr	r1, [r0, #4]
 8005826:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <cleanup_stdio+0x34>)
 8005828:	4299      	cmp	r1, r3
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	d001      	beq.n	8005834 <cleanup_stdio+0x10>
 8005830:	f001 fe50 	bl	80074d4 <_fflush_r>
 8005834:	68a1      	ldr	r1, [r4, #8]
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <cleanup_stdio+0x38>)
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <cleanup_stdio+0x1e>
 800583c:	4620      	mov	r0, r4
 800583e:	f001 fe49 	bl	80074d4 <_fflush_r>
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <cleanup_stdio+0x3c>)
 8005846:	4299      	cmp	r1, r3
 8005848:	d004      	beq.n	8005854 <cleanup_stdio+0x30>
 800584a:	4620      	mov	r0, r4
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f001 be40 	b.w	80074d4 <_fflush_r>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	200003f8 	.word	0x200003f8
 800585c:	20000460 	.word	0x20000460
 8005860:	200004c8 	.word	0x200004c8

08005864 <global_stdio_init.part.0>:
 8005864:	b510      	push	{r4, lr}
 8005866:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <global_stdio_init.part.0+0x30>)
 8005868:	4c0b      	ldr	r4, [pc, #44]	@ (8005898 <global_stdio_init.part.0+0x34>)
 800586a:	4a0c      	ldr	r2, [pc, #48]	@ (800589c <global_stdio_init.part.0+0x38>)
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	4620      	mov	r0, r4
 8005870:	2200      	movs	r2, #0
 8005872:	2104      	movs	r1, #4
 8005874:	f7ff ff94 	bl	80057a0 <std>
 8005878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800587c:	2201      	movs	r2, #1
 800587e:	2109      	movs	r1, #9
 8005880:	f7ff ff8e 	bl	80057a0 <std>
 8005884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005888:	2202      	movs	r2, #2
 800588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588e:	2112      	movs	r1, #18
 8005890:	f7ff bf86 	b.w	80057a0 <std>
 8005894:	20000530 	.word	0x20000530
 8005898:	200003f8 	.word	0x200003f8
 800589c:	0800580d 	.word	0x0800580d

080058a0 <__sfp_lock_acquire>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__sfp_lock_acquire+0x8>)
 80058a2:	f000 b958 	b.w	8005b56 <__retarget_lock_acquire_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000539 	.word	0x20000539

080058ac <__sfp_lock_release>:
 80058ac:	4801      	ldr	r0, [pc, #4]	@ (80058b4 <__sfp_lock_release+0x8>)
 80058ae:	f000 b953 	b.w	8005b58 <__retarget_lock_release_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000539 	.word	0x20000539

080058b8 <__sinit>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	f7ff fff0 	bl	80058a0 <__sfp_lock_acquire>
 80058c0:	6a23      	ldr	r3, [r4, #32]
 80058c2:	b11b      	cbz	r3, 80058cc <__sinit+0x14>
 80058c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c8:	f7ff bff0 	b.w	80058ac <__sfp_lock_release>
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <__sinit+0x28>)
 80058ce:	6223      	str	r3, [r4, #32]
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__sinit+0x2c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f5      	bne.n	80058c4 <__sinit+0xc>
 80058d8:	f7ff ffc4 	bl	8005864 <global_stdio_init.part.0>
 80058dc:	e7f2      	b.n	80058c4 <__sinit+0xc>
 80058de:	bf00      	nop
 80058e0:	08005825 	.word	0x08005825
 80058e4:	20000530 	.word	0x20000530

080058e8 <_fwalk_sglue>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	4607      	mov	r7, r0
 80058ee:	4688      	mov	r8, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	2600      	movs	r6, #0
 80058f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f8:	f1b9 0901 	subs.w	r9, r9, #1
 80058fc:	d505      	bpl.n	800590a <_fwalk_sglue+0x22>
 80058fe:	6824      	ldr	r4, [r4, #0]
 8005900:	2c00      	cmp	r4, #0
 8005902:	d1f7      	bne.n	80058f4 <_fwalk_sglue+0xc>
 8005904:	4630      	mov	r0, r6
 8005906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d907      	bls.n	8005920 <_fwalk_sglue+0x38>
 8005910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005914:	3301      	adds	r3, #1
 8005916:	d003      	beq.n	8005920 <_fwalk_sglue+0x38>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	4306      	orrs	r6, r0
 8005920:	3568      	adds	r5, #104	@ 0x68
 8005922:	e7e9      	b.n	80058f8 <_fwalk_sglue+0x10>

08005924 <sniprintf>:
 8005924:	b40c      	push	{r2, r3}
 8005926:	b530      	push	{r4, r5, lr}
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <sniprintf+0x68>)
 800592a:	1e0c      	subs	r4, r1, #0
 800592c:	681d      	ldr	r5, [r3, #0]
 800592e:	b09d      	sub	sp, #116	@ 0x74
 8005930:	da08      	bge.n	8005944 <sniprintf+0x20>
 8005932:	238b      	movs	r3, #139	@ 0x8b
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800593a:	b01d      	add	sp, #116	@ 0x74
 800593c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005940:	b002      	add	sp, #8
 8005942:	4770      	bx	lr
 8005944:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005948:	f8ad 3014 	strh.w	r3, [sp, #20]
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005952:	bf14      	ite	ne
 8005954:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005958:	4623      	moveq	r3, r4
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005962:	9002      	str	r0, [sp, #8]
 8005964:	9006      	str	r0, [sp, #24]
 8005966:	f8ad 3016 	strh.w	r3, [sp, #22]
 800596a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800596c:	ab21      	add	r3, sp, #132	@ 0x84
 800596e:	a902      	add	r1, sp, #8
 8005970:	4628      	mov	r0, r5
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f001 fc2e 	bl	80071d4 <_svfiprintf_r>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	bfbc      	itt	lt
 800597c:	238b      	movlt	r3, #139	@ 0x8b
 800597e:	602b      	strlt	r3, [r5, #0]
 8005980:	2c00      	cmp	r4, #0
 8005982:	d0da      	beq.n	800593a <sniprintf+0x16>
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e7d6      	b.n	800593a <sniprintf+0x16>
 800598c:	20000020 	.word	0x20000020

08005990 <siprintf>:
 8005990:	b40e      	push	{r1, r2, r3}
 8005992:	b510      	push	{r4, lr}
 8005994:	b09d      	sub	sp, #116	@ 0x74
 8005996:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005998:	9002      	str	r0, [sp, #8]
 800599a:	9006      	str	r0, [sp, #24]
 800599c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059a0:	480a      	ldr	r0, [pc, #40]	@ (80059cc <siprintf+0x3c>)
 80059a2:	9107      	str	r1, [sp, #28]
 80059a4:	9104      	str	r1, [sp, #16]
 80059a6:	490a      	ldr	r1, [pc, #40]	@ (80059d0 <siprintf+0x40>)
 80059a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ac:	9105      	str	r1, [sp, #20]
 80059ae:	2400      	movs	r4, #0
 80059b0:	a902      	add	r1, sp, #8
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059b8:	f001 fc0c 	bl	80071d4 <_svfiprintf_r>
 80059bc:	9b02      	ldr	r3, [sp, #8]
 80059be:	701c      	strb	r4, [r3, #0]
 80059c0:	b01d      	add	sp, #116	@ 0x74
 80059c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c6:	b003      	add	sp, #12
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000020 	.word	0x20000020
 80059d0:	ffff0208 	.word	0xffff0208

080059d4 <__sread>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	f000 f86c 	bl	8005ab8 <_read_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	bfab      	itete	ge
 80059e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059e6:	89a3      	ldrhlt	r3, [r4, #12]
 80059e8:	181b      	addge	r3, r3, r0
 80059ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059ee:	bfac      	ite	ge
 80059f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059f2:	81a3      	strhlt	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__swrite>:
 80059f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	461f      	mov	r7, r3
 80059fc:	898b      	ldrh	r3, [r1, #12]
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4616      	mov	r6, r2
 8005a06:	d505      	bpl.n	8005a14 <__swrite+0x1e>
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f000 f840 	bl	8005a94 <_lseek_r>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	4628      	mov	r0, r5
 8005a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	f000 b857 	b.w	8005adc <_write_r>

08005a2e <__sseek>:
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	460c      	mov	r4, r1
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 f82d 	bl	8005a94 <_lseek_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	bf15      	itete	ne
 8005a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a4a:	81a3      	strheq	r3, [r4, #12]
 8005a4c:	bf18      	it	ne
 8005a4e:	81a3      	strhne	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__sclose>:
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 b80d 	b.w	8005a74 <_close_r>

08005a5a <memset>:
 8005a5a:	4402      	add	r2, r0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d100      	bne.n	8005a64 <memset+0xa>
 8005a62:	4770      	bx	lr
 8005a64:	f803 1b01 	strb.w	r1, [r3], #1
 8005a68:	e7f9      	b.n	8005a5e <memset+0x4>
	...

08005a6c <_localeconv_r>:
 8005a6c:	4800      	ldr	r0, [pc, #0]	@ (8005a70 <_localeconv_r+0x4>)
 8005a6e:	4770      	bx	lr
 8005a70:	20000160 	.word	0x20000160

08005a74 <_close_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d06      	ldr	r5, [pc, #24]	@ (8005a90 <_close_r+0x1c>)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	f7fc fb24 	bl	80020cc <_close>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_close_r+0x1a>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_close_r+0x1a>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	20000534 	.word	0x20000534

08005a94 <_lseek_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_lseek_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fc fb39 	bl	800211a <_lseek>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_lseek_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_lseek_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000534 	.word	0x20000534

08005ab8 <_read_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_read_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc fac7 	bl	800205a <_read>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_read_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_read_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000534 	.word	0x20000534

08005adc <_write_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	@ (8005afc <_write_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fc fad2 	bl	8002094 <_write>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_write_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_write_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000534 	.word	0x20000534

08005b00 <__errno>:
 8005b00:	4b01      	ldr	r3, [pc, #4]	@ (8005b08 <__errno+0x8>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000020 	.word	0x20000020

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	@ (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b50 <__libc_init_array+0x44>)
 8005b20:	f002 f868 	bl	8007bf4 <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08008004 	.word	0x08008004
 8005b48:	08008004 	.word	0x08008004
 8005b4c:	08008004 	.word	0x08008004
 8005b50:	08008008 	.word	0x08008008

08005b54 <__retarget_lock_init_recursive>:
 8005b54:	4770      	bx	lr

08005b56 <__retarget_lock_acquire_recursive>:
 8005b56:	4770      	bx	lr

08005b58 <__retarget_lock_release_recursive>:
 8005b58:	4770      	bx	lr

08005b5a <memcpy>:
 8005b5a:	440a      	add	r2, r1
 8005b5c:	4291      	cmp	r1, r2
 8005b5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b62:	d100      	bne.n	8005b66 <memcpy+0xc>
 8005b64:	4770      	bx	lr
 8005b66:	b510      	push	{r4, lr}
 8005b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b70:	4291      	cmp	r1, r2
 8005b72:	d1f9      	bne.n	8005b68 <memcpy+0xe>
 8005b74:	bd10      	pop	{r4, pc}

08005b76 <quorem>:
 8005b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6903      	ldr	r3, [r0, #16]
 8005b7c:	690c      	ldr	r4, [r1, #16]
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	4607      	mov	r7, r0
 8005b82:	db7e      	blt.n	8005c82 <quorem+0x10c>
 8005b84:	3c01      	subs	r4, #1
 8005b86:	f101 0814 	add.w	r8, r1, #20
 8005b8a:	00a3      	lsls	r3, r4, #2
 8005b8c:	f100 0514 	add.w	r5, r0, #20
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bac:	d32e      	bcc.n	8005c0c <quorem+0x96>
 8005bae:	f04f 0a00 	mov.w	sl, #0
 8005bb2:	46c4      	mov	ip, r8
 8005bb4:	46ae      	mov	lr, r5
 8005bb6:	46d3      	mov	fp, sl
 8005bb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bbc:	b298      	uxth	r0, r3
 8005bbe:	fb06 a000 	mla	r0, r6, r0, sl
 8005bc2:	0c02      	lsrs	r2, r0, #16
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	fb06 2303 	mla	r3, r6, r3, r2
 8005bca:	f8de 2000 	ldr.w	r2, [lr]
 8005bce:	b280      	uxth	r0, r0
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	1a12      	subs	r2, r2, r0
 8005bd4:	445a      	add	r2, fp
 8005bd6:	f8de 0000 	ldr.w	r0, [lr]
 8005bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005be4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005be8:	b292      	uxth	r2, r2
 8005bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bee:	45e1      	cmp	r9, ip
 8005bf0:	f84e 2b04 	str.w	r2, [lr], #4
 8005bf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bf8:	d2de      	bcs.n	8005bb8 <quorem+0x42>
 8005bfa:	9b00      	ldr	r3, [sp, #0]
 8005bfc:	58eb      	ldr	r3, [r5, r3]
 8005bfe:	b92b      	cbnz	r3, 8005c0c <quorem+0x96>
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	3b04      	subs	r3, #4
 8005c04:	429d      	cmp	r5, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	d32f      	bcc.n	8005c6a <quorem+0xf4>
 8005c0a:	613c      	str	r4, [r7, #16]
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	f001 f97d 	bl	8006f0c <__mcmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	db25      	blt.n	8005c62 <quorem+0xec>
 8005c16:	4629      	mov	r1, r5
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c1e:	f8d1 c000 	ldr.w	ip, [r1]
 8005c22:	fa1f fe82 	uxth.w	lr, r2
 8005c26:	fa1f f38c 	uxth.w	r3, ip
 8005c2a:	eba3 030e 	sub.w	r3, r3, lr
 8005c2e:	4403      	add	r3, r0
 8005c30:	0c12      	lsrs	r2, r2, #16
 8005c32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c40:	45c1      	cmp	r9, r8
 8005c42:	f841 3b04 	str.w	r3, [r1], #4
 8005c46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c4a:	d2e6      	bcs.n	8005c1a <quorem+0xa4>
 8005c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c54:	b922      	cbnz	r2, 8005c60 <quorem+0xea>
 8005c56:	3b04      	subs	r3, #4
 8005c58:	429d      	cmp	r5, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	d30b      	bcc.n	8005c76 <quorem+0x100>
 8005c5e:	613c      	str	r4, [r7, #16]
 8005c60:	3601      	adds	r6, #1
 8005c62:	4630      	mov	r0, r6
 8005c64:	b003      	add	sp, #12
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	3b04      	subs	r3, #4
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	d1cb      	bne.n	8005c0a <quorem+0x94>
 8005c72:	3c01      	subs	r4, #1
 8005c74:	e7c6      	b.n	8005c04 <quorem+0x8e>
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d1ef      	bne.n	8005c5e <quorem+0xe8>
 8005c7e:	3c01      	subs	r4, #1
 8005c80:	e7ea      	b.n	8005c58 <quorem+0xe2>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e7ee      	b.n	8005c64 <quorem+0xee>
	...

08005c88 <_dtoa_r>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	69c7      	ldr	r7, [r0, #28]
 8005c8e:	b097      	sub	sp, #92	@ 0x5c
 8005c90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c94:	ec55 4b10 	vmov	r4, r5, d0
 8005c98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c9a:	9107      	str	r1, [sp, #28]
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005ca2:	b97f      	cbnz	r7, 8005cc4 <_dtoa_r+0x3c>
 8005ca4:	2010      	movs	r0, #16
 8005ca6:	f000 fe09 	bl	80068bc <malloc>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f8c9 001c 	str.w	r0, [r9, #28]
 8005cb0:	b920      	cbnz	r0, 8005cbc <_dtoa_r+0x34>
 8005cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8005f58 <_dtoa_r+0x2d0>)
 8005cb4:	21ef      	movs	r1, #239	@ 0xef
 8005cb6:	48a9      	ldr	r0, [pc, #676]	@ (8005f5c <_dtoa_r+0x2d4>)
 8005cb8:	f001 fc5e 	bl	8007578 <__assert_func>
 8005cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005cc0:	6007      	str	r7, [r0, #0]
 8005cc2:	60c7      	str	r7, [r0, #12]
 8005cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	b159      	cbz	r1, 8005ce4 <_dtoa_r+0x5c>
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	604a      	str	r2, [r1, #4]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4093      	lsls	r3, r2
 8005cd4:	608b      	str	r3, [r1, #8]
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	f000 fee6 	bl	8006aa8 <_Bfree>
 8005cdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	1e2b      	subs	r3, r5, #0
 8005ce6:	bfb9      	ittee	lt
 8005ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cec:	9305      	strlt	r3, [sp, #20]
 8005cee:	2300      	movge	r3, #0
 8005cf0:	6033      	strge	r3, [r6, #0]
 8005cf2:	9f05      	ldr	r7, [sp, #20]
 8005cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8005f60 <_dtoa_r+0x2d8>)
 8005cf6:	bfbc      	itt	lt
 8005cf8:	2201      	movlt	r2, #1
 8005cfa:	6032      	strlt	r2, [r6, #0]
 8005cfc:	43bb      	bics	r3, r7
 8005cfe:	d112      	bne.n	8005d26 <_dtoa_r+0x9e>
 8005d00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d0c:	4323      	orrs	r3, r4
 8005d0e:	f000 855a 	beq.w	80067c6 <_dtoa_r+0xb3e>
 8005d12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f74 <_dtoa_r+0x2ec>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 855c 	beq.w	80067d6 <_dtoa_r+0xb4e>
 8005d1e:	f10a 0303 	add.w	r3, sl, #3
 8005d22:	f000 bd56 	b.w	80067d2 <_dtoa_r+0xb4a>
 8005d26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	ec51 0b17 	vmov	r0, r1, d7
 8005d30:	2300      	movs	r3, #0
 8005d32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005d36:	f7fa fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	b158      	cbz	r0, 8005d56 <_dtoa_r+0xce>
 8005d3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d40:	2301      	movs	r3, #1
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d46:	b113      	cbz	r3, 8005d4e <_dtoa_r+0xc6>
 8005d48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d4a:	4b86      	ldr	r3, [pc, #536]	@ (8005f64 <_dtoa_r+0x2dc>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f78 <_dtoa_r+0x2f0>
 8005d52:	f000 bd40 	b.w	80067d6 <_dtoa_r+0xb4e>
 8005d56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d5a:	aa14      	add	r2, sp, #80	@ 0x50
 8005d5c:	a915      	add	r1, sp, #84	@ 0x54
 8005d5e:	4648      	mov	r0, r9
 8005d60:	f001 f984 	bl	800706c <__d2b>
 8005d64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d68:	9002      	str	r0, [sp, #8]
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	d078      	beq.n	8005e60 <_dtoa_r+0x1d8>
 8005d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d88:	4619      	mov	r1, r3
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4b76      	ldr	r3, [pc, #472]	@ (8005f68 <_dtoa_r+0x2e0>)
 8005d8e:	f7fa fa83 	bl	8000298 <__aeabi_dsub>
 8005d92:	a36b      	add	r3, pc, #428	@ (adr r3, 8005f40 <_dtoa_r+0x2b8>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fc36 	bl	8000608 <__aeabi_dmul>
 8005d9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005f48 <_dtoa_r+0x2c0>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fa7b 	bl	800029c <__adddf3>
 8005da6:	4604      	mov	r4, r0
 8005da8:	4630      	mov	r0, r6
 8005daa:	460d      	mov	r5, r1
 8005dac:	f7fa fbc2 	bl	8000534 <__aeabi_i2d>
 8005db0:	a367      	add	r3, pc, #412	@ (adr r3, 8005f50 <_dtoa_r+0x2c8>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fc27 	bl	8000608 <__aeabi_dmul>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fa6b 	bl	800029c <__adddf3>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	f7fa fecd 	bl	8000b68 <__aeabi_d2iz>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f7fa fe88 	bl	8000aec <__aeabi_dcmplt>
 8005ddc:	b140      	cbz	r0, 8005df0 <_dtoa_r+0x168>
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7fa fba8 	bl	8000534 <__aeabi_i2d>
 8005de4:	4622      	mov	r2, r4
 8005de6:	462b      	mov	r3, r5
 8005de8:	f7fa fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dec:	b900      	cbnz	r0, 8005df0 <_dtoa_r+0x168>
 8005dee:	3f01      	subs	r7, #1
 8005df0:	2f16      	cmp	r7, #22
 8005df2:	d852      	bhi.n	8005e9a <_dtoa_r+0x212>
 8005df4:	4b5d      	ldr	r3, [pc, #372]	@ (8005f6c <_dtoa_r+0x2e4>)
 8005df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e02:	f7fa fe73 	bl	8000aec <__aeabi_dcmplt>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d049      	beq.n	8005e9e <_dtoa_r+0x216>
 8005e0a:	3f01      	subs	r7, #1
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e12:	1b9b      	subs	r3, r3, r6
 8005e14:	1e5a      	subs	r2, r3, #1
 8005e16:	bf45      	ittet	mi
 8005e18:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e1c:	9300      	strmi	r3, [sp, #0]
 8005e1e:	2300      	movpl	r3, #0
 8005e20:	2300      	movmi	r3, #0
 8005e22:	9206      	str	r2, [sp, #24]
 8005e24:	bf54      	ite	pl
 8005e26:	9300      	strpl	r3, [sp, #0]
 8005e28:	9306      	strmi	r3, [sp, #24]
 8005e2a:	2f00      	cmp	r7, #0
 8005e2c:	db39      	blt.n	8005ea2 <_dtoa_r+0x21a>
 8005e2e:	9b06      	ldr	r3, [sp, #24]
 8005e30:	970d      	str	r7, [sp, #52]	@ 0x34
 8005e32:	443b      	add	r3, r7
 8005e34:	9306      	str	r3, [sp, #24]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9308      	str	r3, [sp, #32]
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	2b09      	cmp	r3, #9
 8005e3e:	d863      	bhi.n	8005f08 <_dtoa_r+0x280>
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	bfc4      	itt	gt
 8005e44:	3b04      	subgt	r3, #4
 8005e46:	9307      	strgt	r3, [sp, #28]
 8005e48:	9b07      	ldr	r3, [sp, #28]
 8005e4a:	f1a3 0302 	sub.w	r3, r3, #2
 8005e4e:	bfcc      	ite	gt
 8005e50:	2400      	movgt	r4, #0
 8005e52:	2401      	movle	r4, #1
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d863      	bhi.n	8005f20 <_dtoa_r+0x298>
 8005e58:	e8df f003 	tbb	[pc, r3]
 8005e5c:	2b375452 	.word	0x2b375452
 8005e60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e64:	441e      	add	r6, r3
 8005e66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	bfc1      	itttt	gt
 8005e6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e72:	409f      	lslgt	r7, r3
 8005e74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e7c:	bfd6      	itet	le
 8005e7e:	f1c3 0320 	rsble	r3, r3, #32
 8005e82:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e86:	fa04 f003 	lslle.w	r0, r4, r3
 8005e8a:	f7fa fb43 	bl	8000514 <__aeabi_ui2d>
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e94:	3e01      	subs	r6, #1
 8005e96:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e98:	e776      	b.n	8005d88 <_dtoa_r+0x100>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7b7      	b.n	8005e0e <_dtoa_r+0x186>
 8005e9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005ea0:	e7b6      	b.n	8005e10 <_dtoa_r+0x188>
 8005ea2:	9b00      	ldr	r3, [sp, #0]
 8005ea4:	1bdb      	subs	r3, r3, r7
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	427b      	negs	r3, r7
 8005eaa:	9308      	str	r3, [sp, #32]
 8005eac:	2300      	movs	r3, #0
 8005eae:	930d      	str	r3, [sp, #52]	@ 0x34
 8005eb0:	e7c3      	b.n	8005e3a <_dtoa_r+0x1b2>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eb8:	eb07 0b03 	add.w	fp, r7, r3
 8005ebc:	f10b 0301 	add.w	r3, fp, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	9303      	str	r3, [sp, #12]
 8005ec4:	bfb8      	it	lt
 8005ec6:	2301      	movlt	r3, #1
 8005ec8:	e006      	b.n	8005ed8 <_dtoa_r+0x250>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd28      	ble.n	8005f26 <_dtoa_r+0x29e>
 8005ed4:	469b      	mov	fp, r3
 8005ed6:	9303      	str	r3, [sp, #12]
 8005ed8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005edc:	2100      	movs	r1, #0
 8005ede:	2204      	movs	r2, #4
 8005ee0:	f102 0514 	add.w	r5, r2, #20
 8005ee4:	429d      	cmp	r5, r3
 8005ee6:	d926      	bls.n	8005f36 <_dtoa_r+0x2ae>
 8005ee8:	6041      	str	r1, [r0, #4]
 8005eea:	4648      	mov	r0, r9
 8005eec:	f000 fd9c 	bl	8006a28 <_Balloc>
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d142      	bne.n	8005f7c <_dtoa_r+0x2f4>
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f70 <_dtoa_r+0x2e8>)
 8005ef8:	4602      	mov	r2, r0
 8005efa:	f240 11af 	movw	r1, #431	@ 0x1af
 8005efe:	e6da      	b.n	8005cb6 <_dtoa_r+0x2e>
 8005f00:	2300      	movs	r3, #0
 8005f02:	e7e3      	b.n	8005ecc <_dtoa_r+0x244>
 8005f04:	2300      	movs	r3, #0
 8005f06:	e7d5      	b.n	8005eb4 <_dtoa_r+0x22c>
 8005f08:	2401      	movs	r4, #1
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005f10:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f1a:	2312      	movs	r3, #18
 8005f1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f1e:	e7db      	b.n	8005ed8 <_dtoa_r+0x250>
 8005f20:	2301      	movs	r3, #1
 8005f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f24:	e7f4      	b.n	8005f10 <_dtoa_r+0x288>
 8005f26:	f04f 0b01 	mov.w	fp, #1
 8005f2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f2e:	465b      	mov	r3, fp
 8005f30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005f34:	e7d0      	b.n	8005ed8 <_dtoa_r+0x250>
 8005f36:	3101      	adds	r1, #1
 8005f38:	0052      	lsls	r2, r2, #1
 8005f3a:	e7d1      	b.n	8005ee0 <_dtoa_r+0x258>
 8005f3c:	f3af 8000 	nop.w
 8005f40:	636f4361 	.word	0x636f4361
 8005f44:	3fd287a7 	.word	0x3fd287a7
 8005f48:	8b60c8b3 	.word	0x8b60c8b3
 8005f4c:	3fc68a28 	.word	0x3fc68a28
 8005f50:	509f79fb 	.word	0x509f79fb
 8005f54:	3fd34413 	.word	0x3fd34413
 8005f58:	08007cc5 	.word	0x08007cc5
 8005f5c:	08007cdc 	.word	0x08007cdc
 8005f60:	7ff00000 	.word	0x7ff00000
 8005f64:	08007c95 	.word	0x08007c95
 8005f68:	3ff80000 	.word	0x3ff80000
 8005f6c:	08007e30 	.word	0x08007e30
 8005f70:	08007d34 	.word	0x08007d34
 8005f74:	08007cc1 	.word	0x08007cc1
 8005f78:	08007c94 	.word	0x08007c94
 8005f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f80:	6018      	str	r0, [r3, #0]
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	2b0e      	cmp	r3, #14
 8005f86:	f200 80a1 	bhi.w	80060cc <_dtoa_r+0x444>
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	f000 809e 	beq.w	80060cc <_dtoa_r+0x444>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	dd33      	ble.n	8005ffc <_dtoa_r+0x374>
 8005f94:	4b9c      	ldr	r3, [pc, #624]	@ (8006208 <_dtoa_r+0x580>)
 8005f96:	f007 020f 	and.w	r2, r7, #15
 8005f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f9e:	ed93 7b00 	vldr	d7, [r3]
 8005fa2:	05f8      	lsls	r0, r7, #23
 8005fa4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005fac:	d516      	bpl.n	8005fdc <_dtoa_r+0x354>
 8005fae:	4b97      	ldr	r3, [pc, #604]	@ (800620c <_dtoa_r+0x584>)
 8005fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb8:	f7fa fc50 	bl	800085c <__aeabi_ddiv>
 8005fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fc0:	f004 040f 	and.w	r4, r4, #15
 8005fc4:	2603      	movs	r6, #3
 8005fc6:	4d91      	ldr	r5, [pc, #580]	@ (800620c <_dtoa_r+0x584>)
 8005fc8:	b954      	cbnz	r4, 8005fe0 <_dtoa_r+0x358>
 8005fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd2:	f7fa fc43 	bl	800085c <__aeabi_ddiv>
 8005fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fda:	e028      	b.n	800602e <_dtoa_r+0x3a6>
 8005fdc:	2602      	movs	r6, #2
 8005fde:	e7f2      	b.n	8005fc6 <_dtoa_r+0x33e>
 8005fe0:	07e1      	lsls	r1, r4, #31
 8005fe2:	d508      	bpl.n	8005ff6 <_dtoa_r+0x36e>
 8005fe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fec:	f7fa fb0c 	bl	8000608 <__aeabi_dmul>
 8005ff0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	1064      	asrs	r4, r4, #1
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	e7e5      	b.n	8005fc8 <_dtoa_r+0x340>
 8005ffc:	f000 80af 	beq.w	800615e <_dtoa_r+0x4d6>
 8006000:	427c      	negs	r4, r7
 8006002:	4b81      	ldr	r3, [pc, #516]	@ (8006208 <_dtoa_r+0x580>)
 8006004:	4d81      	ldr	r5, [pc, #516]	@ (800620c <_dtoa_r+0x584>)
 8006006:	f004 020f 	and.w	r2, r4, #15
 800600a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006016:	f7fa faf7 	bl	8000608 <__aeabi_dmul>
 800601a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800601e:	1124      	asrs	r4, r4, #4
 8006020:	2300      	movs	r3, #0
 8006022:	2602      	movs	r6, #2
 8006024:	2c00      	cmp	r4, #0
 8006026:	f040 808f 	bne.w	8006148 <_dtoa_r+0x4c0>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1d3      	bne.n	8005fd6 <_dtoa_r+0x34e>
 800602e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006030:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8094 	beq.w	8006162 <_dtoa_r+0x4da>
 800603a:	4b75      	ldr	r3, [pc, #468]	@ (8006210 <_dtoa_r+0x588>)
 800603c:	2200      	movs	r2, #0
 800603e:	4620      	mov	r0, r4
 8006040:	4629      	mov	r1, r5
 8006042:	f7fa fd53 	bl	8000aec <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 808b 	beq.w	8006162 <_dtoa_r+0x4da>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8087 	beq.w	8006162 <_dtoa_r+0x4da>
 8006054:	f1bb 0f00 	cmp.w	fp, #0
 8006058:	dd34      	ble.n	80060c4 <_dtoa_r+0x43c>
 800605a:	4620      	mov	r0, r4
 800605c:	4b6d      	ldr	r3, [pc, #436]	@ (8006214 <_dtoa_r+0x58c>)
 800605e:	2200      	movs	r2, #0
 8006060:	4629      	mov	r1, r5
 8006062:	f7fa fad1 	bl	8000608 <__aeabi_dmul>
 8006066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800606a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800606e:	3601      	adds	r6, #1
 8006070:	465c      	mov	r4, fp
 8006072:	4630      	mov	r0, r6
 8006074:	f7fa fa5e 	bl	8000534 <__aeabi_i2d>
 8006078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607c:	f7fa fac4 	bl	8000608 <__aeabi_dmul>
 8006080:	4b65      	ldr	r3, [pc, #404]	@ (8006218 <_dtoa_r+0x590>)
 8006082:	2200      	movs	r2, #0
 8006084:	f7fa f90a 	bl	800029c <__adddf3>
 8006088:	4605      	mov	r5, r0
 800608a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800608e:	2c00      	cmp	r4, #0
 8006090:	d16a      	bne.n	8006168 <_dtoa_r+0x4e0>
 8006092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006096:	4b61      	ldr	r3, [pc, #388]	@ (800621c <_dtoa_r+0x594>)
 8006098:	2200      	movs	r2, #0
 800609a:	f7fa f8fd 	bl	8000298 <__aeabi_dsub>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060a6:	462a      	mov	r2, r5
 80060a8:	4633      	mov	r3, r6
 80060aa:	f7fa fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f040 8298 	bne.w	80065e4 <_dtoa_r+0x95c>
 80060b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b8:	462a      	mov	r2, r5
 80060ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80060be:	f7fa fd15 	bl	8000aec <__aeabi_dcmplt>
 80060c2:	bb38      	cbnz	r0, 8006114 <_dtoa_r+0x48c>
 80060c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80060c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f2c0 8157 	blt.w	8006382 <_dtoa_r+0x6fa>
 80060d4:	2f0e      	cmp	r7, #14
 80060d6:	f300 8154 	bgt.w	8006382 <_dtoa_r+0x6fa>
 80060da:	4b4b      	ldr	r3, [pc, #300]	@ (8006208 <_dtoa_r+0x580>)
 80060dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060e0:	ed93 7b00 	vldr	d7, [r3]
 80060e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	ed8d 7b00 	vstr	d7, [sp]
 80060ec:	f280 80e5 	bge.w	80062ba <_dtoa_r+0x632>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f300 80e1 	bgt.w	80062ba <_dtoa_r+0x632>
 80060f8:	d10c      	bne.n	8006114 <_dtoa_r+0x48c>
 80060fa:	4b48      	ldr	r3, [pc, #288]	@ (800621c <_dtoa_r+0x594>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	ec51 0b17 	vmov	r0, r1, d7
 8006102:	f7fa fa81 	bl	8000608 <__aeabi_dmul>
 8006106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610a:	f7fa fd03 	bl	8000b14 <__aeabi_dcmpge>
 800610e:	2800      	cmp	r0, #0
 8006110:	f000 8266 	beq.w	80065e0 <_dtoa_r+0x958>
 8006114:	2400      	movs	r4, #0
 8006116:	4625      	mov	r5, r4
 8006118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800611a:	4656      	mov	r6, sl
 800611c:	ea6f 0803 	mvn.w	r8, r3
 8006120:	2700      	movs	r7, #0
 8006122:	4621      	mov	r1, r4
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fcbf 	bl	8006aa8 <_Bfree>
 800612a:	2d00      	cmp	r5, #0
 800612c:	f000 80bd 	beq.w	80062aa <_dtoa_r+0x622>
 8006130:	b12f      	cbz	r7, 800613e <_dtoa_r+0x4b6>
 8006132:	42af      	cmp	r7, r5
 8006134:	d003      	beq.n	800613e <_dtoa_r+0x4b6>
 8006136:	4639      	mov	r1, r7
 8006138:	4648      	mov	r0, r9
 800613a:	f000 fcb5 	bl	8006aa8 <_Bfree>
 800613e:	4629      	mov	r1, r5
 8006140:	4648      	mov	r0, r9
 8006142:	f000 fcb1 	bl	8006aa8 <_Bfree>
 8006146:	e0b0      	b.n	80062aa <_dtoa_r+0x622>
 8006148:	07e2      	lsls	r2, r4, #31
 800614a:	d505      	bpl.n	8006158 <_dtoa_r+0x4d0>
 800614c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	3601      	adds	r6, #1
 8006156:	2301      	movs	r3, #1
 8006158:	1064      	asrs	r4, r4, #1
 800615a:	3508      	adds	r5, #8
 800615c:	e762      	b.n	8006024 <_dtoa_r+0x39c>
 800615e:	2602      	movs	r6, #2
 8006160:	e765      	b.n	800602e <_dtoa_r+0x3a6>
 8006162:	9c03      	ldr	r4, [sp, #12]
 8006164:	46b8      	mov	r8, r7
 8006166:	e784      	b.n	8006072 <_dtoa_r+0x3ea>
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <_dtoa_r+0x580>)
 800616a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800616c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006174:	4454      	add	r4, sl
 8006176:	2900      	cmp	r1, #0
 8006178:	d054      	beq.n	8006224 <_dtoa_r+0x59c>
 800617a:	4929      	ldr	r1, [pc, #164]	@ (8006220 <_dtoa_r+0x598>)
 800617c:	2000      	movs	r0, #0
 800617e:	f7fa fb6d 	bl	800085c <__aeabi_ddiv>
 8006182:	4633      	mov	r3, r6
 8006184:	462a      	mov	r2, r5
 8006186:	f7fa f887 	bl	8000298 <__aeabi_dsub>
 800618a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800618e:	4656      	mov	r6, sl
 8006190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006194:	f7fa fce8 	bl	8000b68 <__aeabi_d2iz>
 8006198:	4605      	mov	r5, r0
 800619a:	f7fa f9cb 	bl	8000534 <__aeabi_i2d>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a6:	f7fa f877 	bl	8000298 <__aeabi_dsub>
 80061aa:	3530      	adds	r5, #48	@ 0x30
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061b4:	f806 5b01 	strb.w	r5, [r6], #1
 80061b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061bc:	f7fa fc96 	bl	8000aec <__aeabi_dcmplt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d172      	bne.n	80062aa <_dtoa_r+0x622>
 80061c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c8:	4911      	ldr	r1, [pc, #68]	@ (8006210 <_dtoa_r+0x588>)
 80061ca:	2000      	movs	r0, #0
 80061cc:	f7fa f864 	bl	8000298 <__aeabi_dsub>
 80061d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061d4:	f7fa fc8a 	bl	8000aec <__aeabi_dcmplt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 80b4 	bne.w	8006346 <_dtoa_r+0x6be>
 80061de:	42a6      	cmp	r6, r4
 80061e0:	f43f af70 	beq.w	80060c4 <_dtoa_r+0x43c>
 80061e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <_dtoa_r+0x58c>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	f7fa fa0c 	bl	8000608 <__aeabi_dmul>
 80061f0:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <_dtoa_r+0x58c>)
 80061f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061f6:	2200      	movs	r2, #0
 80061f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061fc:	f7fa fa04 	bl	8000608 <__aeabi_dmul>
 8006200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006204:	e7c4      	b.n	8006190 <_dtoa_r+0x508>
 8006206:	bf00      	nop
 8006208:	08007e30 	.word	0x08007e30
 800620c:	08007e08 	.word	0x08007e08
 8006210:	3ff00000 	.word	0x3ff00000
 8006214:	40240000 	.word	0x40240000
 8006218:	401c0000 	.word	0x401c0000
 800621c:	40140000 	.word	0x40140000
 8006220:	3fe00000 	.word	0x3fe00000
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	f7fa f9ee 	bl	8000608 <__aeabi_dmul>
 800622c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006230:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006232:	4656      	mov	r6, sl
 8006234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006238:	f7fa fc96 	bl	8000b68 <__aeabi_d2iz>
 800623c:	4605      	mov	r5, r0
 800623e:	f7fa f979 	bl	8000534 <__aeabi_i2d>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624a:	f7fa f825 	bl	8000298 <__aeabi_dsub>
 800624e:	3530      	adds	r5, #48	@ 0x30
 8006250:	f806 5b01 	strb.w	r5, [r6], #1
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	42a6      	cmp	r6, r4
 800625a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	d124      	bne.n	80062ae <_dtoa_r+0x626>
 8006264:	4baf      	ldr	r3, [pc, #700]	@ (8006524 <_dtoa_r+0x89c>)
 8006266:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800626a:	f7fa f817 	bl	800029c <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006276:	f7fa fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800627a:	2800      	cmp	r0, #0
 800627c:	d163      	bne.n	8006346 <_dtoa_r+0x6be>
 800627e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006282:	49a8      	ldr	r1, [pc, #672]	@ (8006524 <_dtoa_r+0x89c>)
 8006284:	2000      	movs	r0, #0
 8006286:	f7fa f807 	bl	8000298 <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006292:	f7fa fc2b 	bl	8000aec <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f af14 	beq.w	80060c4 <_dtoa_r+0x43c>
 800629c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800629e:	1e73      	subs	r3, r6, #1
 80062a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062a6:	2b30      	cmp	r3, #48	@ 0x30
 80062a8:	d0f8      	beq.n	800629c <_dtoa_r+0x614>
 80062aa:	4647      	mov	r7, r8
 80062ac:	e03b      	b.n	8006326 <_dtoa_r+0x69e>
 80062ae:	4b9e      	ldr	r3, [pc, #632]	@ (8006528 <_dtoa_r+0x8a0>)
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b8:	e7bc      	b.n	8006234 <_dtoa_r+0x5ac>
 80062ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80062be:	4656      	mov	r6, sl
 80062c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa fac8 	bl	800085c <__aeabi_ddiv>
 80062cc:	f7fa fc4c 	bl	8000b68 <__aeabi_d2iz>
 80062d0:	4680      	mov	r8, r0
 80062d2:	f7fa f92f 	bl	8000534 <__aeabi_i2d>
 80062d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062da:	f7fa f995 	bl	8000608 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062ea:	f7f9 ffd5 	bl	8000298 <__aeabi_dsub>
 80062ee:	f806 4b01 	strb.w	r4, [r6], #1
 80062f2:	9d03      	ldr	r5, [sp, #12]
 80062f4:	eba6 040a 	sub.w	r4, r6, sl
 80062f8:	42a5      	cmp	r5, r4
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	d133      	bne.n	8006368 <_dtoa_r+0x6e0>
 8006300:	f7f9 ffcc 	bl	800029c <__adddf3>
 8006304:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	f7fa fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 8006310:	b9c0      	cbnz	r0, 8006344 <_dtoa_r+0x6bc>
 8006312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800631e:	b110      	cbz	r0, 8006326 <_dtoa_r+0x69e>
 8006320:	f018 0f01 	tst.w	r8, #1
 8006324:	d10e      	bne.n	8006344 <_dtoa_r+0x6bc>
 8006326:	9902      	ldr	r1, [sp, #8]
 8006328:	4648      	mov	r0, r9
 800632a:	f000 fbbd 	bl	8006aa8 <_Bfree>
 800632e:	2300      	movs	r3, #0
 8006330:	7033      	strb	r3, [r6, #0]
 8006332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006334:	3701      	adds	r7, #1
 8006336:	601f      	str	r7, [r3, #0]
 8006338:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 824b 	beq.w	80067d6 <_dtoa_r+0xb4e>
 8006340:	601e      	str	r6, [r3, #0]
 8006342:	e248      	b.n	80067d6 <_dtoa_r+0xb4e>
 8006344:	46b8      	mov	r8, r7
 8006346:	4633      	mov	r3, r6
 8006348:	461e      	mov	r6, r3
 800634a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800634e:	2a39      	cmp	r2, #57	@ 0x39
 8006350:	d106      	bne.n	8006360 <_dtoa_r+0x6d8>
 8006352:	459a      	cmp	sl, r3
 8006354:	d1f8      	bne.n	8006348 <_dtoa_r+0x6c0>
 8006356:	2230      	movs	r2, #48	@ 0x30
 8006358:	f108 0801 	add.w	r8, r8, #1
 800635c:	f88a 2000 	strb.w	r2, [sl]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	3201      	adds	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e7a0      	b.n	80062aa <_dtoa_r+0x622>
 8006368:	4b6f      	ldr	r3, [pc, #444]	@ (8006528 <_dtoa_r+0x8a0>)
 800636a:	2200      	movs	r2, #0
 800636c:	f7fa f94c 	bl	8000608 <__aeabi_dmul>
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f7fa fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800637c:	2800      	cmp	r0, #0
 800637e:	d09f      	beq.n	80062c0 <_dtoa_r+0x638>
 8006380:	e7d1      	b.n	8006326 <_dtoa_r+0x69e>
 8006382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006384:	2a00      	cmp	r2, #0
 8006386:	f000 80ea 	beq.w	800655e <_dtoa_r+0x8d6>
 800638a:	9a07      	ldr	r2, [sp, #28]
 800638c:	2a01      	cmp	r2, #1
 800638e:	f300 80cd 	bgt.w	800652c <_dtoa_r+0x8a4>
 8006392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006394:	2a00      	cmp	r2, #0
 8006396:	f000 80c1 	beq.w	800651c <_dtoa_r+0x894>
 800639a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800639e:	9c08      	ldr	r4, [sp, #32]
 80063a0:	9e00      	ldr	r6, [sp, #0]
 80063a2:	9a00      	ldr	r2, [sp, #0]
 80063a4:	441a      	add	r2, r3
 80063a6:	9200      	str	r2, [sp, #0]
 80063a8:	9a06      	ldr	r2, [sp, #24]
 80063aa:	2101      	movs	r1, #1
 80063ac:	441a      	add	r2, r3
 80063ae:	4648      	mov	r0, r9
 80063b0:	9206      	str	r2, [sp, #24]
 80063b2:	f000 fc2d 	bl	8006c10 <__i2b>
 80063b6:	4605      	mov	r5, r0
 80063b8:	b166      	cbz	r6, 80063d4 <_dtoa_r+0x74c>
 80063ba:	9b06      	ldr	r3, [sp, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dd09      	ble.n	80063d4 <_dtoa_r+0x74c>
 80063c0:	42b3      	cmp	r3, r6
 80063c2:	9a00      	ldr	r2, [sp, #0]
 80063c4:	bfa8      	it	ge
 80063c6:	4633      	movge	r3, r6
 80063c8:	1ad2      	subs	r2, r2, r3
 80063ca:	9200      	str	r2, [sp, #0]
 80063cc:	9a06      	ldr	r2, [sp, #24]
 80063ce:	1af6      	subs	r6, r6, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	9306      	str	r3, [sp, #24]
 80063d4:	9b08      	ldr	r3, [sp, #32]
 80063d6:	b30b      	cbz	r3, 800641c <_dtoa_r+0x794>
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80c6 	beq.w	800656c <_dtoa_r+0x8e4>
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	f000 80c0 	beq.w	8006566 <_dtoa_r+0x8de>
 80063e6:	4629      	mov	r1, r5
 80063e8:	4622      	mov	r2, r4
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fcc8 	bl	8006d80 <__pow5mult>
 80063f0:	9a02      	ldr	r2, [sp, #8]
 80063f2:	4601      	mov	r1, r0
 80063f4:	4605      	mov	r5, r0
 80063f6:	4648      	mov	r0, r9
 80063f8:	f000 fc20 	bl	8006c3c <__multiply>
 80063fc:	9902      	ldr	r1, [sp, #8]
 80063fe:	4680      	mov	r8, r0
 8006400:	4648      	mov	r0, r9
 8006402:	f000 fb51 	bl	8006aa8 <_Bfree>
 8006406:	9b08      	ldr	r3, [sp, #32]
 8006408:	1b1b      	subs	r3, r3, r4
 800640a:	9308      	str	r3, [sp, #32]
 800640c:	f000 80b1 	beq.w	8006572 <_dtoa_r+0x8ea>
 8006410:	9a08      	ldr	r2, [sp, #32]
 8006412:	4641      	mov	r1, r8
 8006414:	4648      	mov	r0, r9
 8006416:	f000 fcb3 	bl	8006d80 <__pow5mult>
 800641a:	9002      	str	r0, [sp, #8]
 800641c:	2101      	movs	r1, #1
 800641e:	4648      	mov	r0, r9
 8006420:	f000 fbf6 	bl	8006c10 <__i2b>
 8006424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006426:	4604      	mov	r4, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 81d8 	beq.w	80067de <_dtoa_r+0xb56>
 800642e:	461a      	mov	r2, r3
 8006430:	4601      	mov	r1, r0
 8006432:	4648      	mov	r0, r9
 8006434:	f000 fca4 	bl	8006d80 <__pow5mult>
 8006438:	9b07      	ldr	r3, [sp, #28]
 800643a:	2b01      	cmp	r3, #1
 800643c:	4604      	mov	r4, r0
 800643e:	f300 809f 	bgt.w	8006580 <_dtoa_r+0x8f8>
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 8097 	bne.w	8006578 <_dtoa_r+0x8f0>
 800644a:	9b05      	ldr	r3, [sp, #20]
 800644c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 8093 	bne.w	800657c <_dtoa_r+0x8f4>
 8006456:	9b05      	ldr	r3, [sp, #20]
 8006458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	0d1b      	lsrs	r3, r3, #20
 800645e:	051b      	lsls	r3, r3, #20
 8006460:	b133      	cbz	r3, 8006470 <_dtoa_r+0x7e8>
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	9b06      	ldr	r3, [sp, #24]
 800646a:	3301      	adds	r3, #1
 800646c:	9306      	str	r3, [sp, #24]
 800646e:	2301      	movs	r3, #1
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 81b8 	beq.w	80067ea <_dtoa_r+0xb62>
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006480:	6918      	ldr	r0, [r3, #16]
 8006482:	f000 fb79 	bl	8006b78 <__hi0bits>
 8006486:	f1c0 0020 	rsb	r0, r0, #32
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	4418      	add	r0, r3
 800648e:	f010 001f 	ands.w	r0, r0, #31
 8006492:	f000 8082 	beq.w	800659a <_dtoa_r+0x912>
 8006496:	f1c0 0320 	rsb	r3, r0, #32
 800649a:	2b04      	cmp	r3, #4
 800649c:	dd73      	ble.n	8006586 <_dtoa_r+0x8fe>
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	f1c0 001c 	rsb	r0, r0, #28
 80064a4:	4403      	add	r3, r0
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	9b06      	ldr	r3, [sp, #24]
 80064aa:	4403      	add	r3, r0
 80064ac:	4406      	add	r6, r0
 80064ae:	9306      	str	r3, [sp, #24]
 80064b0:	9b00      	ldr	r3, [sp, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dd05      	ble.n	80064c2 <_dtoa_r+0x83a>
 80064b6:	9902      	ldr	r1, [sp, #8]
 80064b8:	461a      	mov	r2, r3
 80064ba:	4648      	mov	r0, r9
 80064bc:	f000 fcba 	bl	8006e34 <__lshift>
 80064c0:	9002      	str	r0, [sp, #8]
 80064c2:	9b06      	ldr	r3, [sp, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dd05      	ble.n	80064d4 <_dtoa_r+0x84c>
 80064c8:	4621      	mov	r1, r4
 80064ca:	461a      	mov	r2, r3
 80064cc:	4648      	mov	r0, r9
 80064ce:	f000 fcb1 	bl	8006e34 <__lshift>
 80064d2:	4604      	mov	r4, r0
 80064d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d061      	beq.n	800659e <_dtoa_r+0x916>
 80064da:	9802      	ldr	r0, [sp, #8]
 80064dc:	4621      	mov	r1, r4
 80064de:	f000 fd15 	bl	8006f0c <__mcmp>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	da5b      	bge.n	800659e <_dtoa_r+0x916>
 80064e6:	2300      	movs	r3, #0
 80064e8:	9902      	ldr	r1, [sp, #8]
 80064ea:	220a      	movs	r2, #10
 80064ec:	4648      	mov	r0, r9
 80064ee:	f000 fafd 	bl	8006aec <__multadd>
 80064f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f4:	9002      	str	r0, [sp, #8]
 80064f6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8177 	beq.w	80067ee <_dtoa_r+0xb66>
 8006500:	4629      	mov	r1, r5
 8006502:	2300      	movs	r3, #0
 8006504:	220a      	movs	r2, #10
 8006506:	4648      	mov	r0, r9
 8006508:	f000 faf0 	bl	8006aec <__multadd>
 800650c:	f1bb 0f00 	cmp.w	fp, #0
 8006510:	4605      	mov	r5, r0
 8006512:	dc6f      	bgt.n	80065f4 <_dtoa_r+0x96c>
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	2b02      	cmp	r3, #2
 8006518:	dc49      	bgt.n	80065ae <_dtoa_r+0x926>
 800651a:	e06b      	b.n	80065f4 <_dtoa_r+0x96c>
 800651c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800651e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006522:	e73c      	b.n	800639e <_dtoa_r+0x716>
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	40240000 	.word	0x40240000
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	1e5c      	subs	r4, r3, #1
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	42a3      	cmp	r3, r4
 8006534:	db09      	blt.n	800654a <_dtoa_r+0x8c2>
 8006536:	1b1c      	subs	r4, r3, r4
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f6bf af30 	bge.w	80063a0 <_dtoa_r+0x718>
 8006540:	9b00      	ldr	r3, [sp, #0]
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	1a9e      	subs	r6, r3, r2
 8006546:	2300      	movs	r3, #0
 8006548:	e72b      	b.n	80063a2 <_dtoa_r+0x71a>
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800654e:	9408      	str	r4, [sp, #32]
 8006550:	1ae3      	subs	r3, r4, r3
 8006552:	441a      	add	r2, r3
 8006554:	9e00      	ldr	r6, [sp, #0]
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	920d      	str	r2, [sp, #52]	@ 0x34
 800655a:	2400      	movs	r4, #0
 800655c:	e721      	b.n	80063a2 <_dtoa_r+0x71a>
 800655e:	9c08      	ldr	r4, [sp, #32]
 8006560:	9e00      	ldr	r6, [sp, #0]
 8006562:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006564:	e728      	b.n	80063b8 <_dtoa_r+0x730>
 8006566:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800656a:	e751      	b.n	8006410 <_dtoa_r+0x788>
 800656c:	9a08      	ldr	r2, [sp, #32]
 800656e:	9902      	ldr	r1, [sp, #8]
 8006570:	e750      	b.n	8006414 <_dtoa_r+0x78c>
 8006572:	f8cd 8008 	str.w	r8, [sp, #8]
 8006576:	e751      	b.n	800641c <_dtoa_r+0x794>
 8006578:	2300      	movs	r3, #0
 800657a:	e779      	b.n	8006470 <_dtoa_r+0x7e8>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	e777      	b.n	8006470 <_dtoa_r+0x7e8>
 8006580:	2300      	movs	r3, #0
 8006582:	9308      	str	r3, [sp, #32]
 8006584:	e779      	b.n	800647a <_dtoa_r+0x7f2>
 8006586:	d093      	beq.n	80064b0 <_dtoa_r+0x828>
 8006588:	9a00      	ldr	r2, [sp, #0]
 800658a:	331c      	adds	r3, #28
 800658c:	441a      	add	r2, r3
 800658e:	9200      	str	r2, [sp, #0]
 8006590:	9a06      	ldr	r2, [sp, #24]
 8006592:	441a      	add	r2, r3
 8006594:	441e      	add	r6, r3
 8006596:	9206      	str	r2, [sp, #24]
 8006598:	e78a      	b.n	80064b0 <_dtoa_r+0x828>
 800659a:	4603      	mov	r3, r0
 800659c:	e7f4      	b.n	8006588 <_dtoa_r+0x900>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	46b8      	mov	r8, r7
 80065a4:	dc20      	bgt.n	80065e8 <_dtoa_r+0x960>
 80065a6:	469b      	mov	fp, r3
 80065a8:	9b07      	ldr	r3, [sp, #28]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	dd1e      	ble.n	80065ec <_dtoa_r+0x964>
 80065ae:	f1bb 0f00 	cmp.w	fp, #0
 80065b2:	f47f adb1 	bne.w	8006118 <_dtoa_r+0x490>
 80065b6:	4621      	mov	r1, r4
 80065b8:	465b      	mov	r3, fp
 80065ba:	2205      	movs	r2, #5
 80065bc:	4648      	mov	r0, r9
 80065be:	f000 fa95 	bl	8006aec <__multadd>
 80065c2:	4601      	mov	r1, r0
 80065c4:	4604      	mov	r4, r0
 80065c6:	9802      	ldr	r0, [sp, #8]
 80065c8:	f000 fca0 	bl	8006f0c <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f77f ada3 	ble.w	8006118 <_dtoa_r+0x490>
 80065d2:	4656      	mov	r6, sl
 80065d4:	2331      	movs	r3, #49	@ 0x31
 80065d6:	f806 3b01 	strb.w	r3, [r6], #1
 80065da:	f108 0801 	add.w	r8, r8, #1
 80065de:	e59f      	b.n	8006120 <_dtoa_r+0x498>
 80065e0:	9c03      	ldr	r4, [sp, #12]
 80065e2:	46b8      	mov	r8, r7
 80065e4:	4625      	mov	r5, r4
 80065e6:	e7f4      	b.n	80065d2 <_dtoa_r+0x94a>
 80065e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8101 	beq.w	80067f6 <_dtoa_r+0xb6e>
 80065f4:	2e00      	cmp	r6, #0
 80065f6:	dd05      	ble.n	8006604 <_dtoa_r+0x97c>
 80065f8:	4629      	mov	r1, r5
 80065fa:	4632      	mov	r2, r6
 80065fc:	4648      	mov	r0, r9
 80065fe:	f000 fc19 	bl	8006e34 <__lshift>
 8006602:	4605      	mov	r5, r0
 8006604:	9b08      	ldr	r3, [sp, #32]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d05c      	beq.n	80066c4 <_dtoa_r+0xa3c>
 800660a:	6869      	ldr	r1, [r5, #4]
 800660c:	4648      	mov	r0, r9
 800660e:	f000 fa0b 	bl	8006a28 <_Balloc>
 8006612:	4606      	mov	r6, r0
 8006614:	b928      	cbnz	r0, 8006622 <_dtoa_r+0x99a>
 8006616:	4b82      	ldr	r3, [pc, #520]	@ (8006820 <_dtoa_r+0xb98>)
 8006618:	4602      	mov	r2, r0
 800661a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800661e:	f7ff bb4a 	b.w	8005cb6 <_dtoa_r+0x2e>
 8006622:	692a      	ldr	r2, [r5, #16]
 8006624:	3202      	adds	r2, #2
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	f105 010c 	add.w	r1, r5, #12
 800662c:	300c      	adds	r0, #12
 800662e:	f7ff fa94 	bl	8005b5a <memcpy>
 8006632:	2201      	movs	r2, #1
 8006634:	4631      	mov	r1, r6
 8006636:	4648      	mov	r0, r9
 8006638:	f000 fbfc 	bl	8006e34 <__lshift>
 800663c:	f10a 0301 	add.w	r3, sl, #1
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	eb0a 030b 	add.w	r3, sl, fp
 8006646:	9308      	str	r3, [sp, #32]
 8006648:	9b04      	ldr	r3, [sp, #16]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	462f      	mov	r7, r5
 8006650:	9306      	str	r3, [sp, #24]
 8006652:	4605      	mov	r5, r0
 8006654:	9b00      	ldr	r3, [sp, #0]
 8006656:	9802      	ldr	r0, [sp, #8]
 8006658:	4621      	mov	r1, r4
 800665a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800665e:	f7ff fa8a 	bl	8005b76 <quorem>
 8006662:	4603      	mov	r3, r0
 8006664:	3330      	adds	r3, #48	@ 0x30
 8006666:	9003      	str	r0, [sp, #12]
 8006668:	4639      	mov	r1, r7
 800666a:	9802      	ldr	r0, [sp, #8]
 800666c:	9309      	str	r3, [sp, #36]	@ 0x24
 800666e:	f000 fc4d 	bl	8006f0c <__mcmp>
 8006672:	462a      	mov	r2, r5
 8006674:	9004      	str	r0, [sp, #16]
 8006676:	4621      	mov	r1, r4
 8006678:	4648      	mov	r0, r9
 800667a:	f000 fc63 	bl	8006f44 <__mdiff>
 800667e:	68c2      	ldr	r2, [r0, #12]
 8006680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006682:	4606      	mov	r6, r0
 8006684:	bb02      	cbnz	r2, 80066c8 <_dtoa_r+0xa40>
 8006686:	4601      	mov	r1, r0
 8006688:	9802      	ldr	r0, [sp, #8]
 800668a:	f000 fc3f 	bl	8006f0c <__mcmp>
 800668e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006690:	4602      	mov	r2, r0
 8006692:	4631      	mov	r1, r6
 8006694:	4648      	mov	r0, r9
 8006696:	920c      	str	r2, [sp, #48]	@ 0x30
 8006698:	9309      	str	r3, [sp, #36]	@ 0x24
 800669a:	f000 fa05 	bl	8006aa8 <_Bfree>
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066a2:	9e00      	ldr	r6, [sp, #0]
 80066a4:	ea42 0103 	orr.w	r1, r2, r3
 80066a8:	9b06      	ldr	r3, [sp, #24]
 80066aa:	4319      	orrs	r1, r3
 80066ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ae:	d10d      	bne.n	80066cc <_dtoa_r+0xa44>
 80066b0:	2b39      	cmp	r3, #57	@ 0x39
 80066b2:	d027      	beq.n	8006704 <_dtoa_r+0xa7c>
 80066b4:	9a04      	ldr	r2, [sp, #16]
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	dd01      	ble.n	80066be <_dtoa_r+0xa36>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	3331      	adds	r3, #49	@ 0x31
 80066be:	f88b 3000 	strb.w	r3, [fp]
 80066c2:	e52e      	b.n	8006122 <_dtoa_r+0x49a>
 80066c4:	4628      	mov	r0, r5
 80066c6:	e7b9      	b.n	800663c <_dtoa_r+0x9b4>
 80066c8:	2201      	movs	r2, #1
 80066ca:	e7e2      	b.n	8006692 <_dtoa_r+0xa0a>
 80066cc:	9904      	ldr	r1, [sp, #16]
 80066ce:	2900      	cmp	r1, #0
 80066d0:	db04      	blt.n	80066dc <_dtoa_r+0xa54>
 80066d2:	9807      	ldr	r0, [sp, #28]
 80066d4:	4301      	orrs	r1, r0
 80066d6:	9806      	ldr	r0, [sp, #24]
 80066d8:	4301      	orrs	r1, r0
 80066da:	d120      	bne.n	800671e <_dtoa_r+0xa96>
 80066dc:	2a00      	cmp	r2, #0
 80066de:	ddee      	ble.n	80066be <_dtoa_r+0xa36>
 80066e0:	9902      	ldr	r1, [sp, #8]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2201      	movs	r2, #1
 80066e6:	4648      	mov	r0, r9
 80066e8:	f000 fba4 	bl	8006e34 <__lshift>
 80066ec:	4621      	mov	r1, r4
 80066ee:	9002      	str	r0, [sp, #8]
 80066f0:	f000 fc0c 	bl	8006f0c <__mcmp>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	dc02      	bgt.n	8006700 <_dtoa_r+0xa78>
 80066fa:	d1e0      	bne.n	80066be <_dtoa_r+0xa36>
 80066fc:	07da      	lsls	r2, r3, #31
 80066fe:	d5de      	bpl.n	80066be <_dtoa_r+0xa36>
 8006700:	2b39      	cmp	r3, #57	@ 0x39
 8006702:	d1da      	bne.n	80066ba <_dtoa_r+0xa32>
 8006704:	2339      	movs	r3, #57	@ 0x39
 8006706:	f88b 3000 	strb.w	r3, [fp]
 800670a:	4633      	mov	r3, r6
 800670c:	461e      	mov	r6, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006714:	2a39      	cmp	r2, #57	@ 0x39
 8006716:	d04e      	beq.n	80067b6 <_dtoa_r+0xb2e>
 8006718:	3201      	adds	r2, #1
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e501      	b.n	8006122 <_dtoa_r+0x49a>
 800671e:	2a00      	cmp	r2, #0
 8006720:	dd03      	ble.n	800672a <_dtoa_r+0xaa2>
 8006722:	2b39      	cmp	r3, #57	@ 0x39
 8006724:	d0ee      	beq.n	8006704 <_dtoa_r+0xa7c>
 8006726:	3301      	adds	r3, #1
 8006728:	e7c9      	b.n	80066be <_dtoa_r+0xa36>
 800672a:	9a00      	ldr	r2, [sp, #0]
 800672c:	9908      	ldr	r1, [sp, #32]
 800672e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006732:	428a      	cmp	r2, r1
 8006734:	d028      	beq.n	8006788 <_dtoa_r+0xb00>
 8006736:	9902      	ldr	r1, [sp, #8]
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	4648      	mov	r0, r9
 800673e:	f000 f9d5 	bl	8006aec <__multadd>
 8006742:	42af      	cmp	r7, r5
 8006744:	9002      	str	r0, [sp, #8]
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	f04f 020a 	mov.w	r2, #10
 800674e:	4639      	mov	r1, r7
 8006750:	4648      	mov	r0, r9
 8006752:	d107      	bne.n	8006764 <_dtoa_r+0xadc>
 8006754:	f000 f9ca 	bl	8006aec <__multadd>
 8006758:	4607      	mov	r7, r0
 800675a:	4605      	mov	r5, r0
 800675c:	9b00      	ldr	r3, [sp, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	e777      	b.n	8006654 <_dtoa_r+0x9cc>
 8006764:	f000 f9c2 	bl	8006aec <__multadd>
 8006768:	4629      	mov	r1, r5
 800676a:	4607      	mov	r7, r0
 800676c:	2300      	movs	r3, #0
 800676e:	220a      	movs	r2, #10
 8006770:	4648      	mov	r0, r9
 8006772:	f000 f9bb 	bl	8006aec <__multadd>
 8006776:	4605      	mov	r5, r0
 8006778:	e7f0      	b.n	800675c <_dtoa_r+0xad4>
 800677a:	f1bb 0f00 	cmp.w	fp, #0
 800677e:	bfcc      	ite	gt
 8006780:	465e      	movgt	r6, fp
 8006782:	2601      	movle	r6, #1
 8006784:	4456      	add	r6, sl
 8006786:	2700      	movs	r7, #0
 8006788:	9902      	ldr	r1, [sp, #8]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2201      	movs	r2, #1
 800678e:	4648      	mov	r0, r9
 8006790:	f000 fb50 	bl	8006e34 <__lshift>
 8006794:	4621      	mov	r1, r4
 8006796:	9002      	str	r0, [sp, #8]
 8006798:	f000 fbb8 	bl	8006f0c <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	dcb4      	bgt.n	800670a <_dtoa_r+0xa82>
 80067a0:	d102      	bne.n	80067a8 <_dtoa_r+0xb20>
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	07db      	lsls	r3, r3, #31
 80067a6:	d4b0      	bmi.n	800670a <_dtoa_r+0xa82>
 80067a8:	4633      	mov	r3, r6
 80067aa:	461e      	mov	r6, r3
 80067ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067b0:	2a30      	cmp	r2, #48	@ 0x30
 80067b2:	d0fa      	beq.n	80067aa <_dtoa_r+0xb22>
 80067b4:	e4b5      	b.n	8006122 <_dtoa_r+0x49a>
 80067b6:	459a      	cmp	sl, r3
 80067b8:	d1a8      	bne.n	800670c <_dtoa_r+0xa84>
 80067ba:	2331      	movs	r3, #49	@ 0x31
 80067bc:	f108 0801 	add.w	r8, r8, #1
 80067c0:	f88a 3000 	strb.w	r3, [sl]
 80067c4:	e4ad      	b.n	8006122 <_dtoa_r+0x49a>
 80067c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006824 <_dtoa_r+0xb9c>
 80067cc:	b11b      	cbz	r3, 80067d6 <_dtoa_r+0xb4e>
 80067ce:	f10a 0308 	add.w	r3, sl, #8
 80067d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4650      	mov	r0, sl
 80067d8:	b017      	add	sp, #92	@ 0x5c
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	9b07      	ldr	r3, [sp, #28]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f77f ae2e 	ble.w	8006442 <_dtoa_r+0x7ba>
 80067e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	2001      	movs	r0, #1
 80067ec:	e64d      	b.n	800648a <_dtoa_r+0x802>
 80067ee:	f1bb 0f00 	cmp.w	fp, #0
 80067f2:	f77f aed9 	ble.w	80065a8 <_dtoa_r+0x920>
 80067f6:	4656      	mov	r6, sl
 80067f8:	9802      	ldr	r0, [sp, #8]
 80067fa:	4621      	mov	r1, r4
 80067fc:	f7ff f9bb 	bl	8005b76 <quorem>
 8006800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006804:	f806 3b01 	strb.w	r3, [r6], #1
 8006808:	eba6 020a 	sub.w	r2, r6, sl
 800680c:	4593      	cmp	fp, r2
 800680e:	ddb4      	ble.n	800677a <_dtoa_r+0xaf2>
 8006810:	9902      	ldr	r1, [sp, #8]
 8006812:	2300      	movs	r3, #0
 8006814:	220a      	movs	r2, #10
 8006816:	4648      	mov	r0, r9
 8006818:	f000 f968 	bl	8006aec <__multadd>
 800681c:	9002      	str	r0, [sp, #8]
 800681e:	e7eb      	b.n	80067f8 <_dtoa_r+0xb70>
 8006820:	08007d34 	.word	0x08007d34
 8006824:	08007cb8 	.word	0x08007cb8

08006828 <_free_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	2900      	cmp	r1, #0
 800682e:	d041      	beq.n	80068b4 <_free_r+0x8c>
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f0c      	subs	r4, r1, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	18e4      	addlt	r4, r4, r3
 800683c:	f000 f8e8 	bl	8006a10 <__malloc_lock>
 8006840:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <_free_r+0x90>)
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	b933      	cbnz	r3, 8006854 <_free_r+0x2c>
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6014      	str	r4, [r2, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006850:	f000 b8e4 	b.w	8006a1c <__malloc_unlock>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d908      	bls.n	800686a <_free_r+0x42>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	1821      	adds	r1, r4, r0
 800685c:	428b      	cmp	r3, r1
 800685e:	bf01      	itttt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	e7ed      	b.n	8006846 <_free_r+0x1e>
 800686a:	461a      	mov	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b10b      	cbz	r3, 8006874 <_free_r+0x4c>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x42>
 8006874:	6811      	ldr	r1, [r2, #0]
 8006876:	1850      	adds	r0, r2, r1
 8006878:	42a0      	cmp	r0, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x6c>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	4401      	add	r1, r0
 8006880:	1850      	adds	r0, r2, r1
 8006882:	4283      	cmp	r3, r0
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	d1e0      	bne.n	800684a <_free_r+0x22>
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	4408      	add	r0, r1
 8006890:	6010      	str	r0, [r2, #0]
 8006892:	e7da      	b.n	800684a <_free_r+0x22>
 8006894:	d902      	bls.n	800689c <_free_r+0x74>
 8006896:	230c      	movs	r3, #12
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	e7d6      	b.n	800684a <_free_r+0x22>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	1821      	adds	r1, r4, r0
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf04      	itt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	bf04      	itt	eq
 80068ac:	1809      	addeq	r1, r1, r0
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	6054      	str	r4, [r2, #4]
 80068b2:	e7ca      	b.n	800684a <_free_r+0x22>
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	20000540 	.word	0x20000540

080068bc <malloc>:
 80068bc:	4b02      	ldr	r3, [pc, #8]	@ (80068c8 <malloc+0xc>)
 80068be:	4601      	mov	r1, r0
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f000 b825 	b.w	8006910 <_malloc_r>
 80068c6:	bf00      	nop
 80068c8:	20000020 	.word	0x20000020

080068cc <sbrk_aligned>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4e0f      	ldr	r6, [pc, #60]	@ (800690c <sbrk_aligned+0x40>)
 80068d0:	460c      	mov	r4, r1
 80068d2:	6831      	ldr	r1, [r6, #0]
 80068d4:	4605      	mov	r5, r0
 80068d6:	b911      	cbnz	r1, 80068de <sbrk_aligned+0x12>
 80068d8:	f000 fe3e 	bl	8007558 <_sbrk_r>
 80068dc:	6030      	str	r0, [r6, #0]
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 fe39 	bl	8007558 <_sbrk_r>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d103      	bne.n	80068f2 <sbrk_aligned+0x26>
 80068ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068ee:	4620      	mov	r0, r4
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	1cc4      	adds	r4, r0, #3
 80068f4:	f024 0403 	bic.w	r4, r4, #3
 80068f8:	42a0      	cmp	r0, r4
 80068fa:	d0f8      	beq.n	80068ee <sbrk_aligned+0x22>
 80068fc:	1a21      	subs	r1, r4, r0
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 fe2a 	bl	8007558 <_sbrk_r>
 8006904:	3001      	adds	r0, #1
 8006906:	d1f2      	bne.n	80068ee <sbrk_aligned+0x22>
 8006908:	e7ef      	b.n	80068ea <sbrk_aligned+0x1e>
 800690a:	bf00      	nop
 800690c:	2000053c 	.word	0x2000053c

08006910 <_malloc_r>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	1ccd      	adds	r5, r1, #3
 8006916:	f025 0503 	bic.w	r5, r5, #3
 800691a:	3508      	adds	r5, #8
 800691c:	2d0c      	cmp	r5, #12
 800691e:	bf38      	it	cc
 8006920:	250c      	movcc	r5, #12
 8006922:	2d00      	cmp	r5, #0
 8006924:	4606      	mov	r6, r0
 8006926:	db01      	blt.n	800692c <_malloc_r+0x1c>
 8006928:	42a9      	cmp	r1, r5
 800692a:	d904      	bls.n	8006936 <_malloc_r+0x26>
 800692c:	230c      	movs	r3, #12
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	2000      	movs	r0, #0
 8006932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a0c <_malloc_r+0xfc>
 800693a:	f000 f869 	bl	8006a10 <__malloc_lock>
 800693e:	f8d8 3000 	ldr.w	r3, [r8]
 8006942:	461c      	mov	r4, r3
 8006944:	bb44      	cbnz	r4, 8006998 <_malloc_r+0x88>
 8006946:	4629      	mov	r1, r5
 8006948:	4630      	mov	r0, r6
 800694a:	f7ff ffbf 	bl	80068cc <sbrk_aligned>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	4604      	mov	r4, r0
 8006952:	d158      	bne.n	8006a06 <_malloc_r+0xf6>
 8006954:	f8d8 4000 	ldr.w	r4, [r8]
 8006958:	4627      	mov	r7, r4
 800695a:	2f00      	cmp	r7, #0
 800695c:	d143      	bne.n	80069e6 <_malloc_r+0xd6>
 800695e:	2c00      	cmp	r4, #0
 8006960:	d04b      	beq.n	80069fa <_malloc_r+0xea>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4639      	mov	r1, r7
 8006966:	4630      	mov	r0, r6
 8006968:	eb04 0903 	add.w	r9, r4, r3
 800696c:	f000 fdf4 	bl	8007558 <_sbrk_r>
 8006970:	4581      	cmp	r9, r0
 8006972:	d142      	bne.n	80069fa <_malloc_r+0xea>
 8006974:	6821      	ldr	r1, [r4, #0]
 8006976:	1a6d      	subs	r5, r5, r1
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ffa6 	bl	80068cc <sbrk_aligned>
 8006980:	3001      	adds	r0, #1
 8006982:	d03a      	beq.n	80069fa <_malloc_r+0xea>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	442b      	add	r3, r5
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	f8d8 3000 	ldr.w	r3, [r8]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	bb62      	cbnz	r2, 80069ec <_malloc_r+0xdc>
 8006992:	f8c8 7000 	str.w	r7, [r8]
 8006996:	e00f      	b.n	80069b8 <_malloc_r+0xa8>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	1b52      	subs	r2, r2, r5
 800699c:	d420      	bmi.n	80069e0 <_malloc_r+0xd0>
 800699e:	2a0b      	cmp	r2, #11
 80069a0:	d917      	bls.n	80069d2 <_malloc_r+0xc2>
 80069a2:	1961      	adds	r1, r4, r5
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	6025      	str	r5, [r4, #0]
 80069a8:	bf18      	it	ne
 80069aa:	6059      	strne	r1, [r3, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	bf08      	it	eq
 80069b0:	f8c8 1000 	streq.w	r1, [r8]
 80069b4:	5162      	str	r2, [r4, r5]
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 f82f 	bl	8006a1c <__malloc_unlock>
 80069be:	f104 000b 	add.w	r0, r4, #11
 80069c2:	1d23      	adds	r3, r4, #4
 80069c4:	f020 0007 	bic.w	r0, r0, #7
 80069c8:	1ac2      	subs	r2, r0, r3
 80069ca:	bf1c      	itt	ne
 80069cc:	1a1b      	subne	r3, r3, r0
 80069ce:	50a3      	strne	r3, [r4, r2]
 80069d0:	e7af      	b.n	8006932 <_malloc_r+0x22>
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	bf0c      	ite	eq
 80069d8:	f8c8 2000 	streq.w	r2, [r8]
 80069dc:	605a      	strne	r2, [r3, #4]
 80069de:	e7eb      	b.n	80069b8 <_malloc_r+0xa8>
 80069e0:	4623      	mov	r3, r4
 80069e2:	6864      	ldr	r4, [r4, #4]
 80069e4:	e7ae      	b.n	8006944 <_malloc_r+0x34>
 80069e6:	463c      	mov	r4, r7
 80069e8:	687f      	ldr	r7, [r7, #4]
 80069ea:	e7b6      	b.n	800695a <_malloc_r+0x4a>
 80069ec:	461a      	mov	r2, r3
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d1fb      	bne.n	80069ec <_malloc_r+0xdc>
 80069f4:	2300      	movs	r3, #0
 80069f6:	6053      	str	r3, [r2, #4]
 80069f8:	e7de      	b.n	80069b8 <_malloc_r+0xa8>
 80069fa:	230c      	movs	r3, #12
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	4630      	mov	r0, r6
 8006a00:	f000 f80c 	bl	8006a1c <__malloc_unlock>
 8006a04:	e794      	b.n	8006930 <_malloc_r+0x20>
 8006a06:	6005      	str	r5, [r0, #0]
 8006a08:	e7d6      	b.n	80069b8 <_malloc_r+0xa8>
 8006a0a:	bf00      	nop
 8006a0c:	20000540 	.word	0x20000540

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff b8a0 	b.w	8005b56 <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000538 	.word	0x20000538

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	@ (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff b89b 	b.w	8005b58 <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000538 	.word	0x20000538

08006a28 <_Balloc>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	69c6      	ldr	r6, [r0, #28]
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	b976      	cbnz	r6, 8006a50 <_Balloc+0x28>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f7ff ff42 	bl	80068bc <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	61e0      	str	r0, [r4, #28]
 8006a3c:	b920      	cbnz	r0, 8006a48 <_Balloc+0x20>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	@ (8006aa0 <_Balloc+0x78>)
 8006a40:	4818      	ldr	r0, [pc, #96]	@ (8006aa4 <_Balloc+0x7c>)
 8006a42:	216b      	movs	r1, #107	@ 0x6b
 8006a44:	f000 fd98 	bl	8007578 <__assert_func>
 8006a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a4c:	6006      	str	r6, [r0, #0]
 8006a4e:	60c6      	str	r6, [r0, #12]
 8006a50:	69e6      	ldr	r6, [r4, #28]
 8006a52:	68f3      	ldr	r3, [r6, #12]
 8006a54:	b183      	cbz	r3, 8006a78 <_Balloc+0x50>
 8006a56:	69e3      	ldr	r3, [r4, #28]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a5e:	b9b8      	cbnz	r0, 8006a90 <_Balloc+0x68>
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f605 	lsl.w	r6, r1, r5
 8006a66:	1d72      	adds	r2, r6, #5
 8006a68:	0092      	lsls	r2, r2, #2
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fda2 	bl	80075b4 <_calloc_r>
 8006a70:	b160      	cbz	r0, 8006a8c <_Balloc+0x64>
 8006a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a76:	e00e      	b.n	8006a96 <_Balloc+0x6e>
 8006a78:	2221      	movs	r2, #33	@ 0x21
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fd99 	bl	80075b4 <_calloc_r>
 8006a82:	69e3      	ldr	r3, [r4, #28]
 8006a84:	60f0      	str	r0, [r6, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <_Balloc+0x2e>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	6802      	ldr	r2, [r0, #0]
 8006a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a96:	2300      	movs	r3, #0
 8006a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a9c:	e7f7      	b.n	8006a8e <_Balloc+0x66>
 8006a9e:	bf00      	nop
 8006aa0:	08007cc5 	.word	0x08007cc5
 8006aa4:	08007d45 	.word	0x08007d45

08006aa8 <_Bfree>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	69c6      	ldr	r6, [r0, #28]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b976      	cbnz	r6, 8006ad0 <_Bfree+0x28>
 8006ab2:	2010      	movs	r0, #16
 8006ab4:	f7ff ff02 	bl	80068bc <malloc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	61e8      	str	r0, [r5, #28]
 8006abc:	b920      	cbnz	r0, 8006ac8 <_Bfree+0x20>
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <_Bfree+0x3c>)
 8006ac0:	4809      	ldr	r0, [pc, #36]	@ (8006ae8 <_Bfree+0x40>)
 8006ac2:	218f      	movs	r1, #143	@ 0x8f
 8006ac4:	f000 fd58 	bl	8007578 <__assert_func>
 8006ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006acc:	6006      	str	r6, [r0, #0]
 8006ace:	60c6      	str	r6, [r0, #12]
 8006ad0:	b13c      	cbz	r4, 8006ae2 <_Bfree+0x3a>
 8006ad2:	69eb      	ldr	r3, [r5, #28]
 8006ad4:	6862      	ldr	r2, [r4, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006adc:	6021      	str	r1, [r4, #0]
 8006ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	08007cc5 	.word	0x08007cc5
 8006ae8:	08007d45 	.word	0x08007d45

08006aec <__multadd>:
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	690d      	ldr	r5, [r1, #16]
 8006af2:	4607      	mov	r7, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	461e      	mov	r6, r3
 8006af8:	f101 0c14 	add.w	ip, r1, #20
 8006afc:	2000      	movs	r0, #0
 8006afe:	f8dc 3000 	ldr.w	r3, [ip]
 8006b02:	b299      	uxth	r1, r3
 8006b04:	fb02 6101 	mla	r1, r2, r1, r6
 8006b08:	0c1e      	lsrs	r6, r3, #16
 8006b0a:	0c0b      	lsrs	r3, r1, #16
 8006b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006b10:	b289      	uxth	r1, r1
 8006b12:	3001      	adds	r0, #1
 8006b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b18:	4285      	cmp	r5, r0
 8006b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b22:	dcec      	bgt.n	8006afe <__multadd+0x12>
 8006b24:	b30e      	cbz	r6, 8006b6a <__multadd+0x7e>
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dc19      	bgt.n	8006b60 <__multadd+0x74>
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4638      	mov	r0, r7
 8006b30:	3101      	adds	r1, #1
 8006b32:	f7ff ff79 	bl	8006a28 <_Balloc>
 8006b36:	4680      	mov	r8, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <__multadd+0x5a>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <__multadd+0x84>)
 8006b3e:	480d      	ldr	r0, [pc, #52]	@ (8006b74 <__multadd+0x88>)
 8006b40:	21ba      	movs	r1, #186	@ 0xba
 8006b42:	f000 fd19 	bl	8007578 <__assert_func>
 8006b46:	6922      	ldr	r2, [r4, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	f104 010c 	add.w	r1, r4, #12
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	300c      	adds	r0, #12
 8006b52:	f7ff f802 	bl	8005b5a <memcpy>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <_Bfree>
 8006b5e:	4644      	mov	r4, r8
 8006b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b64:	3501      	adds	r5, #1
 8006b66:	615e      	str	r6, [r3, #20]
 8006b68:	6125      	str	r5, [r4, #16]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	08007d34 	.word	0x08007d34
 8006b74:	08007d45 	.word	0x08007d45

08006b78 <__hi0bits>:
 8006b78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	bf36      	itet	cc
 8006b80:	0403      	lslcc	r3, r0, #16
 8006b82:	2000      	movcs	r0, #0
 8006b84:	2010      	movcc	r0, #16
 8006b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b8a:	bf3c      	itt	cc
 8006b8c:	021b      	lslcc	r3, r3, #8
 8006b8e:	3008      	addcc	r0, #8
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b94:	bf3c      	itt	cc
 8006b96:	011b      	lslcc	r3, r3, #4
 8006b98:	3004      	addcc	r0, #4
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	bf3c      	itt	cc
 8006ba0:	009b      	lslcc	r3, r3, #2
 8006ba2:	3002      	addcc	r0, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	db05      	blt.n	8006bb4 <__hi0bits+0x3c>
 8006ba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bac:	f100 0001 	add.w	r0, r0, #1
 8006bb0:	bf08      	it	eq
 8006bb2:	2020      	moveq	r0, #32
 8006bb4:	4770      	bx	lr

08006bb6 <__lo0bits>:
 8006bb6:	6803      	ldr	r3, [r0, #0]
 8006bb8:	4602      	mov	r2, r0
 8006bba:	f013 0007 	ands.w	r0, r3, #7
 8006bbe:	d00b      	beq.n	8006bd8 <__lo0bits+0x22>
 8006bc0:	07d9      	lsls	r1, r3, #31
 8006bc2:	d421      	bmi.n	8006c08 <__lo0bits+0x52>
 8006bc4:	0798      	lsls	r0, r3, #30
 8006bc6:	bf49      	itett	mi
 8006bc8:	085b      	lsrmi	r3, r3, #1
 8006bca:	089b      	lsrpl	r3, r3, #2
 8006bcc:	2001      	movmi	r0, #1
 8006bce:	6013      	strmi	r3, [r2, #0]
 8006bd0:	bf5c      	itt	pl
 8006bd2:	6013      	strpl	r3, [r2, #0]
 8006bd4:	2002      	movpl	r0, #2
 8006bd6:	4770      	bx	lr
 8006bd8:	b299      	uxth	r1, r3
 8006bda:	b909      	cbnz	r1, 8006be0 <__lo0bits+0x2a>
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	2010      	movs	r0, #16
 8006be0:	b2d9      	uxtb	r1, r3
 8006be2:	b909      	cbnz	r1, 8006be8 <__lo0bits+0x32>
 8006be4:	3008      	adds	r0, #8
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	0719      	lsls	r1, r3, #28
 8006bea:	bf04      	itt	eq
 8006bec:	091b      	lsreq	r3, r3, #4
 8006bee:	3004      	addeq	r0, #4
 8006bf0:	0799      	lsls	r1, r3, #30
 8006bf2:	bf04      	itt	eq
 8006bf4:	089b      	lsreq	r3, r3, #2
 8006bf6:	3002      	addeq	r0, #2
 8006bf8:	07d9      	lsls	r1, r3, #31
 8006bfa:	d403      	bmi.n	8006c04 <__lo0bits+0x4e>
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	f100 0001 	add.w	r0, r0, #1
 8006c02:	d003      	beq.n	8006c0c <__lo0bits+0x56>
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4770      	bx	lr
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
 8006c0c:	2020      	movs	r0, #32
 8006c0e:	4770      	bx	lr

08006c10 <__i2b>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	2101      	movs	r1, #1
 8006c16:	f7ff ff07 	bl	8006a28 <_Balloc>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	b928      	cbnz	r0, 8006c2a <__i2b+0x1a>
 8006c1e:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <__i2b+0x24>)
 8006c20:	4805      	ldr	r0, [pc, #20]	@ (8006c38 <__i2b+0x28>)
 8006c22:	f240 1145 	movw	r1, #325	@ 0x145
 8006c26:	f000 fca7 	bl	8007578 <__assert_func>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	6144      	str	r4, [r0, #20]
 8006c2e:	6103      	str	r3, [r0, #16]
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	bf00      	nop
 8006c34:	08007d34 	.word	0x08007d34
 8006c38:	08007d45 	.word	0x08007d45

08006c3c <__multiply>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	4617      	mov	r7, r2
 8006c42:	690a      	ldr	r2, [r1, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	bfa8      	it	ge
 8006c4a:	463b      	movge	r3, r7
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	bfa4      	itt	ge
 8006c50:	460f      	movge	r7, r1
 8006c52:	4699      	movge	r9, r3
 8006c54:	693d      	ldr	r5, [r7, #16]
 8006c56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	eb05 060a 	add.w	r6, r5, sl
 8006c62:	42b3      	cmp	r3, r6
 8006c64:	b085      	sub	sp, #20
 8006c66:	bfb8      	it	lt
 8006c68:	3101      	addlt	r1, #1
 8006c6a:	f7ff fedd 	bl	8006a28 <_Balloc>
 8006c6e:	b930      	cbnz	r0, 8006c7e <__multiply+0x42>
 8006c70:	4602      	mov	r2, r0
 8006c72:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <__multiply+0x13c>)
 8006c74:	4841      	ldr	r0, [pc, #260]	@ (8006d7c <__multiply+0x140>)
 8006c76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c7a:	f000 fc7d 	bl	8007578 <__assert_func>
 8006c7e:	f100 0414 	add.w	r4, r0, #20
 8006c82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c86:	4623      	mov	r3, r4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4573      	cmp	r3, lr
 8006c8c:	d320      	bcc.n	8006cd0 <__multiply+0x94>
 8006c8e:	f107 0814 	add.w	r8, r7, #20
 8006c92:	f109 0114 	add.w	r1, r9, #20
 8006c96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c9e:	9302      	str	r3, [sp, #8]
 8006ca0:	1beb      	subs	r3, r5, r7
 8006ca2:	3b15      	subs	r3, #21
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	3304      	adds	r3, #4
 8006caa:	3715      	adds	r7, #21
 8006cac:	42bd      	cmp	r5, r7
 8006cae:	bf38      	it	cc
 8006cb0:	2304      	movcc	r3, #4
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	9103      	str	r1, [sp, #12]
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	d80c      	bhi.n	8006cd6 <__multiply+0x9a>
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	dd03      	ble.n	8006cc8 <__multiply+0x8c>
 8006cc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d055      	beq.n	8006d74 <__multiply+0x138>
 8006cc8:	6106      	str	r6, [r0, #16]
 8006cca:	b005      	add	sp, #20
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd0:	f843 2b04 	str.w	r2, [r3], #4
 8006cd4:	e7d9      	b.n	8006c8a <__multiply+0x4e>
 8006cd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cda:	f1ba 0f00 	cmp.w	sl, #0
 8006cde:	d01f      	beq.n	8006d20 <__multiply+0xe4>
 8006ce0:	46c4      	mov	ip, r8
 8006ce2:	46a1      	mov	r9, r4
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cea:	f8d9 3000 	ldr.w	r3, [r9]
 8006cee:	fa1f fb82 	uxth.w	fp, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cf8:	443b      	add	r3, r7
 8006cfa:	f8d9 7000 	ldr.w	r7, [r9]
 8006cfe:	0c12      	lsrs	r2, r2, #16
 8006d00:	0c3f      	lsrs	r7, r7, #16
 8006d02:	fb0a 7202 	mla	r2, sl, r2, r7
 8006d06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d10:	4565      	cmp	r5, ip
 8006d12:	f849 3b04 	str.w	r3, [r9], #4
 8006d16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006d1a:	d8e4      	bhi.n	8006ce6 <__multiply+0xaa>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	50e7      	str	r7, [r4, r3]
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d26:	3104      	adds	r1, #4
 8006d28:	f1b9 0f00 	cmp.w	r9, #0
 8006d2c:	d020      	beq.n	8006d70 <__multiply+0x134>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	4647      	mov	r7, r8
 8006d32:	46a4      	mov	ip, r4
 8006d34:	f04f 0a00 	mov.w	sl, #0
 8006d38:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d40:	fb09 220b 	mla	r2, r9, fp, r2
 8006d44:	4452      	add	r2, sl
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4c:	f84c 3b04 	str.w	r3, [ip], #4
 8006d50:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d58:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8006d60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d64:	42bd      	cmp	r5, r7
 8006d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d6a:	d8e5      	bhi.n	8006d38 <__multiply+0xfc>
 8006d6c:	9a01      	ldr	r2, [sp, #4]
 8006d6e:	50a3      	str	r3, [r4, r2]
 8006d70:	3404      	adds	r4, #4
 8006d72:	e79f      	b.n	8006cb4 <__multiply+0x78>
 8006d74:	3e01      	subs	r6, #1
 8006d76:	e7a1      	b.n	8006cbc <__multiply+0x80>
 8006d78:	08007d34 	.word	0x08007d34
 8006d7c:	08007d45 	.word	0x08007d45

08006d80 <__pow5mult>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	4615      	mov	r5, r2
 8006d86:	f012 0203 	ands.w	r2, r2, #3
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	d007      	beq.n	8006da0 <__pow5mult+0x20>
 8006d90:	4c25      	ldr	r4, [pc, #148]	@ (8006e28 <__pow5mult+0xa8>)
 8006d92:	3a01      	subs	r2, #1
 8006d94:	2300      	movs	r3, #0
 8006d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d9a:	f7ff fea7 	bl	8006aec <__multadd>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	10ad      	asrs	r5, r5, #2
 8006da2:	d03d      	beq.n	8006e20 <__pow5mult+0xa0>
 8006da4:	69fc      	ldr	r4, [r7, #28]
 8006da6:	b97c      	cbnz	r4, 8006dc8 <__pow5mult+0x48>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7ff fd87 	bl	80068bc <malloc>
 8006dae:	4602      	mov	r2, r0
 8006db0:	61f8      	str	r0, [r7, #28]
 8006db2:	b928      	cbnz	r0, 8006dc0 <__pow5mult+0x40>
 8006db4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e2c <__pow5mult+0xac>)
 8006db6:	481e      	ldr	r0, [pc, #120]	@ (8006e30 <__pow5mult+0xb0>)
 8006db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006dbc:	f000 fbdc 	bl	8007578 <__assert_func>
 8006dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc4:	6004      	str	r4, [r0, #0]
 8006dc6:	60c4      	str	r4, [r0, #12]
 8006dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd0:	b94c      	cbnz	r4, 8006de6 <__pow5mult+0x66>
 8006dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff1a 	bl	8006c10 <__i2b>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de2:	4604      	mov	r4, r0
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	f04f 0900 	mov.w	r9, #0
 8006dea:	07eb      	lsls	r3, r5, #31
 8006dec:	d50a      	bpl.n	8006e04 <__pow5mult+0x84>
 8006dee:	4631      	mov	r1, r6
 8006df0:	4622      	mov	r2, r4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff ff22 	bl	8006c3c <__multiply>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fe53 	bl	8006aa8 <_Bfree>
 8006e02:	4646      	mov	r6, r8
 8006e04:	106d      	asrs	r5, r5, #1
 8006e06:	d00b      	beq.n	8006e20 <__pow5mult+0xa0>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	b938      	cbnz	r0, 8006e1c <__pow5mult+0x9c>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff13 	bl	8006c3c <__multiply>
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	f8c0 9000 	str.w	r9, [r0]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e7e4      	b.n	8006dea <__pow5mult+0x6a>
 8006e20:	4630      	mov	r0, r6
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e26:	bf00      	nop
 8006e28:	08007df8 	.word	0x08007df8
 8006e2c:	08007cc5 	.word	0x08007cc5
 8006e30:	08007d45 	.word	0x08007d45

08006e34 <__lshift>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	6849      	ldr	r1, [r1, #4]
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	4607      	mov	r7, r0
 8006e46:	4691      	mov	r9, r2
 8006e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e4c:	f108 0601 	add.w	r6, r8, #1
 8006e50:	42b3      	cmp	r3, r6
 8006e52:	db0b      	blt.n	8006e6c <__lshift+0x38>
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff fde7 	bl	8006a28 <_Balloc>
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b948      	cbnz	r0, 8006e72 <__lshift+0x3e>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b28      	ldr	r3, [pc, #160]	@ (8006f04 <__lshift+0xd0>)
 8006e62:	4829      	ldr	r0, [pc, #164]	@ (8006f08 <__lshift+0xd4>)
 8006e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e68:	f000 fb86 	bl	8007578 <__assert_func>
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	e7ee      	b.n	8006e50 <__lshift+0x1c>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f100 0114 	add.w	r1, r0, #20
 8006e78:	f100 0210 	add.w	r2, r0, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	4553      	cmp	r3, sl
 8006e80:	db33      	blt.n	8006eea <__lshift+0xb6>
 8006e82:	6920      	ldr	r0, [r4, #16]
 8006e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e88:	f104 0314 	add.w	r3, r4, #20
 8006e8c:	f019 091f 	ands.w	r9, r9, #31
 8006e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e98:	d02b      	beq.n	8006ef2 <__lshift+0xbe>
 8006e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e9e:	468a      	mov	sl, r1
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ea8:	4310      	orrs	r0, r2
 8006eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	459c      	cmp	ip, r3
 8006eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006eb8:	d8f3      	bhi.n	8006ea2 <__lshift+0x6e>
 8006eba:	ebac 0304 	sub.w	r3, ip, r4
 8006ebe:	3b15      	subs	r3, #21
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	f104 0015 	add.w	r0, r4, #21
 8006eca:	4560      	cmp	r0, ip
 8006ecc:	bf88      	it	hi
 8006ece:	2304      	movhi	r3, #4
 8006ed0:	50ca      	str	r2, [r1, r3]
 8006ed2:	b10a      	cbz	r2, 8006ed8 <__lshift+0xa4>
 8006ed4:	f108 0602 	add.w	r6, r8, #2
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	4638      	mov	r0, r7
 8006edc:	612e      	str	r6, [r5, #16]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	f7ff fde2 	bl	8006aa8 <_Bfree>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eee:	3301      	adds	r3, #1
 8006ef0:	e7c5      	b.n	8006e7e <__lshift+0x4a>
 8006ef2:	3904      	subs	r1, #4
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006efc:	459c      	cmp	ip, r3
 8006efe:	d8f9      	bhi.n	8006ef4 <__lshift+0xc0>
 8006f00:	e7ea      	b.n	8006ed8 <__lshift+0xa4>
 8006f02:	bf00      	nop
 8006f04:	08007d34 	.word	0x08007d34
 8006f08:	08007d45 	.word	0x08007d45

08006f0c <__mcmp>:
 8006f0c:	690a      	ldr	r2, [r1, #16]
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6900      	ldr	r0, [r0, #16]
 8006f12:	1a80      	subs	r0, r0, r2
 8006f14:	b530      	push	{r4, r5, lr}
 8006f16:	d10e      	bne.n	8006f36 <__mcmp+0x2a>
 8006f18:	3314      	adds	r3, #20
 8006f1a:	3114      	adds	r1, #20
 8006f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f2c:	4295      	cmp	r5, r2
 8006f2e:	d003      	beq.n	8006f38 <__mcmp+0x2c>
 8006f30:	d205      	bcs.n	8006f3e <__mcmp+0x32>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d3f3      	bcc.n	8006f24 <__mcmp+0x18>
 8006f3c:	e7fb      	b.n	8006f36 <__mcmp+0x2a>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7f9      	b.n	8006f36 <__mcmp+0x2a>
	...

08006f44 <__mdiff>:
 8006f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4689      	mov	r9, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4648      	mov	r0, r9
 8006f50:	4614      	mov	r4, r2
 8006f52:	f7ff ffdb 	bl	8006f0c <__mcmp>
 8006f56:	1e05      	subs	r5, r0, #0
 8006f58:	d112      	bne.n	8006f80 <__mdiff+0x3c>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff fd63 	bl	8006a28 <_Balloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__mdiff+0x2e>
 8006f66:	4b3f      	ldr	r3, [pc, #252]	@ (8007064 <__mdiff+0x120>)
 8006f68:	f240 2137 	movw	r1, #567	@ 0x237
 8006f6c:	483e      	ldr	r0, [pc, #248]	@ (8007068 <__mdiff+0x124>)
 8006f6e:	f000 fb03 	bl	8007578 <__assert_func>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f78:	4610      	mov	r0, r2
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	bfbc      	itt	lt
 8006f82:	464b      	movlt	r3, r9
 8006f84:	46a1      	movlt	r9, r4
 8006f86:	4630      	mov	r0, r6
 8006f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f8c:	bfba      	itte	lt
 8006f8e:	461c      	movlt	r4, r3
 8006f90:	2501      	movlt	r5, #1
 8006f92:	2500      	movge	r5, #0
 8006f94:	f7ff fd48 	bl	8006a28 <_Balloc>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	b918      	cbnz	r0, 8006fa4 <__mdiff+0x60>
 8006f9c:	4b31      	ldr	r3, [pc, #196]	@ (8007064 <__mdiff+0x120>)
 8006f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8006fa2:	e7e3      	b.n	8006f6c <__mdiff+0x28>
 8006fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fa8:	6926      	ldr	r6, [r4, #16]
 8006faa:	60c5      	str	r5, [r0, #12]
 8006fac:	f109 0310 	add.w	r3, r9, #16
 8006fb0:	f109 0514 	add.w	r5, r9, #20
 8006fb4:	f104 0e14 	add.w	lr, r4, #20
 8006fb8:	f100 0b14 	add.w	fp, r0, #20
 8006fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	46d9      	mov	r9, fp
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	fa1f f38a 	uxth.w	r3, sl
 8006fdc:	4619      	mov	r1, r3
 8006fde:	b283      	uxth	r3, r0
 8006fe0:	1acb      	subs	r3, r1, r3
 8006fe2:	0c00      	lsrs	r0, r0, #16
 8006fe4:	4463      	add	r3, ip
 8006fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ff4:	4576      	cmp	r6, lr
 8006ff6:	f849 3b04 	str.w	r3, [r9], #4
 8006ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ffe:	d8e5      	bhi.n	8006fcc <__mdiff+0x88>
 8007000:	1b33      	subs	r3, r6, r4
 8007002:	3b15      	subs	r3, #21
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	3415      	adds	r4, #21
 800700a:	3304      	adds	r3, #4
 800700c:	42a6      	cmp	r6, r4
 800700e:	bf38      	it	cc
 8007010:	2304      	movcc	r3, #4
 8007012:	441d      	add	r5, r3
 8007014:	445b      	add	r3, fp
 8007016:	461e      	mov	r6, r3
 8007018:	462c      	mov	r4, r5
 800701a:	4544      	cmp	r4, r8
 800701c:	d30e      	bcc.n	800703c <__mdiff+0xf8>
 800701e:	f108 0103 	add.w	r1, r8, #3
 8007022:	1b49      	subs	r1, r1, r5
 8007024:	f021 0103 	bic.w	r1, r1, #3
 8007028:	3d03      	subs	r5, #3
 800702a:	45a8      	cmp	r8, r5
 800702c:	bf38      	it	cc
 800702e:	2100      	movcc	r1, #0
 8007030:	440b      	add	r3, r1
 8007032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007036:	b191      	cbz	r1, 800705e <__mdiff+0x11a>
 8007038:	6117      	str	r7, [r2, #16]
 800703a:	e79d      	b.n	8006f78 <__mdiff+0x34>
 800703c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007040:	46e6      	mov	lr, ip
 8007042:	0c08      	lsrs	r0, r1, #16
 8007044:	fa1c fc81 	uxtah	ip, ip, r1
 8007048:	4471      	add	r1, lr
 800704a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800704e:	b289      	uxth	r1, r1
 8007050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007054:	f846 1b04 	str.w	r1, [r6], #4
 8007058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800705c:	e7dd      	b.n	800701a <__mdiff+0xd6>
 800705e:	3f01      	subs	r7, #1
 8007060:	e7e7      	b.n	8007032 <__mdiff+0xee>
 8007062:	bf00      	nop
 8007064:	08007d34 	.word	0x08007d34
 8007068:	08007d45 	.word	0x08007d45

0800706c <__d2b>:
 800706c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007070:	460f      	mov	r7, r1
 8007072:	2101      	movs	r1, #1
 8007074:	ec59 8b10 	vmov	r8, r9, d0
 8007078:	4616      	mov	r6, r2
 800707a:	f7ff fcd5 	bl	8006a28 <_Balloc>
 800707e:	4604      	mov	r4, r0
 8007080:	b930      	cbnz	r0, 8007090 <__d2b+0x24>
 8007082:	4602      	mov	r2, r0
 8007084:	4b23      	ldr	r3, [pc, #140]	@ (8007114 <__d2b+0xa8>)
 8007086:	4824      	ldr	r0, [pc, #144]	@ (8007118 <__d2b+0xac>)
 8007088:	f240 310f 	movw	r1, #783	@ 0x30f
 800708c:	f000 fa74 	bl	8007578 <__assert_func>
 8007090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007098:	b10d      	cbz	r5, 800709e <__d2b+0x32>
 800709a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	f1b8 0300 	subs.w	r3, r8, #0
 80070a4:	d023      	beq.n	80070ee <__d2b+0x82>
 80070a6:	4668      	mov	r0, sp
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	f7ff fd84 	bl	8006bb6 <__lo0bits>
 80070ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070b2:	b1d0      	cbz	r0, 80070ea <__d2b+0x7e>
 80070b4:	f1c0 0320 	rsb	r3, r0, #32
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	430b      	orrs	r3, r1
 80070be:	40c2      	lsrs	r2, r0
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	61a3      	str	r3, [r4, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bf0c      	ite	eq
 80070cc:	2201      	moveq	r2, #1
 80070ce:	2202      	movne	r2, #2
 80070d0:	6122      	str	r2, [r4, #16]
 80070d2:	b1a5      	cbz	r5, 80070fe <__d2b+0x92>
 80070d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070d8:	4405      	add	r5, r0
 80070da:	603d      	str	r5, [r7, #0]
 80070dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070e0:	6030      	str	r0, [r6, #0]
 80070e2:	4620      	mov	r0, r4
 80070e4:	b003      	add	sp, #12
 80070e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ea:	6161      	str	r1, [r4, #20]
 80070ec:	e7ea      	b.n	80070c4 <__d2b+0x58>
 80070ee:	a801      	add	r0, sp, #4
 80070f0:	f7ff fd61 	bl	8006bb6 <__lo0bits>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	3020      	adds	r0, #32
 80070fa:	2201      	movs	r2, #1
 80070fc:	e7e8      	b.n	80070d0 <__d2b+0x64>
 80070fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007106:	6038      	str	r0, [r7, #0]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f7ff fd35 	bl	8006b78 <__hi0bits>
 800710e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007112:	e7e5      	b.n	80070e0 <__d2b+0x74>
 8007114:	08007d34 	.word	0x08007d34
 8007118:	08007d45 	.word	0x08007d45

0800711c <__ssputs_r>:
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	688e      	ldr	r6, [r1, #8]
 8007122:	461f      	mov	r7, r3
 8007124:	42be      	cmp	r6, r7
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	4682      	mov	sl, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4690      	mov	r8, r2
 800712e:	d82d      	bhi.n	800718c <__ssputs_r+0x70>
 8007130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007138:	d026      	beq.n	8007188 <__ssputs_r+0x6c>
 800713a:	6965      	ldr	r5, [r4, #20]
 800713c:	6909      	ldr	r1, [r1, #16]
 800713e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007142:	eba3 0901 	sub.w	r9, r3, r1
 8007146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714a:	1c7b      	adds	r3, r7, #1
 800714c:	444b      	add	r3, r9
 800714e:	106d      	asrs	r5, r5, #1
 8007150:	429d      	cmp	r5, r3
 8007152:	bf38      	it	cc
 8007154:	461d      	movcc	r5, r3
 8007156:	0553      	lsls	r3, r2, #21
 8007158:	d527      	bpl.n	80071aa <__ssputs_r+0x8e>
 800715a:	4629      	mov	r1, r5
 800715c:	f7ff fbd8 	bl	8006910 <_malloc_r>
 8007160:	4606      	mov	r6, r0
 8007162:	b360      	cbz	r0, 80071be <__ssputs_r+0xa2>
 8007164:	6921      	ldr	r1, [r4, #16]
 8007166:	464a      	mov	r2, r9
 8007168:	f7fe fcf7 	bl	8005b5a <memcpy>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	6126      	str	r6, [r4, #16]
 800717a:	6165      	str	r5, [r4, #20]
 800717c:	444e      	add	r6, r9
 800717e:	eba5 0509 	sub.w	r5, r5, r9
 8007182:	6026      	str	r6, [r4, #0]
 8007184:	60a5      	str	r5, [r4, #8]
 8007186:	463e      	mov	r6, r7
 8007188:	42be      	cmp	r6, r7
 800718a:	d900      	bls.n	800718e <__ssputs_r+0x72>
 800718c:	463e      	mov	r6, r7
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	4632      	mov	r2, r6
 8007192:	4641      	mov	r1, r8
 8007194:	f000 f9c6 	bl	8007524 <memmove>
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	1b9b      	subs	r3, r3, r6
 800719c:	60a3      	str	r3, [r4, #8]
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	4433      	add	r3, r6
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	462a      	mov	r2, r5
 80071ac:	f000 fa28 	bl	8007600 <_realloc_r>
 80071b0:	4606      	mov	r6, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1e0      	bne.n	8007178 <__ssputs_r+0x5c>
 80071b6:	6921      	ldr	r1, [r4, #16]
 80071b8:	4650      	mov	r0, sl
 80071ba:	f7ff fb35 	bl	8006828 <_free_r>
 80071be:	230c      	movs	r3, #12
 80071c0:	f8ca 3000 	str.w	r3, [sl]
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071d0:	e7e9      	b.n	80071a6 <__ssputs_r+0x8a>
	...

080071d4 <_svfiprintf_r>:
 80071d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	4698      	mov	r8, r3
 80071da:	898b      	ldrh	r3, [r1, #12]
 80071dc:	061b      	lsls	r3, r3, #24
 80071de:	b09d      	sub	sp, #116	@ 0x74
 80071e0:	4607      	mov	r7, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	d510      	bpl.n	800720a <_svfiprintf_r+0x36>
 80071e8:	690b      	ldr	r3, [r1, #16]
 80071ea:	b973      	cbnz	r3, 800720a <_svfiprintf_r+0x36>
 80071ec:	2140      	movs	r1, #64	@ 0x40
 80071ee:	f7ff fb8f 	bl	8006910 <_malloc_r>
 80071f2:	6028      	str	r0, [r5, #0]
 80071f4:	6128      	str	r0, [r5, #16]
 80071f6:	b930      	cbnz	r0, 8007206 <_svfiprintf_r+0x32>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007200:	b01d      	add	sp, #116	@ 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	2340      	movs	r3, #64	@ 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	@ 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	@ 0x30
 800721a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073b8 <_svfiprintf_r+0x1e4>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x60>
 8007230:	2a25      	cmp	r2, #37	@ 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x54>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7e>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6b 	bl	800711c <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80a7 	beq.w	800739a <_svfiprintf_r+0x1c6>
 800724c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	@ 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 809f 	beq.w	800739a <_svfiprintf_r+0x1c6>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007272:	931a      	str	r3, [sp, #104]	@ 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	484e      	ldr	r0, [pc, #312]	@ (80073b8 <_svfiprintf_r+0x1e4>)
 800727e:	f7f8 ffaf 	bl	80001e0 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xea>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	@ 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xfa>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	@ 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94b      	bls.n	8007350 <_svfiprintf_r+0x17c>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x114>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x114>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0xa0>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ec:	d10a      	bne.n	8007304 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f2:	d132      	bne.n	800735a <_svfiprintf_r+0x186>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007300:	3402      	adds	r4, #2
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073c8 <_svfiprintf_r+0x1f4>
 8007308:	7821      	ldrb	r1, [r4, #0]
 800730a:	2203      	movs	r2, #3
 800730c:	4650      	mov	r0, sl
 800730e:	f7f8 ff67 	bl	80001e0 <memchr>
 8007312:	b138      	cbz	r0, 8007324 <_svfiprintf_r+0x150>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	eba0 000a 	sub.w	r0, r0, sl
 800731a:	2240      	movs	r2, #64	@ 0x40
 800731c:	4082      	lsls	r2, r0
 800731e:	4313      	orrs	r3, r2
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	4824      	ldr	r0, [pc, #144]	@ (80073bc <_svfiprintf_r+0x1e8>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff56 	bl	80001e0 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d036      	beq.n	80073a6 <_svfiprintf_r+0x1d2>
 8007338:	4b21      	ldr	r3, [pc, #132]	@ (80073c0 <_svfiprintf_r+0x1ec>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_svfiprintf_r+0x1b0>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	4433      	add	r3, r6
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	e76a      	b.n	8007226 <_svfiprintf_r+0x52>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a8      	b.n	80072ac <_svfiprintf_r+0xd8>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	@ 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_svfiprintf_r+0x1a6>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c6      	beq.n	8007304 <_svfiprintf_r+0x130>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c4      	b.n	8007304 <_svfiprintf_r+0x130>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_svfiprintf_r+0x192>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <_svfiprintf_r+0x1f0>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4638      	mov	r0, r7
 8007390:	f7fd fe50 	bl	8005034 <_printf_float>
 8007394:	1c42      	adds	r2, r0, #1
 8007396:	4606      	mov	r6, r0
 8007398:	d1d6      	bne.n	8007348 <_svfiprintf_r+0x174>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	065b      	lsls	r3, r3, #25
 800739e:	f53f af2d 	bmi.w	80071fc <_svfiprintf_r+0x28>
 80073a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073a4:	e72c      	b.n	8007200 <_svfiprintf_r+0x2c>
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <_svfiprintf_r+0x1f0>)
 80073ae:	a904      	add	r1, sp, #16
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7fe f8d7 	bl	8005564 <_printf_i>
 80073b6:	e7ed      	b.n	8007394 <_svfiprintf_r+0x1c0>
 80073b8:	08007d9e 	.word	0x08007d9e
 80073bc:	08007da8 	.word	0x08007da8
 80073c0:	08005035 	.word	0x08005035
 80073c4:	0800711d 	.word	0x0800711d
 80073c8:	08007da4 	.word	0x08007da4

080073cc <__sflush_r>:
 80073cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d4:	0716      	lsls	r6, r2, #28
 80073d6:	4605      	mov	r5, r0
 80073d8:	460c      	mov	r4, r1
 80073da:	d454      	bmi.n	8007486 <__sflush_r+0xba>
 80073dc:	684b      	ldr	r3, [r1, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dc02      	bgt.n	80073e8 <__sflush_r+0x1c>
 80073e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd48      	ble.n	800747a <__sflush_r+0xae>
 80073e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	d045      	beq.n	800747a <__sflush_r+0xae>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073f4:	682f      	ldr	r7, [r5, #0]
 80073f6:	6a21      	ldr	r1, [r4, #32]
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	d030      	beq.n	800745e <__sflush_r+0x92>
 80073fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	0759      	lsls	r1, r3, #29
 8007402:	d505      	bpl.n	8007410 <__sflush_r+0x44>
 8007404:	6863      	ldr	r3, [r4, #4]
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800740a:	b10b      	cbz	r3, 8007410 <__sflush_r+0x44>
 800740c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	4628      	mov	r0, r5
 8007418:	47b0      	blx	r6
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	d106      	bne.n	800742e <__sflush_r+0x62>
 8007420:	6829      	ldr	r1, [r5, #0]
 8007422:	291d      	cmp	r1, #29
 8007424:	d82b      	bhi.n	800747e <__sflush_r+0xb2>
 8007426:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <__sflush_r+0x104>)
 8007428:	40ca      	lsrs	r2, r1
 800742a:	07d6      	lsls	r6, r2, #31
 800742c:	d527      	bpl.n	800747e <__sflush_r+0xb2>
 800742e:	2200      	movs	r2, #0
 8007430:	6062      	str	r2, [r4, #4]
 8007432:	04d9      	lsls	r1, r3, #19
 8007434:	6922      	ldr	r2, [r4, #16]
 8007436:	6022      	str	r2, [r4, #0]
 8007438:	d504      	bpl.n	8007444 <__sflush_r+0x78>
 800743a:	1c42      	adds	r2, r0, #1
 800743c:	d101      	bne.n	8007442 <__sflush_r+0x76>
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	b903      	cbnz	r3, 8007444 <__sflush_r+0x78>
 8007442:	6560      	str	r0, [r4, #84]	@ 0x54
 8007444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007446:	602f      	str	r7, [r5, #0]
 8007448:	b1b9      	cbz	r1, 800747a <__sflush_r+0xae>
 800744a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800744e:	4299      	cmp	r1, r3
 8007450:	d002      	beq.n	8007458 <__sflush_r+0x8c>
 8007452:	4628      	mov	r0, r5
 8007454:	f7ff f9e8 	bl	8006828 <_free_r>
 8007458:	2300      	movs	r3, #0
 800745a:	6363      	str	r3, [r4, #52]	@ 0x34
 800745c:	e00d      	b.n	800747a <__sflush_r+0xae>
 800745e:	2301      	movs	r3, #1
 8007460:	4628      	mov	r0, r5
 8007462:	47b0      	blx	r6
 8007464:	4602      	mov	r2, r0
 8007466:	1c50      	adds	r0, r2, #1
 8007468:	d1c9      	bne.n	80073fe <__sflush_r+0x32>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c6      	beq.n	80073fe <__sflush_r+0x32>
 8007470:	2b1d      	cmp	r3, #29
 8007472:	d001      	beq.n	8007478 <__sflush_r+0xac>
 8007474:	2b16      	cmp	r3, #22
 8007476:	d11e      	bne.n	80074b6 <__sflush_r+0xea>
 8007478:	602f      	str	r7, [r5, #0]
 800747a:	2000      	movs	r0, #0
 800747c:	e022      	b.n	80074c4 <__sflush_r+0xf8>
 800747e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007482:	b21b      	sxth	r3, r3
 8007484:	e01b      	b.n	80074be <__sflush_r+0xf2>
 8007486:	690f      	ldr	r7, [r1, #16]
 8007488:	2f00      	cmp	r7, #0
 800748a:	d0f6      	beq.n	800747a <__sflush_r+0xae>
 800748c:	0793      	lsls	r3, r2, #30
 800748e:	680e      	ldr	r6, [r1, #0]
 8007490:	bf08      	it	eq
 8007492:	694b      	ldreq	r3, [r1, #20]
 8007494:	600f      	str	r7, [r1, #0]
 8007496:	bf18      	it	ne
 8007498:	2300      	movne	r3, #0
 800749a:	eba6 0807 	sub.w	r8, r6, r7
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	f1b8 0f00 	cmp.w	r8, #0
 80074a4:	dde9      	ble.n	800747a <__sflush_r+0xae>
 80074a6:	6a21      	ldr	r1, [r4, #32]
 80074a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074aa:	4643      	mov	r3, r8
 80074ac:	463a      	mov	r2, r7
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b0      	blx	r6
 80074b2:	2800      	cmp	r0, #0
 80074b4:	dc08      	bgt.n	80074c8 <__sflush_r+0xfc>
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	4407      	add	r7, r0
 80074ca:	eba8 0800 	sub.w	r8, r8, r0
 80074ce:	e7e7      	b.n	80074a0 <__sflush_r+0xd4>
 80074d0:	20400001 	.word	0x20400001

080074d4 <_fflush_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	690b      	ldr	r3, [r1, #16]
 80074d8:	4605      	mov	r5, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	b913      	cbnz	r3, 80074e4 <_fflush_r+0x10>
 80074de:	2500      	movs	r5, #0
 80074e0:	4628      	mov	r0, r5
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	b118      	cbz	r0, 80074ee <_fflush_r+0x1a>
 80074e6:	6a03      	ldr	r3, [r0, #32]
 80074e8:	b90b      	cbnz	r3, 80074ee <_fflush_r+0x1a>
 80074ea:	f7fe f9e5 	bl	80058b8 <__sinit>
 80074ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f3      	beq.n	80074de <_fflush_r+0xa>
 80074f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074f8:	07d0      	lsls	r0, r2, #31
 80074fa:	d404      	bmi.n	8007506 <_fflush_r+0x32>
 80074fc:	0599      	lsls	r1, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_fflush_r+0x32>
 8007500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007502:	f7fe fb28 	bl	8005b56 <__retarget_lock_acquire_recursive>
 8007506:	4628      	mov	r0, r5
 8007508:	4621      	mov	r1, r4
 800750a:	f7ff ff5f 	bl	80073cc <__sflush_r>
 800750e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007510:	07da      	lsls	r2, r3, #31
 8007512:	4605      	mov	r5, r0
 8007514:	d4e4      	bmi.n	80074e0 <_fflush_r+0xc>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	059b      	lsls	r3, r3, #22
 800751a:	d4e1      	bmi.n	80074e0 <_fflush_r+0xc>
 800751c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800751e:	f7fe fb1b 	bl	8005b58 <__retarget_lock_release_recursive>
 8007522:	e7dd      	b.n	80074e0 <_fflush_r+0xc>

08007524 <memmove>:
 8007524:	4288      	cmp	r0, r1
 8007526:	b510      	push	{r4, lr}
 8007528:	eb01 0402 	add.w	r4, r1, r2
 800752c:	d902      	bls.n	8007534 <memmove+0x10>
 800752e:	4284      	cmp	r4, r0
 8007530:	4623      	mov	r3, r4
 8007532:	d807      	bhi.n	8007544 <memmove+0x20>
 8007534:	1e43      	subs	r3, r0, #1
 8007536:	42a1      	cmp	r1, r4
 8007538:	d008      	beq.n	800754c <memmove+0x28>
 800753a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007542:	e7f8      	b.n	8007536 <memmove+0x12>
 8007544:	4402      	add	r2, r0
 8007546:	4601      	mov	r1, r0
 8007548:	428a      	cmp	r2, r1
 800754a:	d100      	bne.n	800754e <memmove+0x2a>
 800754c:	bd10      	pop	{r4, pc}
 800754e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007556:	e7f7      	b.n	8007548 <memmove+0x24>

08007558 <_sbrk_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	@ (8007574 <_sbrk_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7fa fde6 	bl	8002134 <_sbrk>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_sbrk_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_sbrk_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20000534 	.word	0x20000534

08007578 <__assert_func>:
 8007578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800757a:	4614      	mov	r4, r2
 800757c:	461a      	mov	r2, r3
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <__assert_func+0x2c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4605      	mov	r5, r0
 8007584:	68d8      	ldr	r0, [r3, #12]
 8007586:	b14c      	cbz	r4, 800759c <__assert_func+0x24>
 8007588:	4b07      	ldr	r3, [pc, #28]	@ (80075a8 <__assert_func+0x30>)
 800758a:	9100      	str	r1, [sp, #0]
 800758c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007590:	4906      	ldr	r1, [pc, #24]	@ (80075ac <__assert_func+0x34>)
 8007592:	462b      	mov	r3, r5
 8007594:	f000 f870 	bl	8007678 <fiprintf>
 8007598:	f000 f880 	bl	800769c <abort>
 800759c:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <__assert_func+0x38>)
 800759e:	461c      	mov	r4, r3
 80075a0:	e7f3      	b.n	800758a <__assert_func+0x12>
 80075a2:	bf00      	nop
 80075a4:	20000020 	.word	0x20000020
 80075a8:	08007db9 	.word	0x08007db9
 80075ac:	08007dc6 	.word	0x08007dc6
 80075b0:	08007df4 	.word	0x08007df4

080075b4 <_calloc_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	fba1 5402 	umull	r5, r4, r1, r2
 80075ba:	b934      	cbnz	r4, 80075ca <_calloc_r+0x16>
 80075bc:	4629      	mov	r1, r5
 80075be:	f7ff f9a7 	bl	8006910 <_malloc_r>
 80075c2:	4606      	mov	r6, r0
 80075c4:	b928      	cbnz	r0, 80075d2 <_calloc_r+0x1e>
 80075c6:	4630      	mov	r0, r6
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	220c      	movs	r2, #12
 80075cc:	6002      	str	r2, [r0, #0]
 80075ce:	2600      	movs	r6, #0
 80075d0:	e7f9      	b.n	80075c6 <_calloc_r+0x12>
 80075d2:	462a      	mov	r2, r5
 80075d4:	4621      	mov	r1, r4
 80075d6:	f7fe fa40 	bl	8005a5a <memset>
 80075da:	e7f4      	b.n	80075c6 <_calloc_r+0x12>

080075dc <__ascii_mbtowc>:
 80075dc:	b082      	sub	sp, #8
 80075de:	b901      	cbnz	r1, 80075e2 <__ascii_mbtowc+0x6>
 80075e0:	a901      	add	r1, sp, #4
 80075e2:	b142      	cbz	r2, 80075f6 <__ascii_mbtowc+0x1a>
 80075e4:	b14b      	cbz	r3, 80075fa <__ascii_mbtowc+0x1e>
 80075e6:	7813      	ldrb	r3, [r2, #0]
 80075e8:	600b      	str	r3, [r1, #0]
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	1e10      	subs	r0, r2, #0
 80075ee:	bf18      	it	ne
 80075f0:	2001      	movne	r0, #1
 80075f2:	b002      	add	sp, #8
 80075f4:	4770      	bx	lr
 80075f6:	4610      	mov	r0, r2
 80075f8:	e7fb      	b.n	80075f2 <__ascii_mbtowc+0x16>
 80075fa:	f06f 0001 	mvn.w	r0, #1
 80075fe:	e7f8      	b.n	80075f2 <__ascii_mbtowc+0x16>

08007600 <_realloc_r>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4607      	mov	r7, r0
 8007606:	4614      	mov	r4, r2
 8007608:	460d      	mov	r5, r1
 800760a:	b921      	cbnz	r1, 8007616 <_realloc_r+0x16>
 800760c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	4611      	mov	r1, r2
 8007612:	f7ff b97d 	b.w	8006910 <_malloc_r>
 8007616:	b92a      	cbnz	r2, 8007624 <_realloc_r+0x24>
 8007618:	f7ff f906 	bl	8006828 <_free_r>
 800761c:	4625      	mov	r5, r4
 800761e:	4628      	mov	r0, r5
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	f000 f841 	bl	80076aa <_malloc_usable_size_r>
 8007628:	4284      	cmp	r4, r0
 800762a:	4606      	mov	r6, r0
 800762c:	d802      	bhi.n	8007634 <_realloc_r+0x34>
 800762e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007632:	d8f4      	bhi.n	800761e <_realloc_r+0x1e>
 8007634:	4621      	mov	r1, r4
 8007636:	4638      	mov	r0, r7
 8007638:	f7ff f96a 	bl	8006910 <_malloc_r>
 800763c:	4680      	mov	r8, r0
 800763e:	b908      	cbnz	r0, 8007644 <_realloc_r+0x44>
 8007640:	4645      	mov	r5, r8
 8007642:	e7ec      	b.n	800761e <_realloc_r+0x1e>
 8007644:	42b4      	cmp	r4, r6
 8007646:	4622      	mov	r2, r4
 8007648:	4629      	mov	r1, r5
 800764a:	bf28      	it	cs
 800764c:	4632      	movcs	r2, r6
 800764e:	f7fe fa84 	bl	8005b5a <memcpy>
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff f8e7 	bl	8006828 <_free_r>
 800765a:	e7f1      	b.n	8007640 <_realloc_r+0x40>

0800765c <__ascii_wctomb>:
 800765c:	4603      	mov	r3, r0
 800765e:	4608      	mov	r0, r1
 8007660:	b141      	cbz	r1, 8007674 <__ascii_wctomb+0x18>
 8007662:	2aff      	cmp	r2, #255	@ 0xff
 8007664:	d904      	bls.n	8007670 <__ascii_wctomb+0x14>
 8007666:	228a      	movs	r2, #138	@ 0x8a
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800766e:	4770      	bx	lr
 8007670:	700a      	strb	r2, [r1, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	4770      	bx	lr
	...

08007678 <fiprintf>:
 8007678:	b40e      	push	{r1, r2, r3}
 800767a:	b503      	push	{r0, r1, lr}
 800767c:	4601      	mov	r1, r0
 800767e:	ab03      	add	r3, sp, #12
 8007680:	4805      	ldr	r0, [pc, #20]	@ (8007698 <fiprintf+0x20>)
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	6800      	ldr	r0, [r0, #0]
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	f000 f83f 	bl	800770c <_vfiprintf_r>
 800768e:	b002      	add	sp, #8
 8007690:	f85d eb04 	ldr.w	lr, [sp], #4
 8007694:	b003      	add	sp, #12
 8007696:	4770      	bx	lr
 8007698:	20000020 	.word	0x20000020

0800769c <abort>:
 800769c:	b508      	push	{r3, lr}
 800769e:	2006      	movs	r0, #6
 80076a0:	f000 fa08 	bl	8007ab4 <raise>
 80076a4:	2001      	movs	r0, #1
 80076a6:	f7fa fccd 	bl	8002044 <_exit>

080076aa <_malloc_usable_size_r>:
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	1f18      	subs	r0, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfbc      	itt	lt
 80076b4:	580b      	ldrlt	r3, [r1, r0]
 80076b6:	18c0      	addlt	r0, r0, r3
 80076b8:	4770      	bx	lr

080076ba <__sfputc_r>:
 80076ba:	6893      	ldr	r3, [r2, #8]
 80076bc:	3b01      	subs	r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	b410      	push	{r4}
 80076c2:	6093      	str	r3, [r2, #8]
 80076c4:	da08      	bge.n	80076d8 <__sfputc_r+0x1e>
 80076c6:	6994      	ldr	r4, [r2, #24]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	db01      	blt.n	80076d0 <__sfputc_r+0x16>
 80076cc:	290a      	cmp	r1, #10
 80076ce:	d103      	bne.n	80076d8 <__sfputc_r+0x1e>
 80076d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d4:	f000 b932 	b.w	800793c <__swbuf_r>
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	1c58      	adds	r0, r3, #1
 80076dc:	6010      	str	r0, [r2, #0]
 80076de:	7019      	strb	r1, [r3, #0]
 80076e0:	4608      	mov	r0, r1
 80076e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <__sfputs_r>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	18d5      	adds	r5, r2, r3
 80076f2:	42ac      	cmp	r4, r5
 80076f4:	d101      	bne.n	80076fa <__sfputs_r+0x12>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e007      	b.n	800770a <__sfputs_r+0x22>
 80076fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fe:	463a      	mov	r2, r7
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff ffda 	bl	80076ba <__sfputc_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d1f3      	bne.n	80076f2 <__sfputs_r+0xa>
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800770c <_vfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460d      	mov	r5, r1
 8007712:	b09d      	sub	sp, #116	@ 0x74
 8007714:	4614      	mov	r4, r2
 8007716:	4698      	mov	r8, r3
 8007718:	4606      	mov	r6, r0
 800771a:	b118      	cbz	r0, 8007724 <_vfiprintf_r+0x18>
 800771c:	6a03      	ldr	r3, [r0, #32]
 800771e:	b90b      	cbnz	r3, 8007724 <_vfiprintf_r+0x18>
 8007720:	f7fe f8ca 	bl	80058b8 <__sinit>
 8007724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 8007730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007732:	f7fe fa10 	bl	8005b56 <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x34>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b99b      	cbnz	r3, 8007768 <_vfiprintf_r+0x5c>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f938 	bl	80079b8 <__swsetup_r>
 8007748:	b170      	cbz	r0, 8007768 <_vfiprintf_r+0x5c>
 800774a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d504      	bpl.n	800775a <_vfiprintf_r+0x4e>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007754:	b01d      	add	sp, #116	@ 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	0598      	lsls	r0, r3, #22
 800775e:	d4f7      	bmi.n	8007750 <_vfiprintf_r+0x44>
 8007760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007762:	f7fe f9f9 	bl	8005b58 <__retarget_lock_release_recursive>
 8007766:	e7f3      	b.n	8007750 <_vfiprintf_r+0x44>
 8007768:	2300      	movs	r3, #0
 800776a:	9309      	str	r3, [sp, #36]	@ 0x24
 800776c:	2320      	movs	r3, #32
 800776e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007772:	f8cd 800c 	str.w	r8, [sp, #12]
 8007776:	2330      	movs	r3, #48	@ 0x30
 8007778:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007928 <_vfiprintf_r+0x21c>
 800777c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007780:	f04f 0901 	mov.w	r9, #1
 8007784:	4623      	mov	r3, r4
 8007786:	469a      	mov	sl, r3
 8007788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778c:	b10a      	cbz	r2, 8007792 <_vfiprintf_r+0x86>
 800778e:	2a25      	cmp	r2, #37	@ 0x25
 8007790:	d1f9      	bne.n	8007786 <_vfiprintf_r+0x7a>
 8007792:	ebba 0b04 	subs.w	fp, sl, r4
 8007796:	d00b      	beq.n	80077b0 <_vfiprintf_r+0xa4>
 8007798:	465b      	mov	r3, fp
 800779a:	4622      	mov	r2, r4
 800779c:	4629      	mov	r1, r5
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ffa2 	bl	80076e8 <__sfputs_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	f000 80a7 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ac:	445a      	add	r2, fp
 80077ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80077b0:	f89a 3000 	ldrb.w	r3, [sl]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 809f 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c4:	f10a 0a01 	add.w	sl, sl, #1
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	9307      	str	r3, [sp, #28]
 80077cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80077d2:	4654      	mov	r4, sl
 80077d4:	2205      	movs	r2, #5
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	4853      	ldr	r0, [pc, #332]	@ (8007928 <_vfiprintf_r+0x21c>)
 80077dc:	f7f8 fd00 	bl	80001e0 <memchr>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	b9d8      	cbnz	r0, 800781c <_vfiprintf_r+0x110>
 80077e4:	06d1      	lsls	r1, r2, #27
 80077e6:	bf44      	itt	mi
 80077e8:	2320      	movmi	r3, #32
 80077ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ee:	0713      	lsls	r3, r2, #28
 80077f0:	bf44      	itt	mi
 80077f2:	232b      	movmi	r3, #43	@ 0x2b
 80077f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fe:	d015      	beq.n	800782c <_vfiprintf_r+0x120>
 8007800:	9a07      	ldr	r2, [sp, #28]
 8007802:	4654      	mov	r4, sl
 8007804:	2000      	movs	r0, #0
 8007806:	f04f 0c0a 	mov.w	ip, #10
 800780a:	4621      	mov	r1, r4
 800780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007810:	3b30      	subs	r3, #48	@ 0x30
 8007812:	2b09      	cmp	r3, #9
 8007814:	d94b      	bls.n	80078ae <_vfiprintf_r+0x1a2>
 8007816:	b1b0      	cbz	r0, 8007846 <_vfiprintf_r+0x13a>
 8007818:	9207      	str	r2, [sp, #28]
 800781a:	e014      	b.n	8007846 <_vfiprintf_r+0x13a>
 800781c:	eba0 0308 	sub.w	r3, r0, r8
 8007820:	fa09 f303 	lsl.w	r3, r9, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	46a2      	mov	sl, r4
 800782a:	e7d2      	b.n	80077d2 <_vfiprintf_r+0xc6>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9103      	str	r1, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfbb      	ittet	lt
 8007838:	425b      	neglt	r3, r3
 800783a:	f042 0202 	orrlt.w	r2, r2, #2
 800783e:	9307      	strge	r3, [sp, #28]
 8007840:	9307      	strlt	r3, [sp, #28]
 8007842:	bfb8      	it	lt
 8007844:	9204      	strlt	r2, [sp, #16]
 8007846:	7823      	ldrb	r3, [r4, #0]
 8007848:	2b2e      	cmp	r3, #46	@ 0x2e
 800784a:	d10a      	bne.n	8007862 <_vfiprintf_r+0x156>
 800784c:	7863      	ldrb	r3, [r4, #1]
 800784e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007850:	d132      	bne.n	80078b8 <_vfiprintf_r+0x1ac>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	9203      	str	r2, [sp, #12]
 800785a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800785e:	3402      	adds	r4, #2
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007938 <_vfiprintf_r+0x22c>
 8007866:	7821      	ldrb	r1, [r4, #0]
 8007868:	2203      	movs	r2, #3
 800786a:	4650      	mov	r0, sl
 800786c:	f7f8 fcb8 	bl	80001e0 <memchr>
 8007870:	b138      	cbz	r0, 8007882 <_vfiprintf_r+0x176>
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	eba0 000a 	sub.w	r0, r0, sl
 8007878:	2240      	movs	r2, #64	@ 0x40
 800787a:	4082      	lsls	r2, r0
 800787c:	4313      	orrs	r3, r2
 800787e:	3401      	adds	r4, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007886:	4829      	ldr	r0, [pc, #164]	@ (800792c <_vfiprintf_r+0x220>)
 8007888:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800788c:	2206      	movs	r2, #6
 800788e:	f7f8 fca7 	bl	80001e0 <memchr>
 8007892:	2800      	cmp	r0, #0
 8007894:	d03f      	beq.n	8007916 <_vfiprintf_r+0x20a>
 8007896:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <_vfiprintf_r+0x224>)
 8007898:	bb1b      	cbnz	r3, 80078e2 <_vfiprintf_r+0x1d6>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	3308      	adds	r3, #8
 80078a4:	9303      	str	r3, [sp, #12]
 80078a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a8:	443b      	add	r3, r7
 80078aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ac:	e76a      	b.n	8007784 <_vfiprintf_r+0x78>
 80078ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	2001      	movs	r0, #1
 80078b6:	e7a8      	b.n	800780a <_vfiprintf_r+0xfe>
 80078b8:	2300      	movs	r3, #0
 80078ba:	3401      	adds	r4, #1
 80078bc:	9305      	str	r3, [sp, #20]
 80078be:	4619      	mov	r1, r3
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	4620      	mov	r0, r4
 80078c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ca:	3a30      	subs	r2, #48	@ 0x30
 80078cc:	2a09      	cmp	r2, #9
 80078ce:	d903      	bls.n	80078d8 <_vfiprintf_r+0x1cc>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0c6      	beq.n	8007862 <_vfiprintf_r+0x156>
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	e7c4      	b.n	8007862 <_vfiprintf_r+0x156>
 80078d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078dc:	4604      	mov	r4, r0
 80078de:	2301      	movs	r3, #1
 80078e0:	e7f0      	b.n	80078c4 <_vfiprintf_r+0x1b8>
 80078e2:	ab03      	add	r3, sp, #12
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4b12      	ldr	r3, [pc, #72]	@ (8007934 <_vfiprintf_r+0x228>)
 80078ea:	a904      	add	r1, sp, #16
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7fd fba1 	bl	8005034 <_printf_float>
 80078f2:	4607      	mov	r7, r0
 80078f4:	1c78      	adds	r0, r7, #1
 80078f6:	d1d6      	bne.n	80078a6 <_vfiprintf_r+0x19a>
 80078f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078fa:	07d9      	lsls	r1, r3, #31
 80078fc:	d405      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d402      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 8007904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007906:	f7fe f927 	bl	8005b58 <__retarget_lock_release_recursive>
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	065b      	lsls	r3, r3, #25
 800790e:	f53f af1f 	bmi.w	8007750 <_vfiprintf_r+0x44>
 8007912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007914:	e71e      	b.n	8007754 <_vfiprintf_r+0x48>
 8007916:	ab03      	add	r3, sp, #12
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	462a      	mov	r2, r5
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <_vfiprintf_r+0x228>)
 800791e:	a904      	add	r1, sp, #16
 8007920:	4630      	mov	r0, r6
 8007922:	f7fd fe1f 	bl	8005564 <_printf_i>
 8007926:	e7e4      	b.n	80078f2 <_vfiprintf_r+0x1e6>
 8007928:	08007d9e 	.word	0x08007d9e
 800792c:	08007da8 	.word	0x08007da8
 8007930:	08005035 	.word	0x08005035
 8007934:	080076e9 	.word	0x080076e9
 8007938:	08007da4 	.word	0x08007da4

0800793c <__swbuf_r>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	460e      	mov	r6, r1
 8007940:	4614      	mov	r4, r2
 8007942:	4605      	mov	r5, r0
 8007944:	b118      	cbz	r0, 800794e <__swbuf_r+0x12>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <__swbuf_r+0x12>
 800794a:	f7fd ffb5 	bl	80058b8 <__sinit>
 800794e:	69a3      	ldr	r3, [r4, #24]
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	071a      	lsls	r2, r3, #28
 8007956:	d501      	bpl.n	800795c <__swbuf_r+0x20>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	b943      	cbnz	r3, 800796e <__swbuf_r+0x32>
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f82a 	bl	80079b8 <__swsetup_r>
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x32>
 8007966:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800796a:	4638      	mov	r0, r7
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	1a98      	subs	r0, r3, r2
 8007974:	6963      	ldr	r3, [r4, #20]
 8007976:	b2f6      	uxtb	r6, r6
 8007978:	4283      	cmp	r3, r0
 800797a:	4637      	mov	r7, r6
 800797c:	dc05      	bgt.n	800798a <__swbuf_r+0x4e>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fda7 	bl	80074d4 <_fflush_r>
 8007986:	2800      	cmp	r0, #0
 8007988:	d1ed      	bne.n	8007966 <__swbuf_r+0x2a>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	3b01      	subs	r3, #1
 800798e:	60a3      	str	r3, [r4, #8]
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	701e      	strb	r6, [r3, #0]
 8007998:	6962      	ldr	r2, [r4, #20]
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	429a      	cmp	r2, r3
 800799e:	d004      	beq.n	80079aa <__swbuf_r+0x6e>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d5e1      	bpl.n	800796a <__swbuf_r+0x2e>
 80079a6:	2e0a      	cmp	r6, #10
 80079a8:	d1df      	bne.n	800796a <__swbuf_r+0x2e>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fd91 	bl	80074d4 <_fflush_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0d9      	beq.n	800796a <__swbuf_r+0x2e>
 80079b6:	e7d6      	b.n	8007966 <__swbuf_r+0x2a>

080079b8 <__swsetup_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4b29      	ldr	r3, [pc, #164]	@ (8007a60 <__swsetup_r+0xa8>)
 80079bc:	4605      	mov	r5, r0
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	460c      	mov	r4, r1
 80079c2:	b118      	cbz	r0, 80079cc <__swsetup_r+0x14>
 80079c4:	6a03      	ldr	r3, [r0, #32]
 80079c6:	b90b      	cbnz	r3, 80079cc <__swsetup_r+0x14>
 80079c8:	f7fd ff76 	bl	80058b8 <__sinit>
 80079cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d0:	0719      	lsls	r1, r3, #28
 80079d2:	d422      	bmi.n	8007a1a <__swsetup_r+0x62>
 80079d4:	06da      	lsls	r2, r3, #27
 80079d6:	d407      	bmi.n	80079e8 <__swsetup_r+0x30>
 80079d8:	2209      	movs	r2, #9
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079e6:	e033      	b.n	8007a50 <__swsetup_r+0x98>
 80079e8:	0758      	lsls	r0, r3, #29
 80079ea:	d512      	bpl.n	8007a12 <__swsetup_r+0x5a>
 80079ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ee:	b141      	cbz	r1, 8007a02 <__swsetup_r+0x4a>
 80079f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <__swsetup_r+0x46>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7fe ff15 	bl	8006828 <_free_r>
 80079fe:	2300      	movs	r3, #0
 8007a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a08:	81a3      	strh	r3, [r4, #12]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f043 0308 	orr.w	r3, r3, #8
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	b94b      	cbnz	r3, 8007a32 <__swsetup_r+0x7a>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d003      	beq.n	8007a32 <__swsetup_r+0x7a>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f883 	bl	8007b38 <__smakebuf_r>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	f013 0201 	ands.w	r2, r3, #1
 8007a3a:	d00a      	beq.n	8007a52 <__swsetup_r+0x9a>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60a2      	str	r2, [r4, #8]
 8007a40:	6962      	ldr	r2, [r4, #20]
 8007a42:	4252      	negs	r2, r2
 8007a44:	61a2      	str	r2, [r4, #24]
 8007a46:	6922      	ldr	r2, [r4, #16]
 8007a48:	b942      	cbnz	r2, 8007a5c <__swsetup_r+0xa4>
 8007a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a4e:	d1c5      	bne.n	80079dc <__swsetup_r+0x24>
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	0799      	lsls	r1, r3, #30
 8007a54:	bf58      	it	pl
 8007a56:	6962      	ldrpl	r2, [r4, #20]
 8007a58:	60a2      	str	r2, [r4, #8]
 8007a5a:	e7f4      	b.n	8007a46 <__swsetup_r+0x8e>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e7f7      	b.n	8007a50 <__swsetup_r+0x98>
 8007a60:	20000020 	.word	0x20000020

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007aac:	4620      	mov	r0, r4
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	20000020 	.word	0x20000020

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	@ (8007ae4 <_kill_r+0x20>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7fa faa7 	bl	8002024 <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000534 	.word	0x20000534

08007ae8 <_getpid_r>:
 8007ae8:	f7fa ba94 	b.w	8002014 <_getpid>

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	b096      	sub	sp, #88	@ 0x58
 8007af8:	4615      	mov	r5, r2
 8007afa:	461e      	mov	r6, r3
 8007afc:	da0d      	bge.n	8007b1a <__swhatbuf_r+0x2e>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b04:	f04f 0100 	mov.w	r1, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2340      	movne	r3, #64	@ 0x40
 8007b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b10:	2000      	movs	r0, #0
 8007b12:	6031      	str	r1, [r6, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	b016      	add	sp, #88	@ 0x58
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f000 f848 	bl	8007bb0 <_fstat_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dbec      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b2e:	4259      	negs	r1, r3
 8007b30:	4159      	adcs	r1, r3
 8007b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b36:	e7eb      	b.n	8007b10 <__swhatbuf_r+0x24>

08007b38 <__smakebuf_r>:
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3c:	079d      	lsls	r5, r3, #30
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	d507      	bpl.n	8007b54 <__smakebuf_r+0x1c>
 8007b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	b003      	add	sp, #12
 8007b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	466a      	mov	r2, sp
 8007b58:	f7ff ffc8 	bl	8007aec <__swhatbuf_r>
 8007b5c:	9f00      	ldr	r7, [sp, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4639      	mov	r1, r7
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7fe fed4 	bl	8006910 <_malloc_r>
 8007b68:	b948      	cbnz	r0, 8007b7e <__smakebuf_r+0x46>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d4ee      	bmi.n	8007b50 <__smakebuf_r+0x18>
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	f043 0302 	orr.w	r3, r3, #2
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	e7e2      	b.n	8007b44 <__smakebuf_r+0xc>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	6020      	str	r0, [r4, #0]
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b8e:	b15b      	cbz	r3, 8007ba8 <__smakebuf_r+0x70>
 8007b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 f81d 	bl	8007bd4 <_isatty_r>
 8007b9a:	b128      	cbz	r0, 8007ba8 <__smakebuf_r+0x70>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	431d      	orrs	r5, r3
 8007bac:	81a5      	strh	r5, [r4, #12]
 8007bae:	e7cf      	b.n	8007b50 <__smakebuf_r+0x18>

08007bb0 <_fstat_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	@ (8007bd0 <_fstat_r+0x20>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7fa fa91 	bl	80020e4 <_fstat>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_fstat_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_fstat_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000534 	.word	0x20000534

08007bd4 <_isatty_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d06      	ldr	r5, [pc, #24]	@ (8007bf0 <_isatty_r+0x1c>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7fa fa90 	bl	8002104 <_isatty>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_isatty_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_isatty_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20000534 	.word	0x20000534

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr
