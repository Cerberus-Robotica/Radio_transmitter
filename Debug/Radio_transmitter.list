
Radio_transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007a60  08007a60  00008a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e4c  08007e4c  000091dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e4c  08007e4c  00008e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e54  08007e54  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e58  08007e58  00008e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007e5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  08008038  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08008038  000094fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8d7  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eaa  00000000  00000000  00014ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00016990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087a  00000000  00000000  000174b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176e4  00000000  00000000  00017d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8b2  00000000  00000000  0002f40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b857  00000000  00000000  0003acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f1c  00000000  00000000  000c655c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ca478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a44 	.word	0x08007a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007a44 	.word	0x08007a44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2180      	movs	r1, #128	@ 0x80
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <csn_high+0x14>)
 8000eee:	f001 fc77 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <csn_low>:

void csn_low(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <csn_low+0x14>)
 8000f06:	f001 fc6b 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020400 	.word	0x40020400

08000f14 <ce_high>:

void ce_high(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <ce_high+0x14>)
 8000f1e:	f001 fc5f 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400

08000f2c <ce_low>:

void ce_low(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2140      	movs	r1, #64	@ 0x40
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <ce_low+0x14>)
 8000f36:	f001 fc53 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020400 	.word	0x40020400

08000f44 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000f5e:	f7ff ffcd 	bl	8000efc <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000f62:	f107 010f 	add.w	r1, r7, #15
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <nrf24_w_reg+0x4c>)
 8000f6e:	f002 f932 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <nrf24_w_reg+0x4c>)
 8000f7e:	f002 f92a 	bl	80031d6 <HAL_SPI_Transmit>

	csn_high();
 8000f82:	f7ff ffaf 	bl	8000ee4 <csn_high>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002e8 	.word	0x200002e8

08000f94 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000fac:	f7ff ffa6 	bl	8000efc <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fb0:	f107 010f 	add.w	r1, r7, #15
 8000fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <nrf24_r_reg+0x4c>)
 8000fbc:	f002 f90b 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 010e 	add.w	r1, r7, #14
 8000fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <nrf24_r_reg+0x4c>)
 8000fce:	f002 fa46 	bl	800345e <HAL_SPI_Receive>

	csn_high();
 8000fd2:	f7ff ff87 	bl	8000ee4 <csn_high>

	return data;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002e8 	.word	0x200002e8

08000fe4 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <nrf24_w_spec_cmd+0x20>)
 8000ff8:	f002 f8ed 	bl	80031d6 <HAL_SPI_Transmit>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e8 	.word	0x200002e8

08001008 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffbd 	bl	8000f94 <nrf24_r_reg>
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ff88 	bl	8000f44 <nrf24_w_reg>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 800104a:	2101      	movs	r1, #1
 800104c:	2006      	movs	r0, #6
 800104e:	f7ff ffa1 	bl	8000f94 <nrf24_r_reg>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b25a      	sxtb	r2, r3
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001074:	f107 030f 	add.w	r3, r7, #15
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff ff61 	bl	8000f44 <nrf24_w_reg>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8001098:	2101      	movs	r1, #1
 800109a:	2006      	movs	r0, #6
 800109c:	f7ff ff7a 	bl	8000f94 <nrf24_r_reg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e007      	b.n	80010d0 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d104      	bne.n	80010d0 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	2006      	movs	r0, #6
 80010da:	f7ff ff33 	bl	8000f44 <nrf24_w_reg>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	2005      	movs	r0, #5
 80010f8:	f7ff ff24 	bl	8000f44 <nrf24_w_reg>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 800110c:	2205      	movs	r2, #5
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2010      	movs	r0, #16
 8001112:	f7ff ff17 	bl	8000f44 <nrf24_w_reg>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	2b20      	cmp	r3, #32
 8001134:	d901      	bls.n	800113a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8001136:	2320      	movs	r3, #32
 8001138:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d839      	bhi.n	80011b4 <nrf24_pipe_pld_size+0x94>
 8001140:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <nrf24_pipe_pld_size+0x28>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001161 	.word	0x08001161
 800114c:	0800116f 	.word	0x0800116f
 8001150:	0800117d 	.word	0x0800117d
 8001154:	0800118b 	.word	0x0800118b
 8001158:	08001199 	.word	0x08001199
 800115c:	080011a7 	.word	0x080011a7
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2011      	movs	r0, #17
 8001168:	f7ff feec 	bl	8000f44 <nrf24_w_reg>

		break;
 800116c:	e022      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	2012      	movs	r0, #18
 8001176:	f7ff fee5 	bl	8000f44 <nrf24_w_reg>

		break;
 800117a:	e01b      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff fede 	bl	8000f44 <nrf24_w_reg>

		break;
 8001188:	e014      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	2014      	movs	r0, #20
 8001192:	f7ff fed7 	bl	8000f44 <nrf24_w_reg>

		break;
 8001196:	e00d      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	2015      	movs	r0, #21
 80011a0:	f7ff fed0 	bl	8000f44 <nrf24_w_reg>

		break;
 80011a4:	e006      	b.n	80011b4 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	2201      	movs	r2, #1
 80011aa:	4619      	mov	r1, r3
 80011ac:	2016      	movs	r0, #22
 80011ae:	f7ff fec9 	bl	8000f44 <nrf24_w_reg>

		break;
 80011b2:	bf00      	nop
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fee0 	bl	8000f94 <nrf24_r_reg>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d850      	bhi.n	8001280 <nrf24_open_rx_pipe+0xc4>
 80011de:	a201      	add	r2, pc, #4	@ (adr r2, 80011e4 <nrf24_open_rx_pipe+0x28>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001213 	.word	0x08001213
 80011ec:	08001229 	.word	0x08001229
 80011f0:	0800123f 	.word	0x0800123f
 80011f4:	08001255 	.word	0x08001255
 80011f8:	0800126b 	.word	0x0800126b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 80011fc:	2205      	movs	r2, #5
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	200a      	movs	r0, #10
 8001202:	f7ff fe9f 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
		break;
 8001210:	e036      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8001212:	2205      	movs	r2, #5
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	200b      	movs	r0, #11
 8001218:	f7ff fe94 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73fb      	strb	r3, [r7, #15]
		break;
 8001226:	e02b      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	200c      	movs	r0, #12
 800122e:	f7ff fe89 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	73fb      	strb	r3, [r7, #15]
		break;
 800123c:	e020      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	200d      	movs	r0, #13
 8001244:	f7ff fe7e 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
		break;
 8001252:	e015      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	200e      	movs	r0, #14
 800125a:	f7ff fe73 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73fb      	strb	r3, [r7, #15]
		break;
 8001268:	e00a      	b.n	8001280 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fe68 	bl	8000f44 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	b2db      	uxtb	r3, r3
 800127c:	73fb      	strb	r3, [r7, #15]
		break;
 800127e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8001280:	f107 030f 	add.w	r3, r7, #15
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff fe5b 	bl	8000f44 <nrf24_w_reg>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop

08001298 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fe72 	bl	8000f94 <nrf24_r_reg>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 030c 	bic.w	r3, r3, #12
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80012de:	f107 030f 	add.w	r3, r7, #15
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fe2c 	bl	8000f44 <nrf24_w_reg>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	3b02      	subs	r3, #2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff fe19 	bl	8000f44 <nrf24_w_reg>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
	csn_low();
 800131e:	f7ff fded 	bl	8000efc <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8001322:	20e1      	movs	r0, #225	@ 0xe1
 8001324:	f7ff fe5e 	bl	8000fe4 <nrf24_w_spec_cmd>
	csn_high();
 8001328:	f7ff fddc 	bl	8000ee4 <csn_high>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	csn_low();
 8001334:	f7ff fde2 	bl	8000efc <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8001338:	20e2      	movs	r0, #226	@ 0xe2
 800133a:	f7ff fe53 	bl	8000fe4 <nrf24_w_spec_cmd>
	csn_high();
 800133e:	f7ff fdd1 	bl	8000ee4 <csn_high>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8001352:	23ff      	movs	r3, #255	@ 0xff
 8001354:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8001356:	f7ff fdd1 	bl	8000efc <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	1db9      	adds	r1, r7, #6
 800135e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <nrf24_r_status+0x34>)
 8001368:	f002 f992 	bl	8003690 <HAL_SPI_TransmitReceive>
	csn_high();
 800136c:	f7ff fdba 	bl	8000ee4 <csn_high>

	return data;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200002e8 	.word	0x200002e8

08001380 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800138a:	f7ff ffdd 	bl	8001348 <nrf24_r_status>
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001398:	b2db      	uxtb	r3, r3
 800139a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff fdce 	bl	8000f44 <nrf24_w_reg>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80013ba:	f7ff ffc5 	bl	8001348 <nrf24_r_status>
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	2007      	movs	r0, #7
 80013d4:	f7ff fdb6 	bl	8000f44 <nrf24_w_reg>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80013ea:	f7ff ffad 	bl	8001348 <nrf24_r_status>
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fd9e 	bl	8000f44 <nrf24_w_reg>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fdb9 	bl	8000f94 <nrf24_r_reg>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fd84 	bl	8000f44 <nrf24_w_reg>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800144e:	2101      	movs	r1, #1
 8001450:	201d      	movs	r0, #29
 8001452:	f7ff fd9f 	bl	8000f94 <nrf24_r_reg>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e004      	b.n	8001476 <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	b2db      	uxtb	r3, r3
 8001474:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8001476:	f107 030f 	add.w	r3, r7, #15
 800147a:	2201      	movs	r2, #1
 800147c:	4619      	mov	r1, r3
 800147e:	201d      	movs	r0, #29
 8001480:	f7ff fd60 	bl	8000f44 <nrf24_w_reg>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8001496:	2101      	movs	r1, #1
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fd7b 	bl	8000f94 <nrf24_r_reg>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]

	if(ack){
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <nrf24_auto_ack_all+0x22>
		enaa = 63;
 80014a8:	233f      	movs	r3, #63	@ 0x3f
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 80014b2:	f107 030f 	add.w	r3, r7, #15
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fd42 	bl	8000f44 <nrf24_w_reg>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80014d2:	2101      	movs	r1, #1
 80014d4:	201d      	movs	r0, #29
 80014d6:	f7ff fd5d 	bl	8000f94 <nrf24_r_reg>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]

	if(en){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e004      	b.n	80014fa <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f023 0302 	bic.w	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80014fa:	f107 030f 	add.w	r3, r7, #15
 80014fe:	2201      	movs	r2, #1
 8001500:	4619      	mov	r1, r3
 8001502:	201d      	movs	r0, #29
 8001504:	f7ff fd1e 	bl	8000f44 <nrf24_w_reg>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800151a:	2101      	movs	r1, #1
 800151c:	2004      	movs	r0, #4
 800151e:	f7ff fd39 	bl	8000f94 <nrf24_r_reg>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	b25a      	sxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25b      	sxtb	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001544:	f107 030f 	add.w	r3, r7, #15
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fcf9 	bl	8000f44 <nrf24_w_reg>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8001564:	2101      	movs	r1, #1
 8001566:	2004      	movs	r0, #4
 8001568:	f7ff fd14 	bl	8000f94 <nrf24_r_reg>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f023 030f 	bic.w	r3, r3, #15
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fcd9 	bl	8000f44 <nrf24_w_reg>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80015a8:	f7ff fcc0 	bl	8000f2c <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80015ac:	23a0      	movs	r3, #160	@ 0xa0
 80015ae:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80015b0:	f7ff fca4 	bl	8000efc <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80015b4:	f107 010f 	add.w	r1, r7, #15
 80015b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015bc:	2201      	movs	r2, #1
 80015be:	4813      	ldr	r0, [pc, #76]	@ (800160c <nrf24_transmit+0x70>)
 80015c0:	f001 fe09 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <nrf24_transmit+0x70>)
 80015d0:	f001 fe01 	bl	80031d6 <HAL_SPI_Transmit>
	csn_high();
 80015d4:	f7ff fc86 	bl	8000ee4 <csn_high>

	ce_high();
 80015d8:	f7ff fc9c 	bl	8000f14 <ce_high>
	HAL_Delay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f000 fdb3 	bl	8002148 <HAL_Delay>
	ce_low();
 80015e2:	f7ff fca3 	bl	8000f2c <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 80015e6:	f7ff feaf 	bl	8001348 <nrf24_r_status>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 80015f4:	f7ff fef4 	bl	80013e0 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 80015f8:	f7ff fe8f 	bl	800131a <nrf24_flush_tx>
		return 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <nrf24_transmit+0x66>
	}

	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002e8 	.word	0x200002e8

08001610 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 8001614:	f7ff fcf8 	bl	8001008 <nrf24_pwr_up>

	nrf24_flush_tx();
 8001618:	f7ff fe7f 	bl	800131a <nrf24_flush_tx>
	nrf24_flush_rx();
 800161c:	f7ff fe88 	bl	8001330 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 8001620:	f7ff feae 	bl	8001380 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8001624:	f7ff fec4 	bl	80013b0 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8001628:	f7ff feda 	bl	80013e0 <nrf24_clear_max_rt>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <processa_pacote>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t usart_rx[sizeof(Pacote) + 2];
Pacote pacote_recebido;
void processa_pacote(uint8_t* buffer) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    if (buffer[0] == 0xAA && buffer[1] == 0xBB) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2baa      	cmp	r3, #170	@ 0xaa
 800163e:	d123      	bne.n	8001688 <processa_pacote+0x58>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2bbb      	cmp	r3, #187	@ 0xbb
 8001648:	d11e      	bne.n	8001688 <processa_pacote+0x58>
        memcpy(&pacote_recebido, &buffer[2], sizeof(Pacote));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	1c9a      	adds	r2, r3, #2
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <processa_pacote+0x60>)
 8001650:	4614      	mov	r4, r2
 8001652:	6820      	ldr	r0, [r4, #0]
 8001654:	6861      	ldr	r1, [r4, #4]
 8001656:	68a2      	ldr	r2, [r4, #8]
 8001658:	c307      	stmia	r3!, {r0, r1, r2}
 800165a:	89a2      	ldrh	r2, [r4, #12]
 800165c:	801a      	strh	r2, [r3, #0]
        memcpy(&pct_robo[pacote_recebido.id], &buffer[2], sizeof(Pacote));
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <processa_pacote+0x60>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <processa_pacote+0x64>)
 800166e:	1898      	adds	r0, r3, r2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3302      	adds	r3, #2
 8001674:	220e      	movs	r2, #14
 8001676:	4619      	mov	r1, r3
 8001678:	f004 f995 	bl	80059a6 <memcpy>
        pendente[pacote_recebido.id] = 1;
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <processa_pacote+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <processa_pacote+0x68>)
 8001684:	2101      	movs	r1, #1
 8001686:	5499      	strb	r1, [r3, r2]
    }
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000398 	.word	0x20000398
 8001694:	200001f8 	.word	0x200001f8
 8001698:	200002d8 	.word	0x200002d8

0800169c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_UART_RxCpltCallback+0x2c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d107      	bne.n	80016be <HAL_UART_RxCpltCallback+0x22>
        processa_pacote(usart_rx);
 80016ae:	4807      	ldr	r0, [pc, #28]	@ (80016cc <HAL_UART_RxCpltCallback+0x30>)
 80016b0:	f7ff ffbe 	bl	8001630 <processa_pacote>
        HAL_UART_Receive_IT(&huart1, usart_rx, sizeof(usart_rx));  // reinicia recepção
 80016b4:	2210      	movs	r2, #16
 80016b6:	4905      	ldr	r1, [pc, #20]	@ (80016cc <HAL_UART_RxCpltCallback+0x30>)
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <HAL_UART_RxCpltCallback+0x34>)
 80016ba:	f002 fbb0 	bl	8003e1e <HAL_UART_Receive_IT>
    }
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40011000 	.word	0x40011000
 80016cc:	20000388 	.word	0x20000388
 80016d0:	20000340 	.word	0x20000340

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d8:	b0bd      	sub	sp, #244	@ 0xf4
 80016da:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 fcc2 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f9a6 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f000 fa6c 	bl	8001bc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016e8:	f000 fa0a 	bl	8001b00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016ec:	f000 fa3e 	bl	8001b6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ce_high();
 80016f0:	f7ff fc10 	bl	8000f14 <ce_high>

  HAL_Delay(5);
 80016f4:	2005      	movs	r0, #5
 80016f6:	f000 fd27 	bl	8002148 <HAL_Delay>

  ce_low();
 80016fa:	f7ff fc17 	bl	8000f2c <ce_low>

  nrf24_init();
 80016fe:	f7ff ff87 	bl	8001610 <nrf24_init>

  nrf24_auto_ack_all(auto_ack);
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fec2 	bl	800148c <nrf24_auto_ack_all>
  nrf24_en_ack_pld(disable);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fedd 	bl	80014c8 <nrf24_en_ack_pld>
  nrf24_dpl(disable);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fe98 	bl	8001444 <nrf24_dpl>

  nrf24_tx_pwr(_0dbm);
 8001714:	2003      	movs	r0, #3
 8001716:	f7ff fc91 	bl	800103c <nrf24_tx_pwr>
  nrf24_data_rate(_1mbps);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fcb5 	bl	800108a <nrf24_data_rate>
  nrf24_set_channel(channel);
 8001720:	4bb9      	ldr	r3, [pc, #740]	@ (8001a08 <main+0x334>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fcde 	bl	80010e6 <nrf24_set_channel>
  nrf24_set_addr_width(5);
 800172a:	2005      	movs	r0, #5
 800172c:	f7ff fde2 	bl	80012f4 <nrf24_set_addr_width>

  nrf24_pipe_pld_size(0, pld_size);
 8001730:	4bb6      	ldr	r3, [pc, #728]	@ (8001a0c <main+0x338>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fcf2 	bl	8001120 <nrf24_pipe_pld_size>
  nrf24_set_crc(en_crc, _1byte);
 800173c:	2100      	movs	r1, #0
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fdaa 	bl	8001298 <nrf24_set_crc>

  nrf24_auto_retr_delay(4);
 8001744:	2004      	movs	r0, #4
 8001746:	f7ff fee3 	bl	8001510 <nrf24_auto_retr_delay>
  nrf24_auto_retr_limit(10);
 800174a:	200a      	movs	r0, #10
 800174c:	f7ff ff05 	bl	800155a <nrf24_auto_retr_limit>

  nrf24_open_tx_pipe(addr);
 8001750:	48af      	ldr	r0, [pc, #700]	@ (8001a10 <main+0x33c>)
 8001752:	f7ff fcd7 	bl	8001104 <nrf24_open_tx_pipe>
  nrf24_open_rx_pipe(0, addr);
 8001756:	49ae      	ldr	r1, [pc, #696]	@ (8001a10 <main+0x33c>)
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fd2f 	bl	80011bc <nrf24_open_rx_pipe>

  nrf24_stop_listen();
 800175e:	f7ff fe57 	bl	8001410 <nrf24_stop_listen>


  ce_high();
 8001762:	f7ff fbd7 	bl	8000f14 <ce_high>
  HAL_Delay(5);
 8001766:	2005      	movs	r0, #5
 8001768:	f000 fcee 	bl	8002148 <HAL_Delay>

  char welcome_msg[] = "STM32 Blue Pill com CubeIDE a postos!\r\n";
 800176c:	4ba9      	ldr	r3, [pc, #676]	@ (8001a14 <main+0x340>)
 800176e:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001780:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t*)welcome_msg, strlen(welcome_msg), 100); // 100ms de timeout
 8001784:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd79 	bl	8000280 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001796:	2364      	movs	r3, #100	@ 0x64
 8001798:	489f      	ldr	r0, [pc, #636]	@ (8001a18 <main+0x344>)
 800179a:	f002 fab5 	bl	8003d08 <HAL_UART_Transmit>

  for (int i = 0; i < 16; i++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80017a4:	e047      	b.n	8001836 <main+0x162>
      pct_robo[i].id = i;
 80017a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017aa:	b2d8      	uxtb	r0, r3
 80017ac:	499b      	ldr	r1, [pc, #620]	@ (8001a1c <main+0x348>)
 80017ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	440b      	add	r3, r1
 80017bc:	4602      	mov	r2, r0
 80017be:	701a      	strb	r2, [r3, #0]
      pct_robo[i].Vx = 0;
 80017c0:	4996      	ldr	r1, [pc, #600]	@ (8001a1c <main+0x348>)
 80017c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	3301      	adds	r3, #1
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      pct_robo[i].Vy = 0;
 80017d8:	4990      	ldr	r1, [pc, #576]	@ (8001a1c <main+0x348>)
 80017da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	440b      	add	r3, r1
 80017e8:	3305      	adds	r3, #5
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
      pct_robo[i].Vang = 0;
 80017f0:	498a      	ldr	r1, [pc, #552]	@ (8001a1c <main+0x348>)
 80017f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	440b      	add	r3, r1
 8001800:	3308      	adds	r3, #8
 8001802:	3301      	adds	r3, #1
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
      pct_robo[i].kicker = 0;
 800180a:	4984      	ldr	r1, [pc, #528]	@ (8001a1c <main+0x348>)
 800180c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	440b      	add	r3, r1
 800181a:	330d      	adds	r3, #13
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
      pendente[i] = 0;
 8001820:	4a7f      	ldr	r2, [pc, #508]	@ (8001a20 <main+0x34c>)
 8001822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001826:	4413      	add	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 16; i++) {
 800182c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001830:	3301      	adds	r3, #1
 8001832:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800183a:	2b0f      	cmp	r3, #15
 800183c:	ddb3      	ble.n	80017a6 <main+0xd2>
  }


  HAL_UART_Receive_IT(&huart1, usart_rx, sizeof(usart_rx));  // primeira chamada
 800183e:	2210      	movs	r2, #16
 8001840:	4978      	ldr	r1, [pc, #480]	@ (8001a24 <main+0x350>)
 8001842:	4875      	ldr	r0, [pc, #468]	@ (8001a18 <main+0x344>)
 8001844:	f002 faeb 	bl	8003e1e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8001848:	466b      	mov	r3, sp
 800184a:	461e      	mov	r6, r3

	  uint8_t tx_buffer[pld_size];
 800184c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a0c <main+0x338>)
 800184e:	7819      	ldrb	r1, [r3, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	3b01      	subs	r3, #1
 8001854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001858:	b2cb      	uxtb	r3, r1
 800185a:	2200      	movs	r2, #0
 800185c:	4698      	mov	r8, r3
 800185e:	4691      	mov	r9, r2
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001874:	b2cb      	uxtb	r3, r1
 8001876:	2200      	movs	r2, #0
 8001878:	469a      	mov	sl, r3
 800187a:	4693      	mov	fp, r2
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800188c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001890:	460b      	mov	r3, r1
 8001892:	3307      	adds	r3, #7
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	ebad 0d03 	sub.w	sp, sp, r3
 800189c:	ab08      	add	r3, sp, #32
 800189e:	3300      	adds	r3, #0
 80018a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	  char tx_usart_buffer[64];
	  char msg[64];
	  for (int i = 0; i < 16 ; i++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018aa:	e0a6      	b.n	80019fa <main+0x326>
		  if (pendente[i]){
 80018ac:	4a5c      	ldr	r2, [pc, #368]	@ (8001a20 <main+0x34c>)
 80018ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 809a 	beq.w	80019f0 <main+0x31c>
			  memcpy(tx_buffer, &pct_robo[i], sizeof(Pacote));
 80018bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4a54      	ldr	r2, [pc, #336]	@ (8001a1c <main+0x348>)
 80018ca:	4413      	add	r3, r2
 80018cc:	220e      	movs	r2, #14
 80018ce:	4619      	mov	r1, r3
 80018d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80018d4:	f004 f867 	bl	80059a6 <memcpy>
			  sprintf(tx_usart_buffer, "\nPacote enviado para robo %d\n", i);
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80018e0:	4951      	ldr	r1, [pc, #324]	@ (8001a28 <main+0x354>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 ff7a 	bl	80057dc <siprintf>
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
					   pct_robo[i].id,
 80018e8:	494c      	ldr	r1, [pc, #304]	@ (8001a1c <main+0x348>)
 80018ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
 80018fa:	617b      	str	r3, [r7, #20]
					   pct_robo[i].Vx,
 80018fc:	4947      	ldr	r1, [pc, #284]	@ (8001a1c <main+0x348>)
 80018fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	f8d3 3001 	ldr.w	r3, [r3, #1]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe21 	bl	8000558 <__aeabi_f2d>
 8001916:	e9c7 0102 	strd	r0, r1, [r7, #8]
					   pct_robo[i].Vy,
 800191a:	4940      	ldr	r1, [pc, #256]	@ (8001a1c <main+0x348>)
 800191c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	f8d3 3005 	ldr.w	r3, [r3, #5]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe12 	bl	8000558 <__aeabi_f2d>
 8001934:	e9c7 0100 	strd	r0, r1, [r7]
					   pct_robo[i].Vang,
 8001938:	4938      	ldr	r1, [pc, #224]	@ (8001a1c <main+0x348>)
 800193a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	440b      	add	r3, r1
 8001948:	3308      	adds	r3, #8
 800194a:	f8d3 3001 	ldr.w	r3, [r3, #1]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe02 	bl	8000558 <__aeabi_f2d>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
					   pct_robo[i].kicker);
 8001958:	4930      	ldr	r1, [pc, #192]	@ (8001a1c <main+0x348>)
 800195a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	330d      	adds	r3, #13
 800196a:	781b      	ldrb	r3, [r3, #0]
			  snprintf(msg, sizeof(msg), "%d %.2f %.2f %.2f %d\r\n",
 800196c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001970:	9306      	str	r3, [sp, #24]
 8001972:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001976:	ed97 7b00 	vldr	d7, [r7]
 800197a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800197e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001982:	ed8d 7b00 	vstr	d7, [sp]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <main+0x358>)
 800198a:	2140      	movs	r1, #64	@ 0x40
 800198c:	f003 fef0 	bl	8005770 <sniprintf>

			  if (nrf24_transmit(tx_buffer, pld_size)) {
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <main+0x338>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800199a:	f7ff fdff 	bl	800159c <nrf24_transmit>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <main+0x312>
				  HAL_UART_Transmit(&huart1, (uint8_t*)tx_usart_buffer, strlen(tx_usart_buffer), 100);
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc69 	bl	8000280 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f107 0118 	add.w	r1, r7, #24
 80019b6:	2364      	movs	r3, #100	@ 0x64
 80019b8:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <main+0x344>)
 80019ba:	f002 f9a5 	bl	8003d08 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80019be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc5c 	bl	8000280 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80019d0:	2364      	movs	r3, #100	@ 0x64
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <main+0x344>)
 80019d4:	f002 f998 	bl	8003d08 <HAL_UART_Transmit>
				  pendente[i] = 0;
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <main+0x34c>)
 80019da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019de:	4413      	add	r3, r2
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e004      	b.n	80019f0 <main+0x31c>
			  }
			  else {
				  i--;	//nao sei, resolveu, ele simplesmente nao transmite os pares sem isso. deve ser bobeira
 80019e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  for (int i = 0; i < 16 ; i++){
 80019f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019f4:	3301      	adds	r3, #1
 80019f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80019fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f77f af54 	ble.w	80018ac <main+0x1d8>
 8001a04:	46b5      	mov	sp, r6
  {
 8001a06:	e71f      	b.n	8001848 <main+0x174>
 8001a08:	20000005 	.word	0x20000005
 8001a0c:	20000006 	.word	0x20000006
 8001a10:	20000000 	.word	0x20000000
 8001a14:	08007a98 	.word	0x08007a98
 8001a18:	20000340 	.word	0x20000340
 8001a1c:	200001f8 	.word	0x200001f8
 8001a20:	200002d8 	.word	0x200002d8
 8001a24:	20000388 	.word	0x20000388
 8001a28:	08007a60 	.word	0x08007a60
 8001a2c:	08007a80 	.word	0x08007a80

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	@ 0x50
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	2230      	movs	r2, #48	@ 0x30
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 ff31 	bl	80058a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <SystemClock_Config+0xc8>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <SystemClock_Config+0xc8>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <SystemClock_Config+0xc8>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <SystemClock_Config+0xcc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a20      	ldr	r2, [pc, #128]	@ (8001afc <SystemClock_Config+0xcc>)
 8001a7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <SystemClock_Config+0xcc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a94:	2310      	movs	r3, #16
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001aa4:	2350      	movs	r3, #80	@ 0x50
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fead 	bl	8002814 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac0:	f000 f8ce 	bl	8001c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 f90f 	bl	8002d04 <HAL_RCC_ClockConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001aec:	f000 f8b8 	bl	8001c60 <Error_Handler>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3750      	adds	r7, #80	@ 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MX_SPI1_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b34:	2218      	movs	r2, #24
 8001b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b52:	f001 fab7 	bl	80030c4 <HAL_SPI_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b5c:	f000 f880 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200002e8 	.word	0x200002e8
 8001b68:	40013000 	.word	0x40013000

08001b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <MX_USART1_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	f002 f860 	bl	8003c68 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f857 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000340 	.word	0x20000340
 8001bbc:	40011000 	.word	0x40011000

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_GPIO_Init+0x98>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	21c0      	movs	r1, #192	@ 0xc0
 8001c2e:	480b      	ldr	r0, [pc, #44]	@ (8001c5c <MX_GPIO_Init+0x9c>)
 8001c30:	f000 fdd6 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <MX_GPIO_Init+0x9c>)
 8001c4c:	f000 fc44 	bl	80024d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <Error_Handler+0x8>

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_SPI_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23e0      	movs	r3, #224	@ 0xe0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d26:	2305      	movs	r3, #5
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_SPI_MspInit+0x8c>)
 8001d32:	f000 fbd1 	bl	80024d8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013000 	.word	0x40013000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_UART_MspInit+0x94>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d134      	bne.n	8001dd8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_UART_MspInit+0x98>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001da6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db8:	2307      	movs	r3, #7
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <HAL_UART_MspInit+0x9c>)
 8001dc4:	f000 fb88 	bl	80024d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2025      	movs	r0, #37	@ 0x25
 8001dce:	f000 faba 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd2:	2025      	movs	r0, #37	@ 0x25
 8001dd4:	f000 fad3 	bl	800237e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40011000 	.word	0x40011000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <NMI_Handler+0x4>

08001df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <MemManage_Handler+0x4>

08001e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f961 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <USART1_IRQHandler+0x10>)
 8001e52:	f002 f809 	bl	8003e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000340 	.word	0x20000340

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e7a:	f003 fd67 	bl	800594c <__errno>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2216      	movs	r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
  return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffe7 	bl	8001e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea2:	bf00      	nop
 8001ea4:	e7fd      	b.n	8001ea2 <_exit+0x12>

08001ea6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e00a      	b.n	8001ece <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb8:	f3af 8000 	nop.w
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	60ba      	str	r2, [r7, #8]
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbf0      	blt.n	8001eb8 <_read+0x12>
  }

  return len;
 8001ed6:	687b      	ldr	r3, [r7, #4]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e009      	b.n	8001f06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbf1      	blt.n	8001ef2 <_write+0x12>
  }
  return len;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_close>:

int _close(int file)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f40:	605a      	str	r2, [r3, #4]
  return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_isatty>:

int _isatty(int file)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f003 fccc 	bl	800594c <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20020000 	.word	0x20020000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	200003a8 	.word	0x200003a8
 8001fe8:	20000500 	.word	0x20000500

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002014:	f7ff ffea 	bl	8001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480c      	ldr	r0, [pc, #48]	@ (800204c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201a:	490d      	ldr	r1, [pc, #52]	@ (8002050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002030:	4c0a      	ldr	r4, [pc, #40]	@ (800205c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203e:	f003 fc8b 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7ff fb47 	bl	80016d4 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002054:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 8002058:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800205c:	200004fc 	.word	0x200004fc

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f94f 	bl	8002330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fde8 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f967 	bl	800239a <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020e4:	f000 f92f 	bl	8002346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	@ (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000010 	.word	0x20000010
 8002104:	2000000c 	.word	0x2000000c

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000010 	.word	0x20000010
 800212c:	200003ac 	.word	0x200003ac

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	200003ac 	.word	0x200003ac

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000010 	.word	0x20000010

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db0b      	blt.n	800221e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4907      	ldr	r1, [pc, #28]	@ (800222c <__NVIC_EnableIRQ+0x38>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2001      	movs	r0, #1
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000e100 	.word	0xe000e100

08002230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0a      	blt.n	800225a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	490c      	ldr	r1, [pc, #48]	@ (800227c <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	440b      	add	r3, r1
 8002254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002258:	e00a      	b.n	8002270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4908      	ldr	r1, [pc, #32]	@ (8002280 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	440b      	add	r3, r1
 800226e:	761a      	strb	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f1c3 0307 	rsb	r3, r3, #7
 800229e:	2b04      	cmp	r3, #4
 80022a0:	bf28      	it	cs
 80022a2:	2304      	movcs	r3, #4
 80022a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d902      	bls.n	80022b4 <NVIC_EncodePriority+0x30>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3b03      	subs	r3, #3
 80022b2:	e000      	b.n	80022b6 <NVIC_EncodePriority+0x32>
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	401a      	ands	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43d9      	mvns	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	4313      	orrs	r3, r2
         );
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	@ 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022fc:	d301      	bcc.n	8002302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fe:	2301      	movs	r3, #1
 8002300:	e00f      	b.n	8002322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <SysTick_Config+0x40>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230a:	210f      	movs	r1, #15
 800230c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002310:	f7ff ff8e 	bl	8002230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <SysTick_Config+0x40>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	@ (800232c <SysTick_Config+0x40>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	e000e010 	.word	0xe000e010

08002330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff29 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002358:	f7ff ff3e 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 800235c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff8e 	bl	8002284 <NVIC_EncodePriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff5d 	bl	8002230 <__NVIC_SetPriority>
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff31 	bl	80021f4 <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffa2 	bl	80022ec <SysTick_Config>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff feb6 	bl	8002130 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d008      	beq.n	80023e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2280      	movs	r2, #128	@ 0x80
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e052      	b.n	800248a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0216 	bic.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_DMA_Abort+0x62>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0208 	bic.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002434:	e013      	b.n	800245e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fe7b 	bl	8002130 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d90c      	bls.n	800245e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e015      	b.n	800248a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e4      	bne.n	8002436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	223f      	movs	r2, #63	@ 0x3f
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d004      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e00c      	b.n	80024ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2205      	movs	r2, #5
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e159      	b.n	80027a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	f040 8148 	bne.w	80027a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d005      	beq.n	800252a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	2b02      	cmp	r3, #2
 8002528:	d130      	bne.n	800258c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0201 	and.w	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b03      	cmp	r3, #3
 8002596:	d017      	beq.n	80025c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d123      	bne.n	800261c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a2 	beq.w	80027a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b57      	ldr	r3, [pc, #348]	@ (80027c0 <HAL_GPIO_Init+0x2e8>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	4a56      	ldr	r2, [pc, #344]	@ (80027c0 <HAL_GPIO_Init+0x2e8>)
 8002668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800266c:	6453      	str	r3, [r2, #68]	@ 0x44
 800266e:	4b54      	ldr	r3, [pc, #336]	@ (80027c0 <HAL_GPIO_Init+0x2e8>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267a:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_GPIO_Init+0x2ec>)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a49      	ldr	r2, [pc, #292]	@ (80027c8 <HAL_GPIO_Init+0x2f0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x202>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <HAL_GPIO_Init+0x2f4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x1fe>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a47      	ldr	r2, [pc, #284]	@ (80027d0 <HAL_GPIO_Init+0x2f8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x1fa>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a46      	ldr	r2, [pc, #280]	@ (80027d4 <HAL_GPIO_Init+0x2fc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x1f6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a45      	ldr	r2, [pc, #276]	@ (80027d8 <HAL_GPIO_Init+0x300>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x1f2>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x204>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x204>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x204>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x204>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x204>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	@ (80027c4 <HAL_GPIO_Init+0x2ec>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <HAL_GPIO_Init+0x304>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a2f      	ldr	r2, [pc, #188]	@ (80027dc <HAL_GPIO_Init+0x304>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <HAL_GPIO_Init+0x304>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a24      	ldr	r2, [pc, #144]	@ (80027dc <HAL_GPIO_Init+0x304>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_GPIO_Init+0x304>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_GPIO_Init+0x304>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <HAL_GPIO_Init+0x304>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a0f      	ldr	r2, [pc, #60]	@ (80027dc <HAL_GPIO_Init+0x304>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f aea2 	bls.w	80024f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	@ 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40013c00 	.word	0x40013c00

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e267      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002832:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e242      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fc30 	bl	8002130 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fc2c 	bl	8002130 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e207      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fc1c 	bl	8002130 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fc18 	bl	8002130 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800292a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff fbd1 	bl	8002130 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff fbcd 	bl	8002130 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff fbb0 	bl	8002130 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff fbac 	bl	8002130 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e187      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fb90 	bl	8002130 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb8c 	bl	8002130 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e167      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fb79 	bl	8002130 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7ff fb75 	bl	8002130 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b81      	ldr	r3, [pc, #516]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a7c      	ldr	r2, [pc, #496]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b77      	ldr	r3, [pc, #476]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b74      	ldr	r3, [pc, #464]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fb35 	bl	8002130 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7ff fb31 	bl	8002130 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b64      	ldr	r3, [pc, #400]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b5f      	ldr	r3, [pc, #380]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b12:	4b5c      	ldr	r3, [pc, #368]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	4a5b      	ldr	r2, [pc, #364]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	4a57      	ldr	r2, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2c:	4b55      	ldr	r3, [pc, #340]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a54      	ldr	r2, [pc, #336]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7ff faf6 	bl	8002130 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff faf2 	bl	8002130 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fae0 	bl	8002130 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7ff fadc 	bl	8002130 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a1 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d141      	bne.n	8002c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fab0 	bl	8002130 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff faac 	bl	8002130 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	491b      	ldr	r1, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff fa85 	bl	8002130 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff fa81 	bl	8002130 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e05c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x416>
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fa6e 	bl	8002130 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff fa6a 	bl	8002130 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e045      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7ff f99c 	bl	8002130 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7ff f998 	bl	8002130 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f8fc 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08007ac0 	.word	0x08007ac0
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b090      	sub	sp, #64	@ 0x40
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80a1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x16c>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e09b      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f08:	e09b      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f0e:	e098      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d028      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4b47      	ldr	r3, [pc, #284]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f3c:	fb03 f201 	mul.w	r2, r3, r1
 8002f40:	2300      	movs	r3, #0
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	4a43      	ldr	r2, [pc, #268]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f50:	460a      	mov	r2, r1
 8002f52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f56:	4413      	add	r3, r2
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f6a:	f7fd fe25 	bl	8000bb8 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f76:	e053      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4b35      	ldr	r3, [pc, #212]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	617a      	str	r2, [r7, #20]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f8a:	f04f 0b00 	mov.w	fp, #0
 8002f8e:	4652      	mov	r2, sl
 8002f90:	465b      	mov	r3, fp
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	0159      	lsls	r1, r3, #5
 8002f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa0:	0150      	lsls	r0, r2, #5
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8002faa:	eb63 090b 	sbc.w	r9, r3, fp
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8002fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	00eb      	lsls	r3, r5, #3
 8002fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd8:	00e2      	lsls	r2, r4, #3
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
 8002fde:	eb14 030a 	adds.w	r3, r4, sl
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	eb45 030b 	adc.w	r3, r5, fp
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	2200      	movs	r2, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003014:	f7fd fdd0 	bl	8000bb8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003044:	4618      	mov	r0, r3
 8003046:	3740      	adds	r7, #64	@ 0x40
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	017d7840 	.word	0x017d7840

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000008 	.word	0x20000008

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08007ad0 	.word	0x08007ad0

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08007ad0 	.word	0x08007ad0

080030c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07b      	b.n	80031ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e6:	d009      	beq.n	80030fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
 80030ee:	e005      	b.n	80030fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fdd0 	bl	8001cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003132:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0104 	and.w	r1, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	f003 0210 	and.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe ffa3 	bl	8002130 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e12a      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x36>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e122      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x48>
 800321a:	2302      	movs	r3, #2
 800321c:	e11b      	b.n	8003456 <HAL_SPI_Transmit+0x280>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b4:	d152      	bne.n	800335c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xee>
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d145      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e032      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800331c:	e018      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe ff07 	bl	8002130 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x160>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x166>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e082      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1c7      	bne.n	80032ea <HAL_SPI_Transmit+0x114>
 800335a:	e053      	b.n	8003404 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_SPI_Transmit+0x194>
 8003364:	8b7b      	ldrh	r3, [r7, #26]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d147      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003390:	e033      	b.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d113      	bne.n	80033c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033c6:	e018      	b.n	80033fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c8:	f7fe feb2 	bl	8002130 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d803      	bhi.n	80033e0 <HAL_SPI_Transmit+0x20a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_Transmit+0x210>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e02d      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1c6      	bne.n	8003392 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fbd9 	bl	8003bc0 <SPI_EndRxTxTransaction>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003454:	2300      	movs	r3, #0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e104      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Receive+0x2c>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0fc      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003496:	d112      	bne.n	80034be <HAL_SPI_Receive+0x60>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10e      	bne.n	80034be <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2204      	movs	r2, #4
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8eb 	bl	8003690 <HAL_SPI_TransmitReceive>
 80034ba:	4603      	mov	r3, r0
 80034bc:	e0e4      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034be:	f7fe fe37 	bl	8002130 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_Receive+0x74>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0da      	b.n	8003688 <HAL_SPI_Receive+0x22a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2204      	movs	r2, #4
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003520:	d10f      	bne.n	8003542 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d007      	beq.n	8003560 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d170      	bne.n	800364a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003568:	e035      	b.n	80035d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d115      	bne.n	80035a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f103 020c 	add.w	r2, r3, #12
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a2:	e018      	b.n	80035d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a4:	f7fe fdc4 	bl	8002130 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d803      	bhi.n	80035bc <HAL_SPI_Receive+0x15e>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ba:	d102      	bne.n	80035c2 <HAL_SPI_Receive+0x164>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e058      	b.n	8003688 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1c4      	bne.n	800356a <HAL_SPI_Receive+0x10c>
 80035e0:	e038      	b.n	8003654 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d113      	bne.n	8003618 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fa:	b292      	uxth	r2, r2
 80035fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	1c9a      	adds	r2, r3, #2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003616:	e018      	b.n	800364a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003618:	f7fe fd8a 	bl	8002130 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d803      	bhi.n	8003630 <HAL_SPI_Receive+0x1d2>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Receive+0x1d8>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e01e      	b.n	8003688 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1c6      	bne.n	80035e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa4b 	bl	8003af4 <SPI_EndRxTransaction>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800369e:	2301      	movs	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a2:	f7fe fd45 	bl	8002130 <HAL_GetTick>
 80036a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d00c      	beq.n	80036da <HAL_SPI_TransmitReceive+0x4a>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c6:	d106      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x46>
 80036d0:	7ffb      	ldrb	r3, [r7, #31]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d001      	beq.n	80036da <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e17f      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x5c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x5c>
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e174      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x6e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e16d      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b04      	cmp	r3, #4
 8003710:	d003      	beq.n	800371a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d007      	beq.n	800376e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003776:	d17e      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_TransmitReceive+0xf6>
 8003780:	8afb      	ldrh	r3, [r7, #22]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d16c      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037aa:	e059      	b.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11b      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d113      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x1a4>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003830:	2301      	movs	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003834:	f7fe fc7c 	bl	8002130 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003840:	429a      	cmp	r2, r3
 8003842:	d80d      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800384a:	d009      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0bc      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a0      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x11c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d19b      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x11c>
 8003874:	e082      	b.n	800397c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x1f4>
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d171      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e05d      	b.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d11c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d114      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d119      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x2a6>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d014      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003936:	f7fe fbfb 	bl	8002130 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_TransmitReceive+0x2be>
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800394c:	d102      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2c4>
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e038      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d19c      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x21c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d197      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f91d 	bl	8003bc0 <SPI_EndRxTxTransaction>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01d      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3728      	adds	r7, #40	@ 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f4:	f7fe fb9c 	bl	8002130 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a04:	f7fe fb94 	bl	8002130 <HAL_GetTick>
 8003a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	015b      	lsls	r3, r3, #5
 8003a10:	0d1b      	lsrs	r3, r3, #20
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	e055      	b.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a22:	d051      	beq.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a24:	f7fe fb84 	bl	8002130 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d902      	bls.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13d      	bne.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a52:	d111      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5c:	d004      	beq.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a66:	d107      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a80:	d10f      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e018      	b.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e002      	b.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d19a      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000008 	.word	0x20000008

08003af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b08:	d111      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d004      	beq.n	8003b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d107      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b36:	d12a      	bne.n	8003b8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b40:	d012      	beq.n	8003b68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ff49 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02d      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e026      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2101      	movs	r1, #1
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff ff36 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01a      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e013      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2101      	movs	r1, #1
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff ff23 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e000      	b.n	8003bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ff04 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e032      	b.n	8003c58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <SPI_EndRxTxTransaction+0xa0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <SPI_EndRxTxTransaction+0xa4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0d5b      	lsrs	r3, r3, #21
 8003bfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c10:	d112      	bne.n	8003c38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	@ 0x80
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fee1 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e00f      	b.n	8003c58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b80      	cmp	r3, #128	@ 0x80
 8003c50:	d0f2      	beq.n	8003c38 <SPI_EndRxTxTransaction+0x78>
 8003c52:	e000      	b.n	8003c56 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c54:	bf00      	nop
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000008 	.word	0x20000008
 8003c64:	165e9f81 	.word	0x165e9f81

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe f85c 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	@ 0x24
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fdd3 	bl	8004858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d175      	bne.n	8003e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Transmit+0x2c>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e06e      	b.n	8003e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	@ 0x21
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d46:	f7fe f9f3 	bl	8002130 <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d60:	d108      	bne.n	8003d74 <HAL_UART_Transmit+0x6c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e003      	b.n	8003d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7c:	e02e      	b.n	8003ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fb37 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e03a      	b.n	8003e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3302      	adds	r3, #2
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	e007      	b.n	8003dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1cb      	bne.n	8003d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2140      	movs	r1, #64	@ 0x40
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fb03 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e006      	b.n	8003e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d112      	bne.n	8003e5e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Receive_IT+0x26>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e00b      	b.n	8003e60 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fb2a 	bl	80044ae <UART_Start_Receive_IT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	e000      	b.n	8003e60 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_UART_IRQHandler+0x66>
 8003eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fc07 	bl	80046da <UART_Receive_IT>
      return;
 8003ecc:	e273      	b.n	80043b6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80de 	beq.w	8004094 <HAL_UART_IRQHandler+0x22c>
 8003ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80d1 	beq.w	8004094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xae>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xd2>
 8003f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xf6>
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <HAL_UART_IRQHandler+0x126>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0208 	orr.w	r2, r3, #8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 820a 	beq.w	80043ac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x14e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fb92 	bl	80046da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x17a>
 8003fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04f      	beq.n	8004082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa9d 	bl	8004522 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d141      	bne.n	800407a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800400c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800402e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800403a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1d9      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404e:	4a8a      	ldr	r2, [pc, #552]	@ (8004278 <HAL_UART_IRQHandler+0x410>)
 8004050:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fa1b 	bl	8002492 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00e      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9ac 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e00a      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9a8 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e006      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9a4 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800408e:	e18d      	b.n	80043ac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	bf00      	nop
    return;
 8004092:	e18b      	b.n	80043ac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 8167 	bne.w	800436c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8160 	beq.w	800436c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8159 	beq.w	800436c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	f040 80ce 	bne.w	800427c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a9 	beq.w	8004248 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040fe:	429a      	cmp	r2, r3
 8004100:	f080 80a2 	bcs.w	8004248 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800410a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004116:	f000 8088 	beq.w	800422a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800414a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004152:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1d9      	bne.n	800411a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800418a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800418e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800419c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e1      	bne.n	8004166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800420c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800420e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800421a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e3      	bne.n	80041e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f8c4 	bl	80023b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8cf 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004246:	e0b3      	b.n	80043b0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800424c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004250:	429a      	cmp	r2, r3
 8004252:	f040 80ad 	bne.w	80043b0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004260:	f040 80a6 	bne.w	80043b0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8b7 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004276:	e09b      	b.n	80043b0 <HAL_UART_IRQHandler+0x548>
 8004278:	080045e9 	.word	0x080045e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 808e 	beq.w	80043b4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8089 	beq.w	80043b4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e3      	bne.n	80042da <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	617b      	str	r3, [r7, #20]
   return(result);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e3      	bne.n	8004320 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800435e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f83d 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800436a:	e023      	b.n	80043b4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_UART_IRQHandler+0x524>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f940 	bl	800460a <UART_Transmit_IT>
    return;
 800438a:	e014      	b.n	80043b6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <HAL_UART_IRQHandler+0x54e>
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f980 	bl	80046aa <UART_EndTransmit_IT>
    return;
 80043aa:	e004      	b.n	80043b6 <HAL_UART_IRQHandler+0x54e>
    return;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043b4:	bf00      	nop
  }
}
 80043b6:	37e8      	adds	r7, #232	@ 0xe8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440c:	e03b      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004414:	d037      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004416:	f7fd fe8b 	bl	8002130 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <UART_WaitOnFlagUntilTimeout+0x30>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e03a      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d023      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b80      	cmp	r3, #128	@ 0x80
 8004442:	d020      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d01d      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b08      	cmp	r3, #8
 8004456:	d116      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f857 	bl	8004522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2208      	movs	r2, #8
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00f      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d0b4      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2222      	movs	r2, #34	@ 0x22
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0220 	orr.w	r2, r2, #32
 8004512:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004522:	b480      	push	{r7}
 8004524:	b095      	sub	sp, #84	@ 0x54
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800454a:	643a      	str	r2, [r7, #64]	@ 0x40
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e5      	bne.n	800452a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	61fb      	str	r3, [r7, #28]
   return(result);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	2b01      	cmp	r3, #1
 8004598:	d119      	bne.n	80045ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f023 0310 	bic.w	r3, r3, #16
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ba:	61ba      	str	r2, [r7, #24]
 80045bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	613b      	str	r3, [r7, #16]
   return(result);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e5      	bne.n	800459a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045dc:	bf00      	nop
 80045de:	3754      	adds	r7, #84	@ 0x54
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fee7 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b21      	cmp	r3, #33	@ 0x21
 800461c:	d13e      	bne.n	800469c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004626:	d114      	bne.n	8004652 <UART_Transmit_IT+0x48>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d110      	bne.n	8004652 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]
 8004650:	e008      	b.n	8004664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6211      	str	r1, [r2, #32]
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29b      	uxth	r3, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4619      	mov	r1, r3
 8004672:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fe76 	bl	80043bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b08c      	sub	sp, #48	@ 0x30
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b22      	cmp	r3, #34	@ 0x22
 80046f4:	f040 80aa 	bne.w	800484c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004700:	d115      	bne.n	800472e <UART_Receive_IT+0x54>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d111      	bne.n	800472e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	b29a      	uxth	r2, r3
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
 800472c:	e024      	b.n	8004778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473c:	d007      	beq.n	800474e <UART_Receive_IT+0x74>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <UART_Receive_IT+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e008      	b.n	800476e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29b      	uxth	r3, r3
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004788:	2b00      	cmp	r3, #0
 800478a:	d15d      	bne.n	8004848 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0220 	bic.w	r2, r2, #32
 800479a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d135      	bne.n	800483e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	613b      	str	r3, [r7, #16]
   return(result);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	623a      	str	r2, [r7, #32]
 80047fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	61bb      	str	r3, [r7, #24]
   return(result);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b10      	cmp	r3, #16
 8004818:	d10a      	bne.n	8004830 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fdd4 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
 800483c:	e002      	b.n	8004844 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc ff2c 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e002      	b.n	800484e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3730      	adds	r7, #48	@ 0x30
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485c:	b0c0      	sub	sp, #256	@ 0x100
 800485e:	af00      	add	r7, sp, #0
 8004860:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	68d9      	ldr	r1, [r3, #12]
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	ea40 0301 	orr.w	r3, r0, r1
 8004880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	431a      	orrs	r2, r3
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	431a      	orrs	r2, r3
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048b0:	f021 010c 	bic.w	r1, r1, #12
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048be:	430b      	orrs	r3, r1
 80048c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	6999      	ldr	r1, [r3, #24]
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	ea40 0301 	orr.w	r3, r0, r1
 80048de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004b24 <UART_SetConfig+0x2cc>)
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d005      	beq.n	80048f8 <UART_SetConfig+0xa0>
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <UART_SetConfig+0x2d0>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d104      	bne.n	8004902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fe fbd0 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80048fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004900:	e003      	b.n	800490a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004902:	f7fe fbb7 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8004906:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004914:	f040 810c 	bne.w	8004b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004922:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	1891      	adds	r1, r2, r2
 8004930:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004932:	415b      	adcs	r3, r3
 8004934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800493a:	4621      	mov	r1, r4
 800493c:	eb12 0801 	adds.w	r8, r2, r1
 8004940:	4629      	mov	r1, r5
 8004942:	eb43 0901 	adc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004968:	462b      	mov	r3, r5
 800496a:	eb49 0303 	adc.w	r3, r9, r3
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800497e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004986:	460b      	mov	r3, r1
 8004988:	18db      	adds	r3, r3, r3
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
 800498c:	4613      	mov	r3, r2
 800498e:	eb42 0303 	adc.w	r3, r2, r3
 8004992:	657b      	str	r3, [r7, #84]	@ 0x54
 8004994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800499c:	f7fc f90c 	bl	8000bb8 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b61      	ldr	r3, [pc, #388]	@ (8004b2c <UART_SetConfig+0x2d4>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	011c      	lsls	r4, r3, #4
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049c8:	415b      	adcs	r3, r3
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049d0:	4641      	mov	r1, r8
 80049d2:	eb12 0a01 	adds.w	sl, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0b01 	adc.w	fp, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f0:	4692      	mov	sl, r2
 80049f2:	469b      	mov	fp, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	eb1a 0303 	adds.w	r3, sl, r3
 80049fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049fe:	464b      	mov	r3, r9
 8004a00:	eb4b 0303 	adc.w	r3, fp, r3
 8004a04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	18db      	adds	r3, r3, r3
 8004a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a22:	4613      	mov	r3, r2
 8004a24:	eb42 0303 	adc.w	r3, r2, r3
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a32:	f7fc f8c1 	bl	8000bb8 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2264      	movs	r2, #100	@ 0x64
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	1acb      	subs	r3, r1, r3
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a52:	4b36      	ldr	r3, [pc, #216]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004a54:	fba3 2302 	umull	r2, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a60:	441c      	add	r4, r3
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ad8:	460b      	mov	r3, r1
 8004ada:	18db      	adds	r3, r3, r3
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ade:	4613      	mov	r3, r2
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004aee:	f7fc f863 	bl	8000bb8 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	@ 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3332      	adds	r3, #50	@ 0x32
 8004b0a:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 0207 	and.w	r2, r3, #7
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4422      	add	r2, r4
 8004b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b20:	e106      	b.n	8004d30 <UART_SetConfig+0x4d8>
 8004b22:	bf00      	nop
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40011400 	.word	0x40011400
 8004b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b42:	4642      	mov	r2, r8
 8004b44:	464b      	mov	r3, r9
 8004b46:	1891      	adds	r1, r2, r2
 8004b48:	6239      	str	r1, [r7, #32]
 8004b4a:	415b      	adcs	r3, r3
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b52:	4641      	mov	r1, r8
 8004b54:	1854      	adds	r4, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb43 0501 	adc.w	r5, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00eb      	lsls	r3, r5, #3
 8004b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b78:	464b      	mov	r3, r9
 8004b7a:	eb45 0303 	adc.w	r3, r5, r3
 8004b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	008b      	lsls	r3, r1, #2
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba8:	4621      	mov	r1, r4
 8004baa:	008a      	lsls	r2, r1, #2
 8004bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bb0:	f7fc f802 	bl	8000bb8 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4b60      	ldr	r3, [pc, #384]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004bba:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	011c      	lsls	r4, r3, #4
 8004bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	61b9      	str	r1, [r7, #24]
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be4:	4641      	mov	r1, r8
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6139      	str	r1, [r7, #16]
 8004bea:	4649      	mov	r1, r9
 8004bec:	414b      	adcs	r3, r1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	00cb      	lsls	r3, r1, #3
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c06:	4651      	mov	r1, sl
 8004c08:	00ca      	lsls	r2, r1, #3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4642      	mov	r2, r8
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c18:	464b      	mov	r3, r9
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	008b      	lsls	r3, r1, #2
 8004c40:	4641      	mov	r1, r8
 8004c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c46:	4641      	mov	r1, r8
 8004c48:	008a      	lsls	r2, r1, #2
 8004c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c4e:	f7fb ffb3 	bl	8000bb8 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	4b38      	ldr	r3, [pc, #224]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	2264      	movs	r2, #100	@ 0x64
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	1acb      	subs	r3, r1, r3
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	3332      	adds	r3, #50	@ 0x32
 8004c6c:	4a33      	ldr	r2, [pc, #204]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c78:	441c      	add	r4, r3
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c82:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c98:	4641      	mov	r1, r8
 8004c9a:	1851      	adds	r1, r2, r1
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	00cb      	lsls	r3, r1, #3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cba:	4651      	mov	r1, sl
 8004cbc:	00ca      	lsls	r2, r1, #3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cca:	464b      	mov	r3, r9
 8004ccc:	460a      	mov	r2, r1
 8004cce:	eb42 0303 	adc.w	r3, r2, r3
 8004cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cde:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cec:	4649      	mov	r1, r9
 8004cee:	008b      	lsls	r3, r1, #2
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	008a      	lsls	r2, r1, #2
 8004cfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cfe:	f7fb ff5b 	bl	8000bb8 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	@ 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	3332      	adds	r3, #50	@ 0x32
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 020f 	and.w	r2, r3, #15
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4422      	add	r2, r4
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d36:	46bd      	mov	sp, r7
 8004d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3c:	51eb851f 	.word	0x51eb851f

08004d40 <__cvt>:
 8004d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	ec57 6b10 	vmov	r6, r7, d0
 8004d48:	2f00      	cmp	r7, #0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	463b      	mov	r3, r7
 8004d50:	bfbb      	ittet	lt
 8004d52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d56:	461f      	movlt	r7, r3
 8004d58:	2300      	movge	r3, #0
 8004d5a:	232d      	movlt	r3, #45	@ 0x2d
 8004d5c:	700b      	strb	r3, [r1, #0]
 8004d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d64:	4691      	mov	r9, r2
 8004d66:	f023 0820 	bic.w	r8, r3, #32
 8004d6a:	bfbc      	itt	lt
 8004d6c:	4632      	movlt	r2, r6
 8004d6e:	4616      	movlt	r6, r2
 8004d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d74:	d005      	beq.n	8004d82 <__cvt+0x42>
 8004d76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d7a:	d100      	bne.n	8004d7e <__cvt+0x3e>
 8004d7c:	3401      	adds	r4, #1
 8004d7e:	2102      	movs	r1, #2
 8004d80:	e000      	b.n	8004d84 <__cvt+0x44>
 8004d82:	2103      	movs	r1, #3
 8004d84:	ab03      	add	r3, sp, #12
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	ab02      	add	r3, sp, #8
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	ec47 6b10 	vmov	d0, r6, r7
 8004d90:	4653      	mov	r3, sl
 8004d92:	4622      	mov	r2, r4
 8004d94:	f000 fea0 	bl	8005ad8 <_dtoa_r>
 8004d98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	d119      	bne.n	8004dd4 <__cvt+0x94>
 8004da0:	f019 0f01 	tst.w	r9, #1
 8004da4:	d00e      	beq.n	8004dc4 <__cvt+0x84>
 8004da6:	eb00 0904 	add.w	r9, r0, r4
 8004daa:	2200      	movs	r2, #0
 8004dac:	2300      	movs	r3, #0
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8004db6:	b108      	cbz	r0, 8004dbc <__cvt+0x7c>
 8004db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dbc:	2230      	movs	r2, #48	@ 0x30
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	454b      	cmp	r3, r9
 8004dc2:	d31e      	bcc.n	8004e02 <__cvt+0xc2>
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dc8:	1b5b      	subs	r3, r3, r5
 8004dca:	4628      	mov	r0, r5
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	b004      	add	sp, #16
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dd8:	eb00 0904 	add.w	r9, r0, r4
 8004ddc:	d1e5      	bne.n	8004daa <__cvt+0x6a>
 8004dde:	7803      	ldrb	r3, [r0, #0]
 8004de0:	2b30      	cmp	r3, #48	@ 0x30
 8004de2:	d10a      	bne.n	8004dfa <__cvt+0xba>
 8004de4:	2200      	movs	r2, #0
 8004de6:	2300      	movs	r3, #0
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df0:	b918      	cbnz	r0, 8004dfa <__cvt+0xba>
 8004df2:	f1c4 0401 	rsb	r4, r4, #1
 8004df6:	f8ca 4000 	str.w	r4, [sl]
 8004dfa:	f8da 3000 	ldr.w	r3, [sl]
 8004dfe:	4499      	add	r9, r3
 8004e00:	e7d3      	b.n	8004daa <__cvt+0x6a>
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	9103      	str	r1, [sp, #12]
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e7d9      	b.n	8004dbe <__cvt+0x7e>

08004e0a <__exponent>:
 8004e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	bfba      	itte	lt
 8004e10:	4249      	neglt	r1, r1
 8004e12:	232d      	movlt	r3, #45	@ 0x2d
 8004e14:	232b      	movge	r3, #43	@ 0x2b
 8004e16:	2909      	cmp	r1, #9
 8004e18:	7002      	strb	r2, [r0, #0]
 8004e1a:	7043      	strb	r3, [r0, #1]
 8004e1c:	dd29      	ble.n	8004e72 <__exponent+0x68>
 8004e1e:	f10d 0307 	add.w	r3, sp, #7
 8004e22:	461d      	mov	r5, r3
 8004e24:	270a      	movs	r7, #10
 8004e26:	461a      	mov	r2, r3
 8004e28:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e2c:	fb07 1416 	mls	r4, r7, r6, r1
 8004e30:	3430      	adds	r4, #48	@ 0x30
 8004e32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e36:	460c      	mov	r4, r1
 8004e38:	2c63      	cmp	r4, #99	@ 0x63
 8004e3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004e3e:	4631      	mov	r1, r6
 8004e40:	dcf1      	bgt.n	8004e26 <__exponent+0x1c>
 8004e42:	3130      	adds	r1, #48	@ 0x30
 8004e44:	1e94      	subs	r4, r2, #2
 8004e46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e4a:	1c41      	adds	r1, r0, #1
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	42ab      	cmp	r3, r5
 8004e50:	d30a      	bcc.n	8004e68 <__exponent+0x5e>
 8004e52:	f10d 0309 	add.w	r3, sp, #9
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	42ac      	cmp	r4, r5
 8004e5a:	bf88      	it	hi
 8004e5c:	2300      	movhi	r3, #0
 8004e5e:	3302      	adds	r3, #2
 8004e60:	4403      	add	r3, r0
 8004e62:	1a18      	subs	r0, r3, r0
 8004e64:	b003      	add	sp, #12
 8004e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e70:	e7ed      	b.n	8004e4e <__exponent+0x44>
 8004e72:	2330      	movs	r3, #48	@ 0x30
 8004e74:	3130      	adds	r1, #48	@ 0x30
 8004e76:	7083      	strb	r3, [r0, #2]
 8004e78:	70c1      	strb	r1, [r0, #3]
 8004e7a:	1d03      	adds	r3, r0, #4
 8004e7c:	e7f1      	b.n	8004e62 <__exponent+0x58>
	...

08004e80 <_printf_float>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	b08d      	sub	sp, #52	@ 0x34
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	461f      	mov	r7, r3
 8004e90:	4605      	mov	r5, r0
 8004e92:	f000 fd11 	bl	80058b8 <_localeconv_r>
 8004e96:	6803      	ldr	r3, [r0, #0]
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb f9f0 	bl	8000280 <strlen>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea8:	9005      	str	r0, [sp, #20]
 8004eaa:	3307      	adds	r3, #7
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	f103 0208 	add.w	r2, r3, #8
 8004eb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8004ebc:	f8c8 2000 	str.w	r2, [r8]
 8004ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ec8:	9307      	str	r3, [sp, #28]
 8004eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8005148 <_printf_float+0x2c8>)
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004edc:	f7fb fe2e 	bl	8000b3c <__aeabi_dcmpun>
 8004ee0:	bb70      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee6:	4b98      	ldr	r3, [pc, #608]	@ (8005148 <_printf_float+0x2c8>)
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eec:	f7fb fe08 	bl	8000b00 <__aeabi_dcmple>
 8004ef0:	bb30      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4649      	mov	r1, r9
 8004efa:	f7fb fdf7 	bl	8000aec <__aeabi_dcmplt>
 8004efe:	b110      	cbz	r0, 8004f06 <_printf_float+0x86>
 8004f00:	232d      	movs	r3, #45	@ 0x2d
 8004f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f06:	4a91      	ldr	r2, [pc, #580]	@ (800514c <_printf_float+0x2cc>)
 8004f08:	4b91      	ldr	r3, [pc, #580]	@ (8005150 <_printf_float+0x2d0>)
 8004f0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f0e:	bf8c      	ite	hi
 8004f10:	4690      	movhi	r8, r2
 8004f12:	4698      	movls	r8, r3
 8004f14:	2303      	movs	r3, #3
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	f02b 0304 	bic.w	r3, fp, #4
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	f04f 0900 	mov.w	r9, #0
 8004f22:	9700      	str	r7, [sp, #0]
 8004f24:	4633      	mov	r3, r6
 8004f26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 f9d2 	bl	80052d4 <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	f040 808d 	bne.w	8005050 <_printf_float+0x1d0>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f3a:	b00d      	add	sp, #52	@ 0x34
 8004f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb fdf8 	bl	8000b3c <__aeabi_dcmpun>
 8004f4c:	b140      	cbz	r0, 8004f60 <_printf_float+0xe0>
 8004f4e:	464b      	mov	r3, r9
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfbc      	itt	lt
 8004f54:	232d      	movlt	r3, #45	@ 0x2d
 8004f56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005154 <_printf_float+0x2d4>)
 8004f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005158 <_printf_float+0x2d8>)
 8004f5e:	e7d4      	b.n	8004f0a <_printf_float+0x8a>
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f66:	9206      	str	r2, [sp, #24]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	d13b      	bne.n	8004fe4 <_printf_float+0x164>
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f74:	2300      	movs	r3, #0
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f80:	ab09      	add	r3, sp, #36	@ 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6861      	ldr	r1, [r4, #4]
 8004f86:	ec49 8b10 	vmov	d0, r8, r9
 8004f8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f7ff fed6 	bl	8004d40 <__cvt>
 8004f94:	9b06      	ldr	r3, [sp, #24]
 8004f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f98:	2b47      	cmp	r3, #71	@ 0x47
 8004f9a:	4680      	mov	r8, r0
 8004f9c:	d129      	bne.n	8004ff2 <_printf_float+0x172>
 8004f9e:	1cc8      	adds	r0, r1, #3
 8004fa0:	db02      	blt.n	8004fa8 <_printf_float+0x128>
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	dd41      	ble.n	800502c <_printf_float+0x1ac>
 8004fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fac:	fa5f fa8a 	uxtb.w	sl, sl
 8004fb0:	3901      	subs	r1, #1
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fba:	f7ff ff26 	bl	8004e0a <__exponent>
 8004fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fc0:	1813      	adds	r3, r2, r0
 8004fc2:	2a01      	cmp	r2, #1
 8004fc4:	4681      	mov	r9, r0
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	dc02      	bgt.n	8004fd0 <_printf_float+0x150>
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	07d2      	lsls	r2, r2, #31
 8004fce:	d501      	bpl.n	8004fd4 <_printf_float+0x154>
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0a2      	beq.n	8004f22 <_printf_float+0xa2>
 8004fdc:	232d      	movs	r3, #45	@ 0x2d
 8004fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe2:	e79e      	b.n	8004f22 <_printf_float+0xa2>
 8004fe4:	9a06      	ldr	r2, [sp, #24]
 8004fe6:	2a47      	cmp	r2, #71	@ 0x47
 8004fe8:	d1c2      	bne.n	8004f70 <_printf_float+0xf0>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1c0      	bne.n	8004f70 <_printf_float+0xf0>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e7bd      	b.n	8004f6e <_printf_float+0xee>
 8004ff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ff6:	d9db      	bls.n	8004fb0 <_printf_float+0x130>
 8004ff8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ffc:	d118      	bne.n	8005030 <_printf_float+0x1b0>
 8004ffe:	2900      	cmp	r1, #0
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	dd0b      	ble.n	800501c <_printf_float+0x19c>
 8005004:	6121      	str	r1, [r4, #16]
 8005006:	b913      	cbnz	r3, 800500e <_printf_float+0x18e>
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	07d0      	lsls	r0, r2, #31
 800500c:	d502      	bpl.n	8005014 <_printf_float+0x194>
 800500e:	3301      	adds	r3, #1
 8005010:	440b      	add	r3, r1
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005016:	f04f 0900 	mov.w	r9, #0
 800501a:	e7db      	b.n	8004fd4 <_printf_float+0x154>
 800501c:	b913      	cbnz	r3, 8005024 <_printf_float+0x1a4>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	07d2      	lsls	r2, r2, #31
 8005022:	d501      	bpl.n	8005028 <_printf_float+0x1a8>
 8005024:	3302      	adds	r3, #2
 8005026:	e7f4      	b.n	8005012 <_printf_float+0x192>
 8005028:	2301      	movs	r3, #1
 800502a:	e7f2      	b.n	8005012 <_printf_float+0x192>
 800502c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005032:	4299      	cmp	r1, r3
 8005034:	db05      	blt.n	8005042 <_printf_float+0x1c2>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6121      	str	r1, [r4, #16]
 800503a:	07d8      	lsls	r0, r3, #31
 800503c:	d5ea      	bpl.n	8005014 <_printf_float+0x194>
 800503e:	1c4b      	adds	r3, r1, #1
 8005040:	e7e7      	b.n	8005012 <_printf_float+0x192>
 8005042:	2900      	cmp	r1, #0
 8005044:	bfd4      	ite	le
 8005046:	f1c1 0202 	rsble	r2, r1, #2
 800504a:	2201      	movgt	r2, #1
 800504c:	4413      	add	r3, r2
 800504e:	e7e0      	b.n	8005012 <_printf_float+0x192>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	055a      	lsls	r2, r3, #21
 8005054:	d407      	bmi.n	8005066 <_printf_float+0x1e6>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	4642      	mov	r2, r8
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	d12b      	bne.n	80050bc <_printf_float+0x23c>
 8005064:	e767      	b.n	8004f36 <_printf_float+0xb6>
 8005066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800506a:	f240 80dd 	bls.w	8005228 <_printf_float+0x3a8>
 800506e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800507a:	2800      	cmp	r0, #0
 800507c:	d033      	beq.n	80050e6 <_printf_float+0x266>
 800507e:	4a37      	ldr	r2, [pc, #220]	@ (800515c <_printf_float+0x2dc>)
 8005080:	2301      	movs	r3, #1
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	f43f af54 	beq.w	8004f36 <_printf_float+0xb6>
 800508e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005092:	4543      	cmp	r3, r8
 8005094:	db02      	blt.n	800509c <_printf_float+0x21c>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07d8      	lsls	r0, r3, #31
 800509a:	d50f      	bpl.n	80050bc <_printf_float+0x23c>
 800509c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af45 	beq.w	8004f36 <_printf_float+0xb6>
 80050ac:	f04f 0900 	mov.w	r9, #0
 80050b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80050b4:	f104 0a1a 	add.w	sl, r4, #26
 80050b8:	45c8      	cmp	r8, r9
 80050ba:	dc09      	bgt.n	80050d0 <_printf_float+0x250>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	079b      	lsls	r3, r3, #30
 80050c0:	f100 8103 	bmi.w	80052ca <_printf_float+0x44a>
 80050c4:	68e0      	ldr	r0, [r4, #12]
 80050c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050c8:	4298      	cmp	r0, r3
 80050ca:	bfb8      	it	lt
 80050cc:	4618      	movlt	r0, r3
 80050ce:	e734      	b.n	8004f3a <_printf_float+0xba>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4652      	mov	r2, sl
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f af2b 	beq.w	8004f36 <_printf_float+0xb6>
 80050e0:	f109 0901 	add.w	r9, r9, #1
 80050e4:	e7e8      	b.n	80050b8 <_printf_float+0x238>
 80050e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dc39      	bgt.n	8005160 <_printf_float+0x2e0>
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <_printf_float+0x2dc>)
 80050ee:	2301      	movs	r3, #1
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af1d 	beq.w	8004f36 <_printf_float+0xb6>
 80050fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005100:	ea59 0303 	orrs.w	r3, r9, r3
 8005104:	d102      	bne.n	800510c <_printf_float+0x28c>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	07d9      	lsls	r1, r3, #31
 800510a:	d5d7      	bpl.n	80050bc <_printf_float+0x23c>
 800510c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af0d 	beq.w	8004f36 <_printf_float+0xb6>
 800511c:	f04f 0a00 	mov.w	sl, #0
 8005120:	f104 0b1a 	add.w	fp, r4, #26
 8005124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005126:	425b      	negs	r3, r3
 8005128:	4553      	cmp	r3, sl
 800512a:	dc01      	bgt.n	8005130 <_printf_float+0x2b0>
 800512c:	464b      	mov	r3, r9
 800512e:	e793      	b.n	8005058 <_printf_float+0x1d8>
 8005130:	2301      	movs	r3, #1
 8005132:	465a      	mov	r2, fp
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f aefb 	beq.w	8004f36 <_printf_float+0xb6>
 8005140:	f10a 0a01 	add.w	sl, sl, #1
 8005144:	e7ee      	b.n	8005124 <_printf_float+0x2a4>
 8005146:	bf00      	nop
 8005148:	7fefffff 	.word	0x7fefffff
 800514c:	08007adc 	.word	0x08007adc
 8005150:	08007ad8 	.word	0x08007ad8
 8005154:	08007ae4 	.word	0x08007ae4
 8005158:	08007ae0 	.word	0x08007ae0
 800515c:	08007ae8 	.word	0x08007ae8
 8005160:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005162:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005166:	4553      	cmp	r3, sl
 8005168:	bfa8      	it	ge
 800516a:	4653      	movge	r3, sl
 800516c:	2b00      	cmp	r3, #0
 800516e:	4699      	mov	r9, r3
 8005170:	dc36      	bgt.n	80051e0 <_printf_float+0x360>
 8005172:	f04f 0b00 	mov.w	fp, #0
 8005176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800517a:	f104 021a 	add.w	r2, r4, #26
 800517e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005180:	9306      	str	r3, [sp, #24]
 8005182:	eba3 0309 	sub.w	r3, r3, r9
 8005186:	455b      	cmp	r3, fp
 8005188:	dc31      	bgt.n	80051ee <_printf_float+0x36e>
 800518a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800518c:	459a      	cmp	sl, r3
 800518e:	dc3a      	bgt.n	8005206 <_printf_float+0x386>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07da      	lsls	r2, r3, #31
 8005194:	d437      	bmi.n	8005206 <_printf_float+0x386>
 8005196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005198:	ebaa 0903 	sub.w	r9, sl, r3
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	ebaa 0303 	sub.w	r3, sl, r3
 80051a2:	4599      	cmp	r9, r3
 80051a4:	bfa8      	it	ge
 80051a6:	4699      	movge	r9, r3
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	dc33      	bgt.n	8005216 <_printf_float+0x396>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051b6:	f104 0b1a 	add.w	fp, r4, #26
 80051ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051bc:	ebaa 0303 	sub.w	r3, sl, r3
 80051c0:	eba3 0309 	sub.w	r3, r3, r9
 80051c4:	4543      	cmp	r3, r8
 80051c6:	f77f af79 	ble.w	80050bc <_printf_float+0x23c>
 80051ca:	2301      	movs	r3, #1
 80051cc:	465a      	mov	r2, fp
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	f43f aeae 	beq.w	8004f36 <_printf_float+0xb6>
 80051da:	f108 0801 	add.w	r8, r8, #1
 80051de:	e7ec      	b.n	80051ba <_printf_float+0x33a>
 80051e0:	4642      	mov	r2, r8
 80051e2:	4631      	mov	r1, r6
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	3001      	adds	r0, #1
 80051ea:	d1c2      	bne.n	8005172 <_printf_float+0x2f2>
 80051ec:	e6a3      	b.n	8004f36 <_printf_float+0xb6>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	9206      	str	r2, [sp, #24]
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f ae9c 	beq.w	8004f36 <_printf_float+0xb6>
 80051fe:	9a06      	ldr	r2, [sp, #24]
 8005200:	f10b 0b01 	add.w	fp, fp, #1
 8005204:	e7bb      	b.n	800517e <_printf_float+0x2fe>
 8005206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	d1c0      	bne.n	8005196 <_printf_float+0x316>
 8005214:	e68f      	b.n	8004f36 <_printf_float+0xb6>
 8005216:	9a06      	ldr	r2, [sp, #24]
 8005218:	464b      	mov	r3, r9
 800521a:	4442      	add	r2, r8
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	d1c3      	bne.n	80051ae <_printf_float+0x32e>
 8005226:	e686      	b.n	8004f36 <_printf_float+0xb6>
 8005228:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800522c:	f1ba 0f01 	cmp.w	sl, #1
 8005230:	dc01      	bgt.n	8005236 <_printf_float+0x3b6>
 8005232:	07db      	lsls	r3, r3, #31
 8005234:	d536      	bpl.n	80052a4 <_printf_float+0x424>
 8005236:	2301      	movs	r3, #1
 8005238:	4642      	mov	r2, r8
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae78 	beq.w	8004f36 <_printf_float+0xb6>
 8005246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	f43f ae70 	beq.w	8004f36 <_printf_float+0xb6>
 8005256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005262:	f7fb fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8005266:	b9c0      	cbnz	r0, 800529a <_printf_float+0x41a>
 8005268:	4653      	mov	r3, sl
 800526a:	f108 0201 	add.w	r2, r8, #1
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	d10c      	bne.n	8005292 <_printf_float+0x412>
 8005278:	e65d      	b.n	8004f36 <_printf_float+0xb6>
 800527a:	2301      	movs	r3, #1
 800527c:	465a      	mov	r2, fp
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae56 	beq.w	8004f36 <_printf_float+0xb6>
 800528a:	f108 0801 	add.w	r8, r8, #1
 800528e:	45d0      	cmp	r8, sl
 8005290:	dbf3      	blt.n	800527a <_printf_float+0x3fa>
 8005292:	464b      	mov	r3, r9
 8005294:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005298:	e6df      	b.n	800505a <_printf_float+0x1da>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	f104 0b1a 	add.w	fp, r4, #26
 80052a2:	e7f4      	b.n	800528e <_printf_float+0x40e>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4642      	mov	r2, r8
 80052a8:	e7e1      	b.n	800526e <_printf_float+0x3ee>
 80052aa:	2301      	movs	r3, #1
 80052ac:	464a      	mov	r2, r9
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae3e 	beq.w	8004f36 <_printf_float+0xb6>
 80052ba:	f108 0801 	add.w	r8, r8, #1
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	4543      	cmp	r3, r8
 80052c6:	dcf0      	bgt.n	80052aa <_printf_float+0x42a>
 80052c8:	e6fc      	b.n	80050c4 <_printf_float+0x244>
 80052ca:	f04f 0800 	mov.w	r8, #0
 80052ce:	f104 0919 	add.w	r9, r4, #25
 80052d2:	e7f4      	b.n	80052be <_printf_float+0x43e>

080052d4 <_printf_common>:
 80052d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d8:	4616      	mov	r6, r2
 80052da:	4698      	mov	r8, r3
 80052dc:	688a      	ldr	r2, [r1, #8]
 80052de:	690b      	ldr	r3, [r1, #16]
 80052e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bfb8      	it	lt
 80052e8:	4613      	movlt	r3, r2
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052f0:	4607      	mov	r7, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	b10a      	cbz	r2, 80052fa <_printf_common+0x26>
 80052f6:	3301      	adds	r3, #1
 80052f8:	6033      	str	r3, [r6, #0]
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	0699      	lsls	r1, r3, #26
 80052fe:	bf42      	ittt	mi
 8005300:	6833      	ldrmi	r3, [r6, #0]
 8005302:	3302      	addmi	r3, #2
 8005304:	6033      	strmi	r3, [r6, #0]
 8005306:	6825      	ldr	r5, [r4, #0]
 8005308:	f015 0506 	ands.w	r5, r5, #6
 800530c:	d106      	bne.n	800531c <_printf_common+0x48>
 800530e:	f104 0a19 	add.w	sl, r4, #25
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	42ab      	cmp	r3, r5
 800531a:	dc26      	bgt.n	800536a <_printf_common+0x96>
 800531c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	3b00      	subs	r3, #0
 8005324:	bf18      	it	ne
 8005326:	2301      	movne	r3, #1
 8005328:	0692      	lsls	r2, r2, #26
 800532a:	d42b      	bmi.n	8005384 <_printf_common+0xb0>
 800532c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005330:	4641      	mov	r1, r8
 8005332:	4638      	mov	r0, r7
 8005334:	47c8      	blx	r9
 8005336:	3001      	adds	r0, #1
 8005338:	d01e      	beq.n	8005378 <_printf_common+0xa4>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	6922      	ldr	r2, [r4, #16]
 800533e:	f003 0306 	and.w	r3, r3, #6
 8005342:	2b04      	cmp	r3, #4
 8005344:	bf02      	ittt	eq
 8005346:	68e5      	ldreq	r5, [r4, #12]
 8005348:	6833      	ldreq	r3, [r6, #0]
 800534a:	1aed      	subeq	r5, r5, r3
 800534c:	68a3      	ldr	r3, [r4, #8]
 800534e:	bf0c      	ite	eq
 8005350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005354:	2500      	movne	r5, #0
 8005356:	4293      	cmp	r3, r2
 8005358:	bfc4      	itt	gt
 800535a:	1a9b      	subgt	r3, r3, r2
 800535c:	18ed      	addgt	r5, r5, r3
 800535e:	2600      	movs	r6, #0
 8005360:	341a      	adds	r4, #26
 8005362:	42b5      	cmp	r5, r6
 8005364:	d11a      	bne.n	800539c <_printf_common+0xc8>
 8005366:	2000      	movs	r0, #0
 8005368:	e008      	b.n	800537c <_printf_common+0xa8>
 800536a:	2301      	movs	r3, #1
 800536c:	4652      	mov	r2, sl
 800536e:	4641      	mov	r1, r8
 8005370:	4638      	mov	r0, r7
 8005372:	47c8      	blx	r9
 8005374:	3001      	adds	r0, #1
 8005376:	d103      	bne.n	8005380 <_printf_common+0xac>
 8005378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005380:	3501      	adds	r5, #1
 8005382:	e7c6      	b.n	8005312 <_printf_common+0x3e>
 8005384:	18e1      	adds	r1, r4, r3
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	2030      	movs	r0, #48	@ 0x30
 800538a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800538e:	4422      	add	r2, r4
 8005390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005398:	3302      	adds	r3, #2
 800539a:	e7c7      	b.n	800532c <_printf_common+0x58>
 800539c:	2301      	movs	r3, #1
 800539e:	4622      	mov	r2, r4
 80053a0:	4641      	mov	r1, r8
 80053a2:	4638      	mov	r0, r7
 80053a4:	47c8      	blx	r9
 80053a6:	3001      	adds	r0, #1
 80053a8:	d0e6      	beq.n	8005378 <_printf_common+0xa4>
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7d9      	b.n	8005362 <_printf_common+0x8e>
	...

080053b0 <_printf_i>:
 80053b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	7e0f      	ldrb	r7, [r1, #24]
 80053b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053b8:	2f78      	cmp	r7, #120	@ 0x78
 80053ba:	4691      	mov	r9, r2
 80053bc:	4680      	mov	r8, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	469a      	mov	sl, r3
 80053c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053c6:	d807      	bhi.n	80053d8 <_printf_i+0x28>
 80053c8:	2f62      	cmp	r7, #98	@ 0x62
 80053ca:	d80a      	bhi.n	80053e2 <_printf_i+0x32>
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	f000 80d1 	beq.w	8005574 <_printf_i+0x1c4>
 80053d2:	2f58      	cmp	r7, #88	@ 0x58
 80053d4:	f000 80b8 	beq.w	8005548 <_printf_i+0x198>
 80053d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053e0:	e03a      	b.n	8005458 <_printf_i+0xa8>
 80053e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053e6:	2b15      	cmp	r3, #21
 80053e8:	d8f6      	bhi.n	80053d8 <_printf_i+0x28>
 80053ea:	a101      	add	r1, pc, #4	@ (adr r1, 80053f0 <_printf_i+0x40>)
 80053ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f0:	08005449 	.word	0x08005449
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	080053d9 	.word	0x080053d9
 80053fc:	080053d9 	.word	0x080053d9
 8005400:	080053d9 	.word	0x080053d9
 8005404:	080053d9 	.word	0x080053d9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053d9 	.word	0x080053d9
 8005410:	080053d9 	.word	0x080053d9
 8005414:	080053d9 	.word	0x080053d9
 8005418:	080053d9 	.word	0x080053d9
 800541c:	0800555b 	.word	0x0800555b
 8005420:	08005487 	.word	0x08005487
 8005424:	08005515 	.word	0x08005515
 8005428:	080053d9 	.word	0x080053d9
 800542c:	080053d9 	.word	0x080053d9
 8005430:	0800557d 	.word	0x0800557d
 8005434:	080053d9 	.word	0x080053d9
 8005438:	08005487 	.word	0x08005487
 800543c:	080053d9 	.word	0x080053d9
 8005440:	080053d9 	.word	0x080053d9
 8005444:	0800551d 	.word	0x0800551d
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	1d1a      	adds	r2, r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6032      	str	r2, [r6, #0]
 8005450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005458:	2301      	movs	r3, #1
 800545a:	e09c      	b.n	8005596 <_printf_i+0x1e6>
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	6031      	str	r1, [r6, #0]
 8005464:	0606      	lsls	r6, r0, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xbc>
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	e003      	b.n	8005474 <_printf_i+0xc4>
 800546c:	0645      	lsls	r5, r0, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xb8>
 8005470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005474:	2d00      	cmp	r5, #0
 8005476:	da03      	bge.n	8005480 <_printf_i+0xd0>
 8005478:	232d      	movs	r3, #45	@ 0x2d
 800547a:	426d      	negs	r5, r5
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005480:	4858      	ldr	r0, [pc, #352]	@ (80055e4 <_printf_i+0x234>)
 8005482:	230a      	movs	r3, #10
 8005484:	e011      	b.n	80054aa <_printf_i+0xfa>
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	0608      	lsls	r0, r1, #24
 800548c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005490:	d402      	bmi.n	8005498 <_printf_i+0xe8>
 8005492:	0649      	lsls	r1, r1, #25
 8005494:	bf48      	it	mi
 8005496:	b2ad      	uxthmi	r5, r5
 8005498:	2f6f      	cmp	r7, #111	@ 0x6f
 800549a:	4852      	ldr	r0, [pc, #328]	@ (80055e4 <_printf_i+0x234>)
 800549c:	6033      	str	r3, [r6, #0]
 800549e:	bf14      	ite	ne
 80054a0:	230a      	movne	r3, #10
 80054a2:	2308      	moveq	r3, #8
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054aa:	6866      	ldr	r6, [r4, #4]
 80054ac:	60a6      	str	r6, [r4, #8]
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	db05      	blt.n	80054be <_printf_i+0x10e>
 80054b2:	6821      	ldr	r1, [r4, #0]
 80054b4:	432e      	orrs	r6, r5
 80054b6:	f021 0104 	bic.w	r1, r1, #4
 80054ba:	6021      	str	r1, [r4, #0]
 80054bc:	d04b      	beq.n	8005556 <_printf_i+0x1a6>
 80054be:	4616      	mov	r6, r2
 80054c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80054c4:	fb03 5711 	mls	r7, r3, r1, r5
 80054c8:	5dc7      	ldrb	r7, [r0, r7]
 80054ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054ce:	462f      	mov	r7, r5
 80054d0:	42bb      	cmp	r3, r7
 80054d2:	460d      	mov	r5, r1
 80054d4:	d9f4      	bls.n	80054c0 <_printf_i+0x110>
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d10b      	bne.n	80054f2 <_printf_i+0x142>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	07df      	lsls	r7, r3, #31
 80054de:	d508      	bpl.n	80054f2 <_printf_i+0x142>
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	6861      	ldr	r1, [r4, #4]
 80054e4:	4299      	cmp	r1, r3
 80054e6:	bfde      	ittt	le
 80054e8:	2330      	movle	r3, #48	@ 0x30
 80054ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054f2:	1b92      	subs	r2, r2, r6
 80054f4:	6122      	str	r2, [r4, #16]
 80054f6:	f8cd a000 	str.w	sl, [sp]
 80054fa:	464b      	mov	r3, r9
 80054fc:	aa03      	add	r2, sp, #12
 80054fe:	4621      	mov	r1, r4
 8005500:	4640      	mov	r0, r8
 8005502:	f7ff fee7 	bl	80052d4 <_printf_common>
 8005506:	3001      	adds	r0, #1
 8005508:	d14a      	bne.n	80055a0 <_printf_i+0x1f0>
 800550a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800550e:	b004      	add	sp, #16
 8005510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f043 0320 	orr.w	r3, r3, #32
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	4832      	ldr	r0, [pc, #200]	@ (80055e8 <_printf_i+0x238>)
 800551e:	2778      	movs	r7, #120	@ 0x78
 8005520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	6831      	ldr	r1, [r6, #0]
 8005528:	061f      	lsls	r7, r3, #24
 800552a:	f851 5b04 	ldr.w	r5, [r1], #4
 800552e:	d402      	bmi.n	8005536 <_printf_i+0x186>
 8005530:	065f      	lsls	r7, r3, #25
 8005532:	bf48      	it	mi
 8005534:	b2ad      	uxthmi	r5, r5
 8005536:	6031      	str	r1, [r6, #0]
 8005538:	07d9      	lsls	r1, r3, #31
 800553a:	bf44      	itt	mi
 800553c:	f043 0320 	orrmi.w	r3, r3, #32
 8005540:	6023      	strmi	r3, [r4, #0]
 8005542:	b11d      	cbz	r5, 800554c <_printf_i+0x19c>
 8005544:	2310      	movs	r3, #16
 8005546:	e7ad      	b.n	80054a4 <_printf_i+0xf4>
 8005548:	4826      	ldr	r0, [pc, #152]	@ (80055e4 <_printf_i+0x234>)
 800554a:	e7e9      	b.n	8005520 <_printf_i+0x170>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f023 0320 	bic.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	e7f6      	b.n	8005544 <_printf_i+0x194>
 8005556:	4616      	mov	r6, r2
 8005558:	e7bd      	b.n	80054d6 <_printf_i+0x126>
 800555a:	6833      	ldr	r3, [r6, #0]
 800555c:	6825      	ldr	r5, [r4, #0]
 800555e:	6961      	ldr	r1, [r4, #20]
 8005560:	1d18      	adds	r0, r3, #4
 8005562:	6030      	str	r0, [r6, #0]
 8005564:	062e      	lsls	r6, r5, #24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	d501      	bpl.n	800556e <_printf_i+0x1be>
 800556a:	6019      	str	r1, [r3, #0]
 800556c:	e002      	b.n	8005574 <_printf_i+0x1c4>
 800556e:	0668      	lsls	r0, r5, #25
 8005570:	d5fb      	bpl.n	800556a <_printf_i+0x1ba>
 8005572:	8019      	strh	r1, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	4616      	mov	r6, r2
 800557a:	e7bc      	b.n	80054f6 <_printf_i+0x146>
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	6032      	str	r2, [r6, #0]
 8005582:	681e      	ldr	r6, [r3, #0]
 8005584:	6862      	ldr	r2, [r4, #4]
 8005586:	2100      	movs	r1, #0
 8005588:	4630      	mov	r0, r6
 800558a:	f7fa fe29 	bl	80001e0 <memchr>
 800558e:	b108      	cbz	r0, 8005594 <_printf_i+0x1e4>
 8005590:	1b80      	subs	r0, r0, r6
 8005592:	6060      	str	r0, [r4, #4]
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	2300      	movs	r3, #0
 800559a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800559e:	e7aa      	b.n	80054f6 <_printf_i+0x146>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	4632      	mov	r2, r6
 80055a4:	4649      	mov	r1, r9
 80055a6:	4640      	mov	r0, r8
 80055a8:	47d0      	blx	sl
 80055aa:	3001      	adds	r0, #1
 80055ac:	d0ad      	beq.n	800550a <_printf_i+0x15a>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	079b      	lsls	r3, r3, #30
 80055b2:	d413      	bmi.n	80055dc <_printf_i+0x22c>
 80055b4:	68e0      	ldr	r0, [r4, #12]
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	4298      	cmp	r0, r3
 80055ba:	bfb8      	it	lt
 80055bc:	4618      	movlt	r0, r3
 80055be:	e7a6      	b.n	800550e <_printf_i+0x15e>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4632      	mov	r2, r6
 80055c4:	4649      	mov	r1, r9
 80055c6:	4640      	mov	r0, r8
 80055c8:	47d0      	blx	sl
 80055ca:	3001      	adds	r0, #1
 80055cc:	d09d      	beq.n	800550a <_printf_i+0x15a>
 80055ce:	3501      	adds	r5, #1
 80055d0:	68e3      	ldr	r3, [r4, #12]
 80055d2:	9903      	ldr	r1, [sp, #12]
 80055d4:	1a5b      	subs	r3, r3, r1
 80055d6:	42ab      	cmp	r3, r5
 80055d8:	dcf2      	bgt.n	80055c0 <_printf_i+0x210>
 80055da:	e7eb      	b.n	80055b4 <_printf_i+0x204>
 80055dc:	2500      	movs	r5, #0
 80055de:	f104 0619 	add.w	r6, r4, #25
 80055e2:	e7f5      	b.n	80055d0 <_printf_i+0x220>
 80055e4:	08007aea 	.word	0x08007aea
 80055e8:	08007afb 	.word	0x08007afb

080055ec <std>:
 80055ec:	2300      	movs	r3, #0
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	e9c0 3300 	strd	r3, r3, [r0]
 80055f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055fa:	6083      	str	r3, [r0, #8]
 80055fc:	8181      	strh	r1, [r0, #12]
 80055fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005600:	81c2      	strh	r2, [r0, #14]
 8005602:	6183      	str	r3, [r0, #24]
 8005604:	4619      	mov	r1, r3
 8005606:	2208      	movs	r2, #8
 8005608:	305c      	adds	r0, #92	@ 0x5c
 800560a:	f000 f94c 	bl	80058a6 <memset>
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <std+0x58>)
 8005610:	6263      	str	r3, [r4, #36]	@ 0x24
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <std+0x5c>)
 8005614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <std+0x60>)
 8005618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <std+0x64>)
 800561c:	6323      	str	r3, [r4, #48]	@ 0x30
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <std+0x68>)
 8005620:	6224      	str	r4, [r4, #32]
 8005622:	429c      	cmp	r4, r3
 8005624:	d006      	beq.n	8005634 <std+0x48>
 8005626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800562a:	4294      	cmp	r4, r2
 800562c:	d002      	beq.n	8005634 <std+0x48>
 800562e:	33d0      	adds	r3, #208	@ 0xd0
 8005630:	429c      	cmp	r4, r3
 8005632:	d105      	bne.n	8005640 <std+0x54>
 8005634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563c:	f000 b9b0 	b.w	80059a0 <__retarget_lock_init_recursive>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	08005821 	.word	0x08005821
 8005648:	08005843 	.word	0x08005843
 800564c:	0800587b 	.word	0x0800587b
 8005650:	0800589f 	.word	0x0800589f
 8005654:	200003b0 	.word	0x200003b0

08005658 <stdio_exit_handler>:
 8005658:	4a02      	ldr	r2, [pc, #8]	@ (8005664 <stdio_exit_handler+0xc>)
 800565a:	4903      	ldr	r1, [pc, #12]	@ (8005668 <stdio_exit_handler+0x10>)
 800565c:	4803      	ldr	r0, [pc, #12]	@ (800566c <stdio_exit_handler+0x14>)
 800565e:	f000 b869 	b.w	8005734 <_fwalk_sglue>
 8005662:	bf00      	nop
 8005664:	20000014 	.word	0x20000014
 8005668:	08007325 	.word	0x08007325
 800566c:	20000024 	.word	0x20000024

08005670 <cleanup_stdio>:
 8005670:	6841      	ldr	r1, [r0, #4]
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <cleanup_stdio+0x34>)
 8005674:	4299      	cmp	r1, r3
 8005676:	b510      	push	{r4, lr}
 8005678:	4604      	mov	r4, r0
 800567a:	d001      	beq.n	8005680 <cleanup_stdio+0x10>
 800567c:	f001 fe52 	bl	8007324 <_fflush_r>
 8005680:	68a1      	ldr	r1, [r4, #8]
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <cleanup_stdio+0x38>)
 8005684:	4299      	cmp	r1, r3
 8005686:	d002      	beq.n	800568e <cleanup_stdio+0x1e>
 8005688:	4620      	mov	r0, r4
 800568a:	f001 fe4b 	bl	8007324 <_fflush_r>
 800568e:	68e1      	ldr	r1, [r4, #12]
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <cleanup_stdio+0x3c>)
 8005692:	4299      	cmp	r1, r3
 8005694:	d004      	beq.n	80056a0 <cleanup_stdio+0x30>
 8005696:	4620      	mov	r0, r4
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f001 be42 	b.w	8007324 <_fflush_r>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	200003b0 	.word	0x200003b0
 80056a8:	20000418 	.word	0x20000418
 80056ac:	20000480 	.word	0x20000480

080056b0 <global_stdio_init.part.0>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <global_stdio_init.part.0+0x30>)
 80056b4:	4c0b      	ldr	r4, [pc, #44]	@ (80056e4 <global_stdio_init.part.0+0x34>)
 80056b6:	4a0c      	ldr	r2, [pc, #48]	@ (80056e8 <global_stdio_init.part.0+0x38>)
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	4620      	mov	r0, r4
 80056bc:	2200      	movs	r2, #0
 80056be:	2104      	movs	r1, #4
 80056c0:	f7ff ff94 	bl	80055ec <std>
 80056c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056c8:	2201      	movs	r2, #1
 80056ca:	2109      	movs	r1, #9
 80056cc:	f7ff ff8e 	bl	80055ec <std>
 80056d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056d4:	2202      	movs	r2, #2
 80056d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056da:	2112      	movs	r1, #18
 80056dc:	f7ff bf86 	b.w	80055ec <std>
 80056e0:	200004e8 	.word	0x200004e8
 80056e4:	200003b0 	.word	0x200003b0
 80056e8:	08005659 	.word	0x08005659

080056ec <__sfp_lock_acquire>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__sfp_lock_acquire+0x8>)
 80056ee:	f000 b958 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	200004f1 	.word	0x200004f1

080056f8 <__sfp_lock_release>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__sfp_lock_release+0x8>)
 80056fa:	f000 b953 	b.w	80059a4 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	200004f1 	.word	0x200004f1

08005704 <__sinit>:
 8005704:	b510      	push	{r4, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	f7ff fff0 	bl	80056ec <__sfp_lock_acquire>
 800570c:	6a23      	ldr	r3, [r4, #32]
 800570e:	b11b      	cbz	r3, 8005718 <__sinit+0x14>
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	f7ff bff0 	b.w	80056f8 <__sfp_lock_release>
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <__sinit+0x28>)
 800571a:	6223      	str	r3, [r4, #32]
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <__sinit+0x2c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f5      	bne.n	8005710 <__sinit+0xc>
 8005724:	f7ff ffc4 	bl	80056b0 <global_stdio_init.part.0>
 8005728:	e7f2      	b.n	8005710 <__sinit+0xc>
 800572a:	bf00      	nop
 800572c:	08005671 	.word	0x08005671
 8005730:	200004e8 	.word	0x200004e8

08005734 <_fwalk_sglue>:
 8005734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005738:	4607      	mov	r7, r0
 800573a:	4688      	mov	r8, r1
 800573c:	4614      	mov	r4, r2
 800573e:	2600      	movs	r6, #0
 8005740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005744:	f1b9 0901 	subs.w	r9, r9, #1
 8005748:	d505      	bpl.n	8005756 <_fwalk_sglue+0x22>
 800574a:	6824      	ldr	r4, [r4, #0]
 800574c:	2c00      	cmp	r4, #0
 800574e:	d1f7      	bne.n	8005740 <_fwalk_sglue+0xc>
 8005750:	4630      	mov	r0, r6
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d907      	bls.n	800576c <_fwalk_sglue+0x38>
 800575c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005760:	3301      	adds	r3, #1
 8005762:	d003      	beq.n	800576c <_fwalk_sglue+0x38>
 8005764:	4629      	mov	r1, r5
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	4306      	orrs	r6, r0
 800576c:	3568      	adds	r5, #104	@ 0x68
 800576e:	e7e9      	b.n	8005744 <_fwalk_sglue+0x10>

08005770 <sniprintf>:
 8005770:	b40c      	push	{r2, r3}
 8005772:	b530      	push	{r4, r5, lr}
 8005774:	4b18      	ldr	r3, [pc, #96]	@ (80057d8 <sniprintf+0x68>)
 8005776:	1e0c      	subs	r4, r1, #0
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	b09d      	sub	sp, #116	@ 0x74
 800577c:	da08      	bge.n	8005790 <sniprintf+0x20>
 800577e:	238b      	movs	r3, #139	@ 0x8b
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005786:	b01d      	add	sp, #116	@ 0x74
 8005788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800578c:	b002      	add	sp, #8
 800578e:	4770      	bx	lr
 8005790:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800579e:	bf14      	ite	ne
 80057a0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80057a4:	4623      	moveq	r3, r4
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057ae:	9002      	str	r0, [sp, #8]
 80057b0:	9006      	str	r0, [sp, #24]
 80057b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057b8:	ab21      	add	r3, sp, #132	@ 0x84
 80057ba:	a902      	add	r1, sp, #8
 80057bc:	4628      	mov	r0, r5
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	f001 fc30 	bl	8007024 <_svfiprintf_r>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	bfbc      	itt	lt
 80057c8:	238b      	movlt	r3, #139	@ 0x8b
 80057ca:	602b      	strlt	r3, [r5, #0]
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	d0da      	beq.n	8005786 <sniprintf+0x16>
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e7d6      	b.n	8005786 <sniprintf+0x16>
 80057d8:	20000020 	.word	0x20000020

080057dc <siprintf>:
 80057dc:	b40e      	push	{r1, r2, r3}
 80057de:	b510      	push	{r4, lr}
 80057e0:	b09d      	sub	sp, #116	@ 0x74
 80057e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80057e4:	9002      	str	r0, [sp, #8]
 80057e6:	9006      	str	r0, [sp, #24]
 80057e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057ec:	480a      	ldr	r0, [pc, #40]	@ (8005818 <siprintf+0x3c>)
 80057ee:	9107      	str	r1, [sp, #28]
 80057f0:	9104      	str	r1, [sp, #16]
 80057f2:	490a      	ldr	r1, [pc, #40]	@ (800581c <siprintf+0x40>)
 80057f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f8:	9105      	str	r1, [sp, #20]
 80057fa:	2400      	movs	r4, #0
 80057fc:	a902      	add	r1, sp, #8
 80057fe:	6800      	ldr	r0, [r0, #0]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005804:	f001 fc0e 	bl	8007024 <_svfiprintf_r>
 8005808:	9b02      	ldr	r3, [sp, #8]
 800580a:	701c      	strb	r4, [r3, #0]
 800580c:	b01d      	add	sp, #116	@ 0x74
 800580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005812:	b003      	add	sp, #12
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000020 	.word	0x20000020
 800581c:	ffff0208 	.word	0xffff0208

08005820 <__sread>:
 8005820:	b510      	push	{r4, lr}
 8005822:	460c      	mov	r4, r1
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	f000 f86c 	bl	8005904 <_read_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	bfab      	itete	ge
 8005830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005832:	89a3      	ldrhlt	r3, [r4, #12]
 8005834:	181b      	addge	r3, r3, r0
 8005836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800583a:	bfac      	ite	ge
 800583c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800583e:	81a3      	strhlt	r3, [r4, #12]
 8005840:	bd10      	pop	{r4, pc}

08005842 <__swrite>:
 8005842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005846:	461f      	mov	r7, r3
 8005848:	898b      	ldrh	r3, [r1, #12]
 800584a:	05db      	lsls	r3, r3, #23
 800584c:	4605      	mov	r5, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4616      	mov	r6, r2
 8005852:	d505      	bpl.n	8005860 <__swrite+0x1e>
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	2302      	movs	r3, #2
 800585a:	2200      	movs	r2, #0
 800585c:	f000 f840 	bl	80058e0 <_lseek_r>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	4632      	mov	r2, r6
 800586e:	463b      	mov	r3, r7
 8005870:	4628      	mov	r0, r5
 8005872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005876:	f000 b857 	b.w	8005928 <_write_r>

0800587a <__sseek>:
 800587a:	b510      	push	{r4, lr}
 800587c:	460c      	mov	r4, r1
 800587e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005882:	f000 f82d 	bl	80058e0 <_lseek_r>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	bf15      	itete	ne
 800588c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800588e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005896:	81a3      	strheq	r3, [r4, #12]
 8005898:	bf18      	it	ne
 800589a:	81a3      	strhne	r3, [r4, #12]
 800589c:	bd10      	pop	{r4, pc}

0800589e <__sclose>:
 800589e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a2:	f000 b80d 	b.w	80058c0 <_close_r>

080058a6 <memset>:
 80058a6:	4402      	add	r2, r0
 80058a8:	4603      	mov	r3, r0
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d100      	bne.n	80058b0 <memset+0xa>
 80058ae:	4770      	bx	lr
 80058b0:	f803 1b01 	strb.w	r1, [r3], #1
 80058b4:	e7f9      	b.n	80058aa <memset+0x4>
	...

080058b8 <_localeconv_r>:
 80058b8:	4800      	ldr	r0, [pc, #0]	@ (80058bc <_localeconv_r+0x4>)
 80058ba:	4770      	bx	lr
 80058bc:	20000160 	.word	0x20000160

080058c0 <_close_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d06      	ldr	r5, [pc, #24]	@ (80058dc <_close_r+0x1c>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fc fb24 	bl	8001f18 <_close>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_close_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_close_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	200004ec 	.word	0x200004ec

080058e0 <_lseek_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	@ (8005900 <_lseek_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fc fb39 	bl	8001f66 <_lseek>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_lseek_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_lseek_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200004ec 	.word	0x200004ec

08005904 <_read_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	@ (8005924 <_read_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fc fac7 	bl	8001ea6 <_read>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_read_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_read_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200004ec 	.word	0x200004ec

08005928 <_write_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	@ (8005948 <_write_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fc fad2 	bl	8001ee0 <_write>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_write_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_write_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200004ec 	.word	0x200004ec

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	@ (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000020 	.word	0x20000020

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	@ (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	@ (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	@ (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	@ (800599c <__libc_init_array+0x44>)
 800596c:	f002 f86a 	bl	8007a44 <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08007e54 	.word	0x08007e54
 8005994:	08007e54 	.word	0x08007e54
 8005998:	08007e54 	.word	0x08007e54
 800599c:	08007e58 	.word	0x08007e58

080059a0 <__retarget_lock_init_recursive>:
 80059a0:	4770      	bx	lr

080059a2 <__retarget_lock_acquire_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_release_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <memcpy>:
 80059a6:	440a      	add	r2, r1
 80059a8:	4291      	cmp	r1, r2
 80059aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80059ae:	d100      	bne.n	80059b2 <memcpy+0xc>
 80059b0:	4770      	bx	lr
 80059b2:	b510      	push	{r4, lr}
 80059b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059bc:	4291      	cmp	r1, r2
 80059be:	d1f9      	bne.n	80059b4 <memcpy+0xe>
 80059c0:	bd10      	pop	{r4, pc}

080059c2 <quorem>:
 80059c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	6903      	ldr	r3, [r0, #16]
 80059c8:	690c      	ldr	r4, [r1, #16]
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	4607      	mov	r7, r0
 80059ce:	db7e      	blt.n	8005ace <quorem+0x10c>
 80059d0:	3c01      	subs	r4, #1
 80059d2:	f101 0814 	add.w	r8, r1, #20
 80059d6:	00a3      	lsls	r3, r4, #2
 80059d8:	f100 0514 	add.w	r5, r0, #20
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ec:	3301      	adds	r3, #1
 80059ee:	429a      	cmp	r2, r3
 80059f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80059f8:	d32e      	bcc.n	8005a58 <quorem+0x96>
 80059fa:	f04f 0a00 	mov.w	sl, #0
 80059fe:	46c4      	mov	ip, r8
 8005a00:	46ae      	mov	lr, r5
 8005a02:	46d3      	mov	fp, sl
 8005a04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a08:	b298      	uxth	r0, r3
 8005a0a:	fb06 a000 	mla	r0, r6, r0, sl
 8005a0e:	0c02      	lsrs	r2, r0, #16
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	fb06 2303 	mla	r3, r6, r3, r2
 8005a16:	f8de 2000 	ldr.w	r2, [lr]
 8005a1a:	b280      	uxth	r0, r0
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	1a12      	subs	r2, r2, r0
 8005a20:	445a      	add	r2, fp
 8005a22:	f8de 0000 	ldr.w	r0, [lr]
 8005a26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a34:	b292      	uxth	r2, r2
 8005a36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a3a:	45e1      	cmp	r9, ip
 8005a3c:	f84e 2b04 	str.w	r2, [lr], #4
 8005a40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a44:	d2de      	bcs.n	8005a04 <quorem+0x42>
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	58eb      	ldr	r3, [r5, r3]
 8005a4a:	b92b      	cbnz	r3, 8005a58 <quorem+0x96>
 8005a4c:	9b01      	ldr	r3, [sp, #4]
 8005a4e:	3b04      	subs	r3, #4
 8005a50:	429d      	cmp	r5, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	d32f      	bcc.n	8005ab6 <quorem+0xf4>
 8005a56:	613c      	str	r4, [r7, #16]
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f001 f97f 	bl	8006d5c <__mcmp>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	db25      	blt.n	8005aae <quorem+0xec>
 8005a62:	4629      	mov	r1, r5
 8005a64:	2000      	movs	r0, #0
 8005a66:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a6a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a6e:	fa1f fe82 	uxth.w	lr, r2
 8005a72:	fa1f f38c 	uxth.w	r3, ip
 8005a76:	eba3 030e 	sub.w	r3, r3, lr
 8005a7a:	4403      	add	r3, r0
 8005a7c:	0c12      	lsrs	r2, r2, #16
 8005a7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a8c:	45c1      	cmp	r9, r8
 8005a8e:	f841 3b04 	str.w	r3, [r1], #4
 8005a92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a96:	d2e6      	bcs.n	8005a66 <quorem+0xa4>
 8005a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aa0:	b922      	cbnz	r2, 8005aac <quorem+0xea>
 8005aa2:	3b04      	subs	r3, #4
 8005aa4:	429d      	cmp	r5, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	d30b      	bcc.n	8005ac2 <quorem+0x100>
 8005aaa:	613c      	str	r4, [r7, #16]
 8005aac:	3601      	adds	r6, #1
 8005aae:	4630      	mov	r0, r6
 8005ab0:	b003      	add	sp, #12
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	d1cb      	bne.n	8005a56 <quorem+0x94>
 8005abe:	3c01      	subs	r4, #1
 8005ac0:	e7c6      	b.n	8005a50 <quorem+0x8e>
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1ef      	bne.n	8005aaa <quorem+0xe8>
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e7ea      	b.n	8005aa4 <quorem+0xe2>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7ee      	b.n	8005ab0 <quorem+0xee>
 8005ad2:	0000      	movs	r0, r0
 8005ad4:	0000      	movs	r0, r0
	...

08005ad8 <_dtoa_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	69c7      	ldr	r7, [r0, #28]
 8005ade:	b097      	sub	sp, #92	@ 0x5c
 8005ae0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005ae4:	ec55 4b10 	vmov	r4, r5, d0
 8005ae8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005aea:	9107      	str	r1, [sp, #28]
 8005aec:	4681      	mov	r9, r0
 8005aee:	920c      	str	r2, [sp, #48]	@ 0x30
 8005af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005af2:	b97f      	cbnz	r7, 8005b14 <_dtoa_r+0x3c>
 8005af4:	2010      	movs	r0, #16
 8005af6:	f000 fe09 	bl	800670c <malloc>
 8005afa:	4602      	mov	r2, r0
 8005afc:	f8c9 001c 	str.w	r0, [r9, #28]
 8005b00:	b920      	cbnz	r0, 8005b0c <_dtoa_r+0x34>
 8005b02:	4ba9      	ldr	r3, [pc, #676]	@ (8005da8 <_dtoa_r+0x2d0>)
 8005b04:	21ef      	movs	r1, #239	@ 0xef
 8005b06:	48a9      	ldr	r0, [pc, #676]	@ (8005dac <_dtoa_r+0x2d4>)
 8005b08:	f001 fc5e 	bl	80073c8 <__assert_func>
 8005b0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b10:	6007      	str	r7, [r0, #0]
 8005b12:	60c7      	str	r7, [r0, #12]
 8005b14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	b159      	cbz	r1, 8005b34 <_dtoa_r+0x5c>
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	604a      	str	r2, [r1, #4]
 8005b20:	2301      	movs	r3, #1
 8005b22:	4093      	lsls	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 fee6 	bl	80068f8 <_Bfree>
 8005b2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	1e2b      	subs	r3, r5, #0
 8005b36:	bfb9      	ittee	lt
 8005b38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b3c:	9305      	strlt	r3, [sp, #20]
 8005b3e:	2300      	movge	r3, #0
 8005b40:	6033      	strge	r3, [r6, #0]
 8005b42:	9f05      	ldr	r7, [sp, #20]
 8005b44:	4b9a      	ldr	r3, [pc, #616]	@ (8005db0 <_dtoa_r+0x2d8>)
 8005b46:	bfbc      	itt	lt
 8005b48:	2201      	movlt	r2, #1
 8005b4a:	6032      	strlt	r2, [r6, #0]
 8005b4c:	43bb      	bics	r3, r7
 8005b4e:	d112      	bne.n	8005b76 <_dtoa_r+0x9e>
 8005b50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b5c:	4323      	orrs	r3, r4
 8005b5e:	f000 855a 	beq.w	8006616 <_dtoa_r+0xb3e>
 8005b62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005dc4 <_dtoa_r+0x2ec>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 855c 	beq.w	8006626 <_dtoa_r+0xb4e>
 8005b6e:	f10a 0303 	add.w	r3, sl, #3
 8005b72:	f000 bd56 	b.w	8006622 <_dtoa_r+0xb4a>
 8005b76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	ec51 0b17 	vmov	r0, r1, d7
 8005b80:	2300      	movs	r3, #0
 8005b82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005b86:	f7fa ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	b158      	cbz	r0, 8005ba6 <_dtoa_r+0xce>
 8005b8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b90:	2301      	movs	r3, #1
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b96:	b113      	cbz	r3, 8005b9e <_dtoa_r+0xc6>
 8005b98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005b9a:	4b86      	ldr	r3, [pc, #536]	@ (8005db4 <_dtoa_r+0x2dc>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005dc8 <_dtoa_r+0x2f0>
 8005ba2:	f000 bd40 	b.w	8006626 <_dtoa_r+0xb4e>
 8005ba6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005baa:	aa14      	add	r2, sp, #80	@ 0x50
 8005bac:	a915      	add	r1, sp, #84	@ 0x54
 8005bae:	4648      	mov	r0, r9
 8005bb0:	f001 f984 	bl	8006ebc <__d2b>
 8005bb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005bb8:	9002      	str	r0, [sp, #8]
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d078      	beq.n	8005cb0 <_dtoa_r+0x1d8>
 8005bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bc0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005bd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005bd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005bd8:	4619      	mov	r1, r3
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <_dtoa_r+0x2e0>)
 8005bde:	f7fa fb5b 	bl	8000298 <__aeabi_dsub>
 8005be2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005d90 <_dtoa_r+0x2b8>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fd0e 	bl	8000608 <__aeabi_dmul>
 8005bec:	a36a      	add	r3, pc, #424	@ (adr r3, 8005d98 <_dtoa_r+0x2c0>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fb53 	bl	800029c <__adddf3>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	f7fa fc9a 	bl	8000534 <__aeabi_i2d>
 8005c00:	a367      	add	r3, pc, #412	@ (adr r3, 8005da0 <_dtoa_r+0x2c8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fcff 	bl	8000608 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa fb43 	bl	800029c <__adddf3>
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	f7fa ffa5 	bl	8000b68 <__aeabi_d2iz>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4607      	mov	r7, r0
 8005c22:	2300      	movs	r3, #0
 8005c24:	4620      	mov	r0, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	f7fa ff60 	bl	8000aec <__aeabi_dcmplt>
 8005c2c:	b140      	cbz	r0, 8005c40 <_dtoa_r+0x168>
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7fa fc80 	bl	8000534 <__aeabi_i2d>
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	f7fa ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c3c:	b900      	cbnz	r0, 8005c40 <_dtoa_r+0x168>
 8005c3e:	3f01      	subs	r7, #1
 8005c40:	2f16      	cmp	r7, #22
 8005c42:	d852      	bhi.n	8005cea <_dtoa_r+0x212>
 8005c44:	4b5d      	ldr	r3, [pc, #372]	@ (8005dbc <_dtoa_r+0x2e4>)
 8005c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c52:	f7fa ff4b 	bl	8000aec <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d049      	beq.n	8005cee <_dtoa_r+0x216>
 8005c5a:	3f01      	subs	r7, #1
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c62:	1b9b      	subs	r3, r3, r6
 8005c64:	1e5a      	subs	r2, r3, #1
 8005c66:	bf45      	ittet	mi
 8005c68:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c6c:	9300      	strmi	r3, [sp, #0]
 8005c6e:	2300      	movpl	r3, #0
 8005c70:	2300      	movmi	r3, #0
 8005c72:	9206      	str	r2, [sp, #24]
 8005c74:	bf54      	ite	pl
 8005c76:	9300      	strpl	r3, [sp, #0]
 8005c78:	9306      	strmi	r3, [sp, #24]
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	db39      	blt.n	8005cf2 <_dtoa_r+0x21a>
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	970d      	str	r7, [sp, #52]	@ 0x34
 8005c82:	443b      	add	r3, r7
 8005c84:	9306      	str	r3, [sp, #24]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9308      	str	r3, [sp, #32]
 8005c8a:	9b07      	ldr	r3, [sp, #28]
 8005c8c:	2b09      	cmp	r3, #9
 8005c8e:	d863      	bhi.n	8005d58 <_dtoa_r+0x280>
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	bfc4      	itt	gt
 8005c94:	3b04      	subgt	r3, #4
 8005c96:	9307      	strgt	r3, [sp, #28]
 8005c98:	9b07      	ldr	r3, [sp, #28]
 8005c9a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c9e:	bfcc      	ite	gt
 8005ca0:	2400      	movgt	r4, #0
 8005ca2:	2401      	movle	r4, #1
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d863      	bhi.n	8005d70 <_dtoa_r+0x298>
 8005ca8:	e8df f003 	tbb	[pc, r3]
 8005cac:	2b375452 	.word	0x2b375452
 8005cb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005cb4:	441e      	add	r6, r3
 8005cb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	bfc1      	itttt	gt
 8005cbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005cc2:	409f      	lslgt	r7, r3
 8005cc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005cc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ccc:	bfd6      	itet	le
 8005cce:	f1c3 0320 	rsble	r3, r3, #32
 8005cd2:	ea47 0003 	orrgt.w	r0, r7, r3
 8005cd6:	fa04 f003 	lslle.w	r0, r4, r3
 8005cda:	f7fa fc1b 	bl	8000514 <__aeabi_ui2d>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ce4:	3e01      	subs	r6, #1
 8005ce6:	9212      	str	r2, [sp, #72]	@ 0x48
 8005ce8:	e776      	b.n	8005bd8 <_dtoa_r+0x100>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7b7      	b.n	8005c5e <_dtoa_r+0x186>
 8005cee:	9010      	str	r0, [sp, #64]	@ 0x40
 8005cf0:	e7b6      	b.n	8005c60 <_dtoa_r+0x188>
 8005cf2:	9b00      	ldr	r3, [sp, #0]
 8005cf4:	1bdb      	subs	r3, r3, r7
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	427b      	negs	r3, r7
 8005cfa:	9308      	str	r3, [sp, #32]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d00:	e7c3      	b.n	8005c8a <_dtoa_r+0x1b2>
 8005d02:	2301      	movs	r3, #1
 8005d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d08:	eb07 0b03 	add.w	fp, r7, r3
 8005d0c:	f10b 0301 	add.w	r3, fp, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	bfb8      	it	lt
 8005d16:	2301      	movlt	r3, #1
 8005d18:	e006      	b.n	8005d28 <_dtoa_r+0x250>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dd28      	ble.n	8005d76 <_dtoa_r+0x29e>
 8005d24:	469b      	mov	fp, r3
 8005d26:	9303      	str	r3, [sp, #12]
 8005d28:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	2204      	movs	r2, #4
 8005d30:	f102 0514 	add.w	r5, r2, #20
 8005d34:	429d      	cmp	r5, r3
 8005d36:	d926      	bls.n	8005d86 <_dtoa_r+0x2ae>
 8005d38:	6041      	str	r1, [r0, #4]
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f000 fd9c 	bl	8006878 <_Balloc>
 8005d40:	4682      	mov	sl, r0
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d142      	bne.n	8005dcc <_dtoa_r+0x2f4>
 8005d46:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <_dtoa_r+0x2e8>)
 8005d48:	4602      	mov	r2, r0
 8005d4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d4e:	e6da      	b.n	8005b06 <_dtoa_r+0x2e>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e7e3      	b.n	8005d1c <_dtoa_r+0x244>
 8005d54:	2300      	movs	r3, #0
 8005d56:	e7d5      	b.n	8005d04 <_dtoa_r+0x22c>
 8005d58:	2401      	movs	r4, #1
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9307      	str	r3, [sp, #28]
 8005d5e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005d60:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8cd b00c 	str.w	fp, [sp, #12]
 8005d6a:	2312      	movs	r3, #18
 8005d6c:	920c      	str	r2, [sp, #48]	@ 0x30
 8005d6e:	e7db      	b.n	8005d28 <_dtoa_r+0x250>
 8005d70:	2301      	movs	r3, #1
 8005d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d74:	e7f4      	b.n	8005d60 <_dtoa_r+0x288>
 8005d76:	f04f 0b01 	mov.w	fp, #1
 8005d7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005d7e:	465b      	mov	r3, fp
 8005d80:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005d84:	e7d0      	b.n	8005d28 <_dtoa_r+0x250>
 8005d86:	3101      	adds	r1, #1
 8005d88:	0052      	lsls	r2, r2, #1
 8005d8a:	e7d1      	b.n	8005d30 <_dtoa_r+0x258>
 8005d8c:	f3af 8000 	nop.w
 8005d90:	636f4361 	.word	0x636f4361
 8005d94:	3fd287a7 	.word	0x3fd287a7
 8005d98:	8b60c8b3 	.word	0x8b60c8b3
 8005d9c:	3fc68a28 	.word	0x3fc68a28
 8005da0:	509f79fb 	.word	0x509f79fb
 8005da4:	3fd34413 	.word	0x3fd34413
 8005da8:	08007b19 	.word	0x08007b19
 8005dac:	08007b30 	.word	0x08007b30
 8005db0:	7ff00000 	.word	0x7ff00000
 8005db4:	08007ae9 	.word	0x08007ae9
 8005db8:	3ff80000 	.word	0x3ff80000
 8005dbc:	08007c80 	.word	0x08007c80
 8005dc0:	08007b88 	.word	0x08007b88
 8005dc4:	08007b15 	.word	0x08007b15
 8005dc8:	08007ae8 	.word	0x08007ae8
 8005dcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	2b0e      	cmp	r3, #14
 8005dd6:	f200 80a1 	bhi.w	8005f1c <_dtoa_r+0x444>
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	f000 809e 	beq.w	8005f1c <_dtoa_r+0x444>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	dd33      	ble.n	8005e4c <_dtoa_r+0x374>
 8005de4:	4b9c      	ldr	r3, [pc, #624]	@ (8006058 <_dtoa_r+0x580>)
 8005de6:	f007 020f 	and.w	r2, r7, #15
 8005dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dee:	ed93 7b00 	vldr	d7, [r3]
 8005df2:	05f8      	lsls	r0, r7, #23
 8005df4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005df8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005dfc:	d516      	bpl.n	8005e2c <_dtoa_r+0x354>
 8005dfe:	4b97      	ldr	r3, [pc, #604]	@ (800605c <_dtoa_r+0x584>)
 8005e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e08:	f7fa fd28 	bl	800085c <__aeabi_ddiv>
 8005e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e10:	f004 040f 	and.w	r4, r4, #15
 8005e14:	2603      	movs	r6, #3
 8005e16:	4d91      	ldr	r5, [pc, #580]	@ (800605c <_dtoa_r+0x584>)
 8005e18:	b954      	cbnz	r4, 8005e30 <_dtoa_r+0x358>
 8005e1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e22:	f7fa fd1b 	bl	800085c <__aeabi_ddiv>
 8005e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e2a:	e028      	b.n	8005e7e <_dtoa_r+0x3a6>
 8005e2c:	2602      	movs	r6, #2
 8005e2e:	e7f2      	b.n	8005e16 <_dtoa_r+0x33e>
 8005e30:	07e1      	lsls	r1, r4, #31
 8005e32:	d508      	bpl.n	8005e46 <_dtoa_r+0x36e>
 8005e34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e3c:	f7fa fbe4 	bl	8000608 <__aeabi_dmul>
 8005e40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e44:	3601      	adds	r6, #1
 8005e46:	1064      	asrs	r4, r4, #1
 8005e48:	3508      	adds	r5, #8
 8005e4a:	e7e5      	b.n	8005e18 <_dtoa_r+0x340>
 8005e4c:	f000 80af 	beq.w	8005fae <_dtoa_r+0x4d6>
 8005e50:	427c      	negs	r4, r7
 8005e52:	4b81      	ldr	r3, [pc, #516]	@ (8006058 <_dtoa_r+0x580>)
 8005e54:	4d81      	ldr	r5, [pc, #516]	@ (800605c <_dtoa_r+0x584>)
 8005e56:	f004 020f 	and.w	r2, r4, #15
 8005e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e66:	f7fa fbcf 	bl	8000608 <__aeabi_dmul>
 8005e6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e6e:	1124      	asrs	r4, r4, #4
 8005e70:	2300      	movs	r3, #0
 8005e72:	2602      	movs	r6, #2
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	f040 808f 	bne.w	8005f98 <_dtoa_r+0x4c0>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1d3      	bne.n	8005e26 <_dtoa_r+0x34e>
 8005e7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8094 	beq.w	8005fb2 <_dtoa_r+0x4da>
 8005e8a:	4b75      	ldr	r3, [pc, #468]	@ (8006060 <_dtoa_r+0x588>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fa fe2b 	bl	8000aec <__aeabi_dcmplt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f000 808b 	beq.w	8005fb2 <_dtoa_r+0x4da>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8087 	beq.w	8005fb2 <_dtoa_r+0x4da>
 8005ea4:	f1bb 0f00 	cmp.w	fp, #0
 8005ea8:	dd34      	ble.n	8005f14 <_dtoa_r+0x43c>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4b6d      	ldr	r3, [pc, #436]	@ (8006064 <_dtoa_r+0x58c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7fa fba9 	bl	8000608 <__aeabi_dmul>
 8005eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eba:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	465c      	mov	r4, fp
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7fa fb36 	bl	8000534 <__aeabi_i2d>
 8005ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ecc:	f7fa fb9c 	bl	8000608 <__aeabi_dmul>
 8005ed0:	4b65      	ldr	r3, [pc, #404]	@ (8006068 <_dtoa_r+0x590>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7fa f9e2 	bl	800029c <__adddf3>
 8005ed8:	4605      	mov	r5, r0
 8005eda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ede:	2c00      	cmp	r4, #0
 8005ee0:	d16a      	bne.n	8005fb8 <_dtoa_r+0x4e0>
 8005ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee6:	4b61      	ldr	r3, [pc, #388]	@ (800606c <_dtoa_r+0x594>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f7fa f9d5 	bl	8000298 <__aeabi_dsub>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ef6:	462a      	mov	r2, r5
 8005ef8:	4633      	mov	r3, r6
 8005efa:	f7fa fe15 	bl	8000b28 <__aeabi_dcmpgt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 8298 	bne.w	8006434 <_dtoa_r+0x95c>
 8005f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f08:	462a      	mov	r2, r5
 8005f0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f0e:	f7fa fded 	bl	8000aec <__aeabi_dcmplt>
 8005f12:	bb38      	cbnz	r0, 8005f64 <_dtoa_r+0x48c>
 8005f14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005f18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f2c0 8157 	blt.w	80061d2 <_dtoa_r+0x6fa>
 8005f24:	2f0e      	cmp	r7, #14
 8005f26:	f300 8154 	bgt.w	80061d2 <_dtoa_r+0x6fa>
 8005f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8006058 <_dtoa_r+0x580>)
 8005f2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f30:	ed93 7b00 	vldr	d7, [r3]
 8005f34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	ed8d 7b00 	vstr	d7, [sp]
 8005f3c:	f280 80e5 	bge.w	800610a <_dtoa_r+0x632>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f300 80e1 	bgt.w	800610a <_dtoa_r+0x632>
 8005f48:	d10c      	bne.n	8005f64 <_dtoa_r+0x48c>
 8005f4a:	4b48      	ldr	r3, [pc, #288]	@ (800606c <_dtoa_r+0x594>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	ec51 0b17 	vmov	r0, r1, d7
 8005f52:	f7fa fb59 	bl	8000608 <__aeabi_dmul>
 8005f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5a:	f7fa fddb 	bl	8000b14 <__aeabi_dcmpge>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f000 8266 	beq.w	8006430 <_dtoa_r+0x958>
 8005f64:	2400      	movs	r4, #0
 8005f66:	4625      	mov	r5, r4
 8005f68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f6a:	4656      	mov	r6, sl
 8005f6c:	ea6f 0803 	mvn.w	r8, r3
 8005f70:	2700      	movs	r7, #0
 8005f72:	4621      	mov	r1, r4
 8005f74:	4648      	mov	r0, r9
 8005f76:	f000 fcbf 	bl	80068f8 <_Bfree>
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	f000 80bd 	beq.w	80060fa <_dtoa_r+0x622>
 8005f80:	b12f      	cbz	r7, 8005f8e <_dtoa_r+0x4b6>
 8005f82:	42af      	cmp	r7, r5
 8005f84:	d003      	beq.n	8005f8e <_dtoa_r+0x4b6>
 8005f86:	4639      	mov	r1, r7
 8005f88:	4648      	mov	r0, r9
 8005f8a:	f000 fcb5 	bl	80068f8 <_Bfree>
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4648      	mov	r0, r9
 8005f92:	f000 fcb1 	bl	80068f8 <_Bfree>
 8005f96:	e0b0      	b.n	80060fa <_dtoa_r+0x622>
 8005f98:	07e2      	lsls	r2, r4, #31
 8005f9a:	d505      	bpl.n	8005fa8 <_dtoa_r+0x4d0>
 8005f9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fa0:	f7fa fb32 	bl	8000608 <__aeabi_dmul>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	1064      	asrs	r4, r4, #1
 8005faa:	3508      	adds	r5, #8
 8005fac:	e762      	b.n	8005e74 <_dtoa_r+0x39c>
 8005fae:	2602      	movs	r6, #2
 8005fb0:	e765      	b.n	8005e7e <_dtoa_r+0x3a6>
 8005fb2:	9c03      	ldr	r4, [sp, #12]
 8005fb4:	46b8      	mov	r8, r7
 8005fb6:	e784      	b.n	8005ec2 <_dtoa_r+0x3ea>
 8005fb8:	4b27      	ldr	r3, [pc, #156]	@ (8006058 <_dtoa_r+0x580>)
 8005fba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fc4:	4454      	add	r4, sl
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d054      	beq.n	8006074 <_dtoa_r+0x59c>
 8005fca:	4929      	ldr	r1, [pc, #164]	@ (8006070 <_dtoa_r+0x598>)
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f7fa fc45 	bl	800085c <__aeabi_ddiv>
 8005fd2:	4633      	mov	r3, r6
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	f7fa f95f 	bl	8000298 <__aeabi_dsub>
 8005fda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fde:	4656      	mov	r6, sl
 8005fe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe4:	f7fa fdc0 	bl	8000b68 <__aeabi_d2iz>
 8005fe8:	4605      	mov	r5, r0
 8005fea:	f7fa faa3 	bl	8000534 <__aeabi_i2d>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff6:	f7fa f94f 	bl	8000298 <__aeabi_dsub>
 8005ffa:	3530      	adds	r5, #48	@ 0x30
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006004:	f806 5b01 	strb.w	r5, [r6], #1
 8006008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800600c:	f7fa fd6e 	bl	8000aec <__aeabi_dcmplt>
 8006010:	2800      	cmp	r0, #0
 8006012:	d172      	bne.n	80060fa <_dtoa_r+0x622>
 8006014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006018:	4911      	ldr	r1, [pc, #68]	@ (8006060 <_dtoa_r+0x588>)
 800601a:	2000      	movs	r0, #0
 800601c:	f7fa f93c 	bl	8000298 <__aeabi_dsub>
 8006020:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006024:	f7fa fd62 	bl	8000aec <__aeabi_dcmplt>
 8006028:	2800      	cmp	r0, #0
 800602a:	f040 80b4 	bne.w	8006196 <_dtoa_r+0x6be>
 800602e:	42a6      	cmp	r6, r4
 8006030:	f43f af70 	beq.w	8005f14 <_dtoa_r+0x43c>
 8006034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006038:	4b0a      	ldr	r3, [pc, #40]	@ (8006064 <_dtoa_r+0x58c>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa fae4 	bl	8000608 <__aeabi_dmul>
 8006040:	4b08      	ldr	r3, [pc, #32]	@ (8006064 <_dtoa_r+0x58c>)
 8006042:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006046:	2200      	movs	r2, #0
 8006048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800604c:	f7fa fadc 	bl	8000608 <__aeabi_dmul>
 8006050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006054:	e7c4      	b.n	8005fe0 <_dtoa_r+0x508>
 8006056:	bf00      	nop
 8006058:	08007c80 	.word	0x08007c80
 800605c:	08007c58 	.word	0x08007c58
 8006060:	3ff00000 	.word	0x3ff00000
 8006064:	40240000 	.word	0x40240000
 8006068:	401c0000 	.word	0x401c0000
 800606c:	40140000 	.word	0x40140000
 8006070:	3fe00000 	.word	0x3fe00000
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	f7fa fac6 	bl	8000608 <__aeabi_dmul>
 800607c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006080:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006082:	4656      	mov	r6, sl
 8006084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006088:	f7fa fd6e 	bl	8000b68 <__aeabi_d2iz>
 800608c:	4605      	mov	r5, r0
 800608e:	f7fa fa51 	bl	8000534 <__aeabi_i2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609a:	f7fa f8fd 	bl	8000298 <__aeabi_dsub>
 800609e:	3530      	adds	r5, #48	@ 0x30
 80060a0:	f806 5b01 	strb.w	r5, [r6], #1
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	d124      	bne.n	80060fe <_dtoa_r+0x626>
 80060b4:	4baf      	ldr	r3, [pc, #700]	@ (8006374 <_dtoa_r+0x89c>)
 80060b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80060ba:	f7fa f8ef 	bl	800029c <__adddf3>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060c6:	f7fa fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d163      	bne.n	8006196 <_dtoa_r+0x6be>
 80060ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80060d2:	49a8      	ldr	r1, [pc, #672]	@ (8006374 <_dtoa_r+0x89c>)
 80060d4:	2000      	movs	r0, #0
 80060d6:	f7fa f8df 	bl	8000298 <__aeabi_dsub>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060e2:	f7fa fd03 	bl	8000aec <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f43f af14 	beq.w	8005f14 <_dtoa_r+0x43c>
 80060ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80060ee:	1e73      	subs	r3, r6, #1
 80060f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060f6:	2b30      	cmp	r3, #48	@ 0x30
 80060f8:	d0f8      	beq.n	80060ec <_dtoa_r+0x614>
 80060fa:	4647      	mov	r7, r8
 80060fc:	e03b      	b.n	8006176 <_dtoa_r+0x69e>
 80060fe:	4b9e      	ldr	r3, [pc, #632]	@ (8006378 <_dtoa_r+0x8a0>)
 8006100:	f7fa fa82 	bl	8000608 <__aeabi_dmul>
 8006104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006108:	e7bc      	b.n	8006084 <_dtoa_r+0x5ac>
 800610a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800610e:	4656      	mov	r6, sl
 8006110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa fba0 	bl	800085c <__aeabi_ddiv>
 800611c:	f7fa fd24 	bl	8000b68 <__aeabi_d2iz>
 8006120:	4680      	mov	r8, r0
 8006122:	f7fa fa07 	bl	8000534 <__aeabi_i2d>
 8006126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800612a:	f7fa fa6d 	bl	8000608 <__aeabi_dmul>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4620      	mov	r0, r4
 8006134:	4629      	mov	r1, r5
 8006136:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800613a:	f7fa f8ad 	bl	8000298 <__aeabi_dsub>
 800613e:	f806 4b01 	strb.w	r4, [r6], #1
 8006142:	9d03      	ldr	r5, [sp, #12]
 8006144:	eba6 040a 	sub.w	r4, r6, sl
 8006148:	42a5      	cmp	r5, r4
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	d133      	bne.n	80061b8 <_dtoa_r+0x6e0>
 8006150:	f7fa f8a4 	bl	800029c <__adddf3>
 8006154:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006158:	4604      	mov	r4, r0
 800615a:	460d      	mov	r5, r1
 800615c:	f7fa fce4 	bl	8000b28 <__aeabi_dcmpgt>
 8006160:	b9c0      	cbnz	r0, 8006194 <_dtoa_r+0x6bc>
 8006162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f7fa fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800616e:	b110      	cbz	r0, 8006176 <_dtoa_r+0x69e>
 8006170:	f018 0f01 	tst.w	r8, #1
 8006174:	d10e      	bne.n	8006194 <_dtoa_r+0x6bc>
 8006176:	9902      	ldr	r1, [sp, #8]
 8006178:	4648      	mov	r0, r9
 800617a:	f000 fbbd 	bl	80068f8 <_Bfree>
 800617e:	2300      	movs	r3, #0
 8006180:	7033      	strb	r3, [r6, #0]
 8006182:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006184:	3701      	adds	r7, #1
 8006186:	601f      	str	r7, [r3, #0]
 8006188:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 824b 	beq.w	8006626 <_dtoa_r+0xb4e>
 8006190:	601e      	str	r6, [r3, #0]
 8006192:	e248      	b.n	8006626 <_dtoa_r+0xb4e>
 8006194:	46b8      	mov	r8, r7
 8006196:	4633      	mov	r3, r6
 8006198:	461e      	mov	r6, r3
 800619a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800619e:	2a39      	cmp	r2, #57	@ 0x39
 80061a0:	d106      	bne.n	80061b0 <_dtoa_r+0x6d8>
 80061a2:	459a      	cmp	sl, r3
 80061a4:	d1f8      	bne.n	8006198 <_dtoa_r+0x6c0>
 80061a6:	2230      	movs	r2, #48	@ 0x30
 80061a8:	f108 0801 	add.w	r8, r8, #1
 80061ac:	f88a 2000 	strb.w	r2, [sl]
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	3201      	adds	r2, #1
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	e7a0      	b.n	80060fa <_dtoa_r+0x622>
 80061b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006378 <_dtoa_r+0x8a0>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	f7fa fa24 	bl	8000608 <__aeabi_dmul>
 80061c0:	2200      	movs	r2, #0
 80061c2:	2300      	movs	r3, #0
 80061c4:	4604      	mov	r4, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	f7fa fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d09f      	beq.n	8006110 <_dtoa_r+0x638>
 80061d0:	e7d1      	b.n	8006176 <_dtoa_r+0x69e>
 80061d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	f000 80ea 	beq.w	80063ae <_dtoa_r+0x8d6>
 80061da:	9a07      	ldr	r2, [sp, #28]
 80061dc:	2a01      	cmp	r2, #1
 80061de:	f300 80cd 	bgt.w	800637c <_dtoa_r+0x8a4>
 80061e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	f000 80c1 	beq.w	800636c <_dtoa_r+0x894>
 80061ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80061ee:	9c08      	ldr	r4, [sp, #32]
 80061f0:	9e00      	ldr	r6, [sp, #0]
 80061f2:	9a00      	ldr	r2, [sp, #0]
 80061f4:	441a      	add	r2, r3
 80061f6:	9200      	str	r2, [sp, #0]
 80061f8:	9a06      	ldr	r2, [sp, #24]
 80061fa:	2101      	movs	r1, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	4648      	mov	r0, r9
 8006200:	9206      	str	r2, [sp, #24]
 8006202:	f000 fc2d 	bl	8006a60 <__i2b>
 8006206:	4605      	mov	r5, r0
 8006208:	b166      	cbz	r6, 8006224 <_dtoa_r+0x74c>
 800620a:	9b06      	ldr	r3, [sp, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dd09      	ble.n	8006224 <_dtoa_r+0x74c>
 8006210:	42b3      	cmp	r3, r6
 8006212:	9a00      	ldr	r2, [sp, #0]
 8006214:	bfa8      	it	ge
 8006216:	4633      	movge	r3, r6
 8006218:	1ad2      	subs	r2, r2, r3
 800621a:	9200      	str	r2, [sp, #0]
 800621c:	9a06      	ldr	r2, [sp, #24]
 800621e:	1af6      	subs	r6, r6, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	9306      	str	r3, [sp, #24]
 8006224:	9b08      	ldr	r3, [sp, #32]
 8006226:	b30b      	cbz	r3, 800626c <_dtoa_r+0x794>
 8006228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80c6 	beq.w	80063bc <_dtoa_r+0x8e4>
 8006230:	2c00      	cmp	r4, #0
 8006232:	f000 80c0 	beq.w	80063b6 <_dtoa_r+0x8de>
 8006236:	4629      	mov	r1, r5
 8006238:	4622      	mov	r2, r4
 800623a:	4648      	mov	r0, r9
 800623c:	f000 fcc8 	bl	8006bd0 <__pow5mult>
 8006240:	9a02      	ldr	r2, [sp, #8]
 8006242:	4601      	mov	r1, r0
 8006244:	4605      	mov	r5, r0
 8006246:	4648      	mov	r0, r9
 8006248:	f000 fc20 	bl	8006a8c <__multiply>
 800624c:	9902      	ldr	r1, [sp, #8]
 800624e:	4680      	mov	r8, r0
 8006250:	4648      	mov	r0, r9
 8006252:	f000 fb51 	bl	80068f8 <_Bfree>
 8006256:	9b08      	ldr	r3, [sp, #32]
 8006258:	1b1b      	subs	r3, r3, r4
 800625a:	9308      	str	r3, [sp, #32]
 800625c:	f000 80b1 	beq.w	80063c2 <_dtoa_r+0x8ea>
 8006260:	9a08      	ldr	r2, [sp, #32]
 8006262:	4641      	mov	r1, r8
 8006264:	4648      	mov	r0, r9
 8006266:	f000 fcb3 	bl	8006bd0 <__pow5mult>
 800626a:	9002      	str	r0, [sp, #8]
 800626c:	2101      	movs	r1, #1
 800626e:	4648      	mov	r0, r9
 8006270:	f000 fbf6 	bl	8006a60 <__i2b>
 8006274:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006276:	4604      	mov	r4, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 81d8 	beq.w	800662e <_dtoa_r+0xb56>
 800627e:	461a      	mov	r2, r3
 8006280:	4601      	mov	r1, r0
 8006282:	4648      	mov	r0, r9
 8006284:	f000 fca4 	bl	8006bd0 <__pow5mult>
 8006288:	9b07      	ldr	r3, [sp, #28]
 800628a:	2b01      	cmp	r3, #1
 800628c:	4604      	mov	r4, r0
 800628e:	f300 809f 	bgt.w	80063d0 <_dtoa_r+0x8f8>
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 8097 	bne.w	80063c8 <_dtoa_r+0x8f0>
 800629a:	9b05      	ldr	r3, [sp, #20]
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 8093 	bne.w	80063cc <_dtoa_r+0x8f4>
 80062a6:	9b05      	ldr	r3, [sp, #20]
 80062a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	051b      	lsls	r3, r3, #20
 80062b0:	b133      	cbz	r3, 80062c0 <_dtoa_r+0x7e8>
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	3301      	adds	r3, #1
 80062bc:	9306      	str	r3, [sp, #24]
 80062be:	2301      	movs	r3, #1
 80062c0:	9308      	str	r3, [sp, #32]
 80062c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 81b8 	beq.w	800663a <_dtoa_r+0xb62>
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062d0:	6918      	ldr	r0, [r3, #16]
 80062d2:	f000 fb79 	bl	80069c8 <__hi0bits>
 80062d6:	f1c0 0020 	rsb	r0, r0, #32
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	4418      	add	r0, r3
 80062de:	f010 001f 	ands.w	r0, r0, #31
 80062e2:	f000 8082 	beq.w	80063ea <_dtoa_r+0x912>
 80062e6:	f1c0 0320 	rsb	r3, r0, #32
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	dd73      	ble.n	80063d6 <_dtoa_r+0x8fe>
 80062ee:	9b00      	ldr	r3, [sp, #0]
 80062f0:	f1c0 001c 	rsb	r0, r0, #28
 80062f4:	4403      	add	r3, r0
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	4403      	add	r3, r0
 80062fc:	4406      	add	r6, r0
 80062fe:	9306      	str	r3, [sp, #24]
 8006300:	9b00      	ldr	r3, [sp, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd05      	ble.n	8006312 <_dtoa_r+0x83a>
 8006306:	9902      	ldr	r1, [sp, #8]
 8006308:	461a      	mov	r2, r3
 800630a:	4648      	mov	r0, r9
 800630c:	f000 fcba 	bl	8006c84 <__lshift>
 8006310:	9002      	str	r0, [sp, #8]
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	dd05      	ble.n	8006324 <_dtoa_r+0x84c>
 8006318:	4621      	mov	r1, r4
 800631a:	461a      	mov	r2, r3
 800631c:	4648      	mov	r0, r9
 800631e:	f000 fcb1 	bl	8006c84 <__lshift>
 8006322:	4604      	mov	r4, r0
 8006324:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d061      	beq.n	80063ee <_dtoa_r+0x916>
 800632a:	9802      	ldr	r0, [sp, #8]
 800632c:	4621      	mov	r1, r4
 800632e:	f000 fd15 	bl	8006d5c <__mcmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	da5b      	bge.n	80063ee <_dtoa_r+0x916>
 8006336:	2300      	movs	r3, #0
 8006338:	9902      	ldr	r1, [sp, #8]
 800633a:	220a      	movs	r2, #10
 800633c:	4648      	mov	r0, r9
 800633e:	f000 fafd 	bl	800693c <__multadd>
 8006342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006344:	9002      	str	r0, [sp, #8]
 8006346:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8177 	beq.w	800663e <_dtoa_r+0xb66>
 8006350:	4629      	mov	r1, r5
 8006352:	2300      	movs	r3, #0
 8006354:	220a      	movs	r2, #10
 8006356:	4648      	mov	r0, r9
 8006358:	f000 faf0 	bl	800693c <__multadd>
 800635c:	f1bb 0f00 	cmp.w	fp, #0
 8006360:	4605      	mov	r5, r0
 8006362:	dc6f      	bgt.n	8006444 <_dtoa_r+0x96c>
 8006364:	9b07      	ldr	r3, [sp, #28]
 8006366:	2b02      	cmp	r3, #2
 8006368:	dc49      	bgt.n	80063fe <_dtoa_r+0x926>
 800636a:	e06b      	b.n	8006444 <_dtoa_r+0x96c>
 800636c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800636e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006372:	e73c      	b.n	80061ee <_dtoa_r+0x716>
 8006374:	3fe00000 	.word	0x3fe00000
 8006378:	40240000 	.word	0x40240000
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	1e5c      	subs	r4, r3, #1
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	42a3      	cmp	r3, r4
 8006384:	db09      	blt.n	800639a <_dtoa_r+0x8c2>
 8006386:	1b1c      	subs	r4, r3, r4
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f6bf af30 	bge.w	80061f0 <_dtoa_r+0x718>
 8006390:	9b00      	ldr	r3, [sp, #0]
 8006392:	9a03      	ldr	r2, [sp, #12]
 8006394:	1a9e      	subs	r6, r3, r2
 8006396:	2300      	movs	r3, #0
 8006398:	e72b      	b.n	80061f2 <_dtoa_r+0x71a>
 800639a:	9b08      	ldr	r3, [sp, #32]
 800639c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800639e:	9408      	str	r4, [sp, #32]
 80063a0:	1ae3      	subs	r3, r4, r3
 80063a2:	441a      	add	r2, r3
 80063a4:	9e00      	ldr	r6, [sp, #0]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80063aa:	2400      	movs	r4, #0
 80063ac:	e721      	b.n	80061f2 <_dtoa_r+0x71a>
 80063ae:	9c08      	ldr	r4, [sp, #32]
 80063b0:	9e00      	ldr	r6, [sp, #0]
 80063b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80063b4:	e728      	b.n	8006208 <_dtoa_r+0x730>
 80063b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80063ba:	e751      	b.n	8006260 <_dtoa_r+0x788>
 80063bc:	9a08      	ldr	r2, [sp, #32]
 80063be:	9902      	ldr	r1, [sp, #8]
 80063c0:	e750      	b.n	8006264 <_dtoa_r+0x78c>
 80063c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80063c6:	e751      	b.n	800626c <_dtoa_r+0x794>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e779      	b.n	80062c0 <_dtoa_r+0x7e8>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	e777      	b.n	80062c0 <_dtoa_r+0x7e8>
 80063d0:	2300      	movs	r3, #0
 80063d2:	9308      	str	r3, [sp, #32]
 80063d4:	e779      	b.n	80062ca <_dtoa_r+0x7f2>
 80063d6:	d093      	beq.n	8006300 <_dtoa_r+0x828>
 80063d8:	9a00      	ldr	r2, [sp, #0]
 80063da:	331c      	adds	r3, #28
 80063dc:	441a      	add	r2, r3
 80063de:	9200      	str	r2, [sp, #0]
 80063e0:	9a06      	ldr	r2, [sp, #24]
 80063e2:	441a      	add	r2, r3
 80063e4:	441e      	add	r6, r3
 80063e6:	9206      	str	r2, [sp, #24]
 80063e8:	e78a      	b.n	8006300 <_dtoa_r+0x828>
 80063ea:	4603      	mov	r3, r0
 80063ec:	e7f4      	b.n	80063d8 <_dtoa_r+0x900>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	46b8      	mov	r8, r7
 80063f4:	dc20      	bgt.n	8006438 <_dtoa_r+0x960>
 80063f6:	469b      	mov	fp, r3
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	dd1e      	ble.n	800643c <_dtoa_r+0x964>
 80063fe:	f1bb 0f00 	cmp.w	fp, #0
 8006402:	f47f adb1 	bne.w	8005f68 <_dtoa_r+0x490>
 8006406:	4621      	mov	r1, r4
 8006408:	465b      	mov	r3, fp
 800640a:	2205      	movs	r2, #5
 800640c:	4648      	mov	r0, r9
 800640e:	f000 fa95 	bl	800693c <__multadd>
 8006412:	4601      	mov	r1, r0
 8006414:	4604      	mov	r4, r0
 8006416:	9802      	ldr	r0, [sp, #8]
 8006418:	f000 fca0 	bl	8006d5c <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	f77f ada3 	ble.w	8005f68 <_dtoa_r+0x490>
 8006422:	4656      	mov	r6, sl
 8006424:	2331      	movs	r3, #49	@ 0x31
 8006426:	f806 3b01 	strb.w	r3, [r6], #1
 800642a:	f108 0801 	add.w	r8, r8, #1
 800642e:	e59f      	b.n	8005f70 <_dtoa_r+0x498>
 8006430:	9c03      	ldr	r4, [sp, #12]
 8006432:	46b8      	mov	r8, r7
 8006434:	4625      	mov	r5, r4
 8006436:	e7f4      	b.n	8006422 <_dtoa_r+0x94a>
 8006438:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800643c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8101 	beq.w	8006646 <_dtoa_r+0xb6e>
 8006444:	2e00      	cmp	r6, #0
 8006446:	dd05      	ble.n	8006454 <_dtoa_r+0x97c>
 8006448:	4629      	mov	r1, r5
 800644a:	4632      	mov	r2, r6
 800644c:	4648      	mov	r0, r9
 800644e:	f000 fc19 	bl	8006c84 <__lshift>
 8006452:	4605      	mov	r5, r0
 8006454:	9b08      	ldr	r3, [sp, #32]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d05c      	beq.n	8006514 <_dtoa_r+0xa3c>
 800645a:	6869      	ldr	r1, [r5, #4]
 800645c:	4648      	mov	r0, r9
 800645e:	f000 fa0b 	bl	8006878 <_Balloc>
 8006462:	4606      	mov	r6, r0
 8006464:	b928      	cbnz	r0, 8006472 <_dtoa_r+0x99a>
 8006466:	4b82      	ldr	r3, [pc, #520]	@ (8006670 <_dtoa_r+0xb98>)
 8006468:	4602      	mov	r2, r0
 800646a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800646e:	f7ff bb4a 	b.w	8005b06 <_dtoa_r+0x2e>
 8006472:	692a      	ldr	r2, [r5, #16]
 8006474:	3202      	adds	r2, #2
 8006476:	0092      	lsls	r2, r2, #2
 8006478:	f105 010c 	add.w	r1, r5, #12
 800647c:	300c      	adds	r0, #12
 800647e:	f7ff fa92 	bl	80059a6 <memcpy>
 8006482:	2201      	movs	r2, #1
 8006484:	4631      	mov	r1, r6
 8006486:	4648      	mov	r0, r9
 8006488:	f000 fbfc 	bl	8006c84 <__lshift>
 800648c:	f10a 0301 	add.w	r3, sl, #1
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	eb0a 030b 	add.w	r3, sl, fp
 8006496:	9308      	str	r3, [sp, #32]
 8006498:	9b04      	ldr	r3, [sp, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	462f      	mov	r7, r5
 80064a0:	9306      	str	r3, [sp, #24]
 80064a2:	4605      	mov	r5, r0
 80064a4:	9b00      	ldr	r3, [sp, #0]
 80064a6:	9802      	ldr	r0, [sp, #8]
 80064a8:	4621      	mov	r1, r4
 80064aa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80064ae:	f7ff fa88 	bl	80059c2 <quorem>
 80064b2:	4603      	mov	r3, r0
 80064b4:	3330      	adds	r3, #48	@ 0x30
 80064b6:	9003      	str	r0, [sp, #12]
 80064b8:	4639      	mov	r1, r7
 80064ba:	9802      	ldr	r0, [sp, #8]
 80064bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064be:	f000 fc4d 	bl	8006d5c <__mcmp>
 80064c2:	462a      	mov	r2, r5
 80064c4:	9004      	str	r0, [sp, #16]
 80064c6:	4621      	mov	r1, r4
 80064c8:	4648      	mov	r0, r9
 80064ca:	f000 fc63 	bl	8006d94 <__mdiff>
 80064ce:	68c2      	ldr	r2, [r0, #12]
 80064d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d2:	4606      	mov	r6, r0
 80064d4:	bb02      	cbnz	r2, 8006518 <_dtoa_r+0xa40>
 80064d6:	4601      	mov	r1, r0
 80064d8:	9802      	ldr	r0, [sp, #8]
 80064da:	f000 fc3f 	bl	8006d5c <__mcmp>
 80064de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e0:	4602      	mov	r2, r0
 80064e2:	4631      	mov	r1, r6
 80064e4:	4648      	mov	r0, r9
 80064e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ea:	f000 fa05 	bl	80068f8 <_Bfree>
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80064f2:	9e00      	ldr	r6, [sp, #0]
 80064f4:	ea42 0103 	orr.w	r1, r2, r3
 80064f8:	9b06      	ldr	r3, [sp, #24]
 80064fa:	4319      	orrs	r1, r3
 80064fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064fe:	d10d      	bne.n	800651c <_dtoa_r+0xa44>
 8006500:	2b39      	cmp	r3, #57	@ 0x39
 8006502:	d027      	beq.n	8006554 <_dtoa_r+0xa7c>
 8006504:	9a04      	ldr	r2, [sp, #16]
 8006506:	2a00      	cmp	r2, #0
 8006508:	dd01      	ble.n	800650e <_dtoa_r+0xa36>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	3331      	adds	r3, #49	@ 0x31
 800650e:	f88b 3000 	strb.w	r3, [fp]
 8006512:	e52e      	b.n	8005f72 <_dtoa_r+0x49a>
 8006514:	4628      	mov	r0, r5
 8006516:	e7b9      	b.n	800648c <_dtoa_r+0x9b4>
 8006518:	2201      	movs	r2, #1
 800651a:	e7e2      	b.n	80064e2 <_dtoa_r+0xa0a>
 800651c:	9904      	ldr	r1, [sp, #16]
 800651e:	2900      	cmp	r1, #0
 8006520:	db04      	blt.n	800652c <_dtoa_r+0xa54>
 8006522:	9807      	ldr	r0, [sp, #28]
 8006524:	4301      	orrs	r1, r0
 8006526:	9806      	ldr	r0, [sp, #24]
 8006528:	4301      	orrs	r1, r0
 800652a:	d120      	bne.n	800656e <_dtoa_r+0xa96>
 800652c:	2a00      	cmp	r2, #0
 800652e:	ddee      	ble.n	800650e <_dtoa_r+0xa36>
 8006530:	9902      	ldr	r1, [sp, #8]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2201      	movs	r2, #1
 8006536:	4648      	mov	r0, r9
 8006538:	f000 fba4 	bl	8006c84 <__lshift>
 800653c:	4621      	mov	r1, r4
 800653e:	9002      	str	r0, [sp, #8]
 8006540:	f000 fc0c 	bl	8006d5c <__mcmp>
 8006544:	2800      	cmp	r0, #0
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	dc02      	bgt.n	8006550 <_dtoa_r+0xa78>
 800654a:	d1e0      	bne.n	800650e <_dtoa_r+0xa36>
 800654c:	07da      	lsls	r2, r3, #31
 800654e:	d5de      	bpl.n	800650e <_dtoa_r+0xa36>
 8006550:	2b39      	cmp	r3, #57	@ 0x39
 8006552:	d1da      	bne.n	800650a <_dtoa_r+0xa32>
 8006554:	2339      	movs	r3, #57	@ 0x39
 8006556:	f88b 3000 	strb.w	r3, [fp]
 800655a:	4633      	mov	r3, r6
 800655c:	461e      	mov	r6, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006564:	2a39      	cmp	r2, #57	@ 0x39
 8006566:	d04e      	beq.n	8006606 <_dtoa_r+0xb2e>
 8006568:	3201      	adds	r2, #1
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e501      	b.n	8005f72 <_dtoa_r+0x49a>
 800656e:	2a00      	cmp	r2, #0
 8006570:	dd03      	ble.n	800657a <_dtoa_r+0xaa2>
 8006572:	2b39      	cmp	r3, #57	@ 0x39
 8006574:	d0ee      	beq.n	8006554 <_dtoa_r+0xa7c>
 8006576:	3301      	adds	r3, #1
 8006578:	e7c9      	b.n	800650e <_dtoa_r+0xa36>
 800657a:	9a00      	ldr	r2, [sp, #0]
 800657c:	9908      	ldr	r1, [sp, #32]
 800657e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006582:	428a      	cmp	r2, r1
 8006584:	d028      	beq.n	80065d8 <_dtoa_r+0xb00>
 8006586:	9902      	ldr	r1, [sp, #8]
 8006588:	2300      	movs	r3, #0
 800658a:	220a      	movs	r2, #10
 800658c:	4648      	mov	r0, r9
 800658e:	f000 f9d5 	bl	800693c <__multadd>
 8006592:	42af      	cmp	r7, r5
 8006594:	9002      	str	r0, [sp, #8]
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	f04f 020a 	mov.w	r2, #10
 800659e:	4639      	mov	r1, r7
 80065a0:	4648      	mov	r0, r9
 80065a2:	d107      	bne.n	80065b4 <_dtoa_r+0xadc>
 80065a4:	f000 f9ca 	bl	800693c <__multadd>
 80065a8:	4607      	mov	r7, r0
 80065aa:	4605      	mov	r5, r0
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	e777      	b.n	80064a4 <_dtoa_r+0x9cc>
 80065b4:	f000 f9c2 	bl	800693c <__multadd>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4607      	mov	r7, r0
 80065bc:	2300      	movs	r3, #0
 80065be:	220a      	movs	r2, #10
 80065c0:	4648      	mov	r0, r9
 80065c2:	f000 f9bb 	bl	800693c <__multadd>
 80065c6:	4605      	mov	r5, r0
 80065c8:	e7f0      	b.n	80065ac <_dtoa_r+0xad4>
 80065ca:	f1bb 0f00 	cmp.w	fp, #0
 80065ce:	bfcc      	ite	gt
 80065d0:	465e      	movgt	r6, fp
 80065d2:	2601      	movle	r6, #1
 80065d4:	4456      	add	r6, sl
 80065d6:	2700      	movs	r7, #0
 80065d8:	9902      	ldr	r1, [sp, #8]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	4648      	mov	r0, r9
 80065e0:	f000 fb50 	bl	8006c84 <__lshift>
 80065e4:	4621      	mov	r1, r4
 80065e6:	9002      	str	r0, [sp, #8]
 80065e8:	f000 fbb8 	bl	8006d5c <__mcmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	dcb4      	bgt.n	800655a <_dtoa_r+0xa82>
 80065f0:	d102      	bne.n	80065f8 <_dtoa_r+0xb20>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	07db      	lsls	r3, r3, #31
 80065f6:	d4b0      	bmi.n	800655a <_dtoa_r+0xa82>
 80065f8:	4633      	mov	r3, r6
 80065fa:	461e      	mov	r6, r3
 80065fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006600:	2a30      	cmp	r2, #48	@ 0x30
 8006602:	d0fa      	beq.n	80065fa <_dtoa_r+0xb22>
 8006604:	e4b5      	b.n	8005f72 <_dtoa_r+0x49a>
 8006606:	459a      	cmp	sl, r3
 8006608:	d1a8      	bne.n	800655c <_dtoa_r+0xa84>
 800660a:	2331      	movs	r3, #49	@ 0x31
 800660c:	f108 0801 	add.w	r8, r8, #1
 8006610:	f88a 3000 	strb.w	r3, [sl]
 8006614:	e4ad      	b.n	8005f72 <_dtoa_r+0x49a>
 8006616:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006618:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006674 <_dtoa_r+0xb9c>
 800661c:	b11b      	cbz	r3, 8006626 <_dtoa_r+0xb4e>
 800661e:	f10a 0308 	add.w	r3, sl, #8
 8006622:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	4650      	mov	r0, sl
 8006628:	b017      	add	sp, #92	@ 0x5c
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	2b01      	cmp	r3, #1
 8006632:	f77f ae2e 	ble.w	8006292 <_dtoa_r+0x7ba>
 8006636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	2001      	movs	r0, #1
 800663c:	e64d      	b.n	80062da <_dtoa_r+0x802>
 800663e:	f1bb 0f00 	cmp.w	fp, #0
 8006642:	f77f aed9 	ble.w	80063f8 <_dtoa_r+0x920>
 8006646:	4656      	mov	r6, sl
 8006648:	9802      	ldr	r0, [sp, #8]
 800664a:	4621      	mov	r1, r4
 800664c:	f7ff f9b9 	bl	80059c2 <quorem>
 8006650:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006654:	f806 3b01 	strb.w	r3, [r6], #1
 8006658:	eba6 020a 	sub.w	r2, r6, sl
 800665c:	4593      	cmp	fp, r2
 800665e:	ddb4      	ble.n	80065ca <_dtoa_r+0xaf2>
 8006660:	9902      	ldr	r1, [sp, #8]
 8006662:	2300      	movs	r3, #0
 8006664:	220a      	movs	r2, #10
 8006666:	4648      	mov	r0, r9
 8006668:	f000 f968 	bl	800693c <__multadd>
 800666c:	9002      	str	r0, [sp, #8]
 800666e:	e7eb      	b.n	8006648 <_dtoa_r+0xb70>
 8006670:	08007b88 	.word	0x08007b88
 8006674:	08007b0c 	.word	0x08007b0c

08006678 <_free_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4605      	mov	r5, r0
 800667c:	2900      	cmp	r1, #0
 800667e:	d041      	beq.n	8006704 <_free_r+0x8c>
 8006680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006684:	1f0c      	subs	r4, r1, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfb8      	it	lt
 800668a:	18e4      	addlt	r4, r4, r3
 800668c:	f000 f8e8 	bl	8006860 <__malloc_lock>
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <_free_r+0x90>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	b933      	cbnz	r3, 80066a4 <_free_r+0x2c>
 8006696:	6063      	str	r3, [r4, #4]
 8006698:	6014      	str	r4, [r2, #0]
 800669a:	4628      	mov	r0, r5
 800669c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066a0:	f000 b8e4 	b.w	800686c <__malloc_unlock>
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	d908      	bls.n	80066ba <_free_r+0x42>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	1821      	adds	r1, r4, r0
 80066ac:	428b      	cmp	r3, r1
 80066ae:	bf01      	itttt	eq
 80066b0:	6819      	ldreq	r1, [r3, #0]
 80066b2:	685b      	ldreq	r3, [r3, #4]
 80066b4:	1809      	addeq	r1, r1, r0
 80066b6:	6021      	streq	r1, [r4, #0]
 80066b8:	e7ed      	b.n	8006696 <_free_r+0x1e>
 80066ba:	461a      	mov	r2, r3
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b10b      	cbz	r3, 80066c4 <_free_r+0x4c>
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	d9fa      	bls.n	80066ba <_free_r+0x42>
 80066c4:	6811      	ldr	r1, [r2, #0]
 80066c6:	1850      	adds	r0, r2, r1
 80066c8:	42a0      	cmp	r0, r4
 80066ca:	d10b      	bne.n	80066e4 <_free_r+0x6c>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	4401      	add	r1, r0
 80066d0:	1850      	adds	r0, r2, r1
 80066d2:	4283      	cmp	r3, r0
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	d1e0      	bne.n	800669a <_free_r+0x22>
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	6053      	str	r3, [r2, #4]
 80066de:	4408      	add	r0, r1
 80066e0:	6010      	str	r0, [r2, #0]
 80066e2:	e7da      	b.n	800669a <_free_r+0x22>
 80066e4:	d902      	bls.n	80066ec <_free_r+0x74>
 80066e6:	230c      	movs	r3, #12
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	e7d6      	b.n	800669a <_free_r+0x22>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	1821      	adds	r1, r4, r0
 80066f0:	428b      	cmp	r3, r1
 80066f2:	bf04      	itt	eq
 80066f4:	6819      	ldreq	r1, [r3, #0]
 80066f6:	685b      	ldreq	r3, [r3, #4]
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	bf04      	itt	eq
 80066fc:	1809      	addeq	r1, r1, r0
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	6054      	str	r4, [r2, #4]
 8006702:	e7ca      	b.n	800669a <_free_r+0x22>
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	200004f8 	.word	0x200004f8

0800670c <malloc>:
 800670c:	4b02      	ldr	r3, [pc, #8]	@ (8006718 <malloc+0xc>)
 800670e:	4601      	mov	r1, r0
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f000 b825 	b.w	8006760 <_malloc_r>
 8006716:	bf00      	nop
 8006718:	20000020 	.word	0x20000020

0800671c <sbrk_aligned>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	4e0f      	ldr	r6, [pc, #60]	@ (800675c <sbrk_aligned+0x40>)
 8006720:	460c      	mov	r4, r1
 8006722:	6831      	ldr	r1, [r6, #0]
 8006724:	4605      	mov	r5, r0
 8006726:	b911      	cbnz	r1, 800672e <sbrk_aligned+0x12>
 8006728:	f000 fe3e 	bl	80073a8 <_sbrk_r>
 800672c:	6030      	str	r0, [r6, #0]
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 fe39 	bl	80073a8 <_sbrk_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d103      	bne.n	8006742 <sbrk_aligned+0x26>
 800673a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800673e:	4620      	mov	r0, r4
 8006740:	bd70      	pop	{r4, r5, r6, pc}
 8006742:	1cc4      	adds	r4, r0, #3
 8006744:	f024 0403 	bic.w	r4, r4, #3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d0f8      	beq.n	800673e <sbrk_aligned+0x22>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	4628      	mov	r0, r5
 8006750:	f000 fe2a 	bl	80073a8 <_sbrk_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d1f2      	bne.n	800673e <sbrk_aligned+0x22>
 8006758:	e7ef      	b.n	800673a <sbrk_aligned+0x1e>
 800675a:	bf00      	nop
 800675c:	200004f4 	.word	0x200004f4

08006760 <_malloc_r>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	1ccd      	adds	r5, r1, #3
 8006766:	f025 0503 	bic.w	r5, r5, #3
 800676a:	3508      	adds	r5, #8
 800676c:	2d0c      	cmp	r5, #12
 800676e:	bf38      	it	cc
 8006770:	250c      	movcc	r5, #12
 8006772:	2d00      	cmp	r5, #0
 8006774:	4606      	mov	r6, r0
 8006776:	db01      	blt.n	800677c <_malloc_r+0x1c>
 8006778:	42a9      	cmp	r1, r5
 800677a:	d904      	bls.n	8006786 <_malloc_r+0x26>
 800677c:	230c      	movs	r3, #12
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	2000      	movs	r0, #0
 8006782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800685c <_malloc_r+0xfc>
 800678a:	f000 f869 	bl	8006860 <__malloc_lock>
 800678e:	f8d8 3000 	ldr.w	r3, [r8]
 8006792:	461c      	mov	r4, r3
 8006794:	bb44      	cbnz	r4, 80067e8 <_malloc_r+0x88>
 8006796:	4629      	mov	r1, r5
 8006798:	4630      	mov	r0, r6
 800679a:	f7ff ffbf 	bl	800671c <sbrk_aligned>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	4604      	mov	r4, r0
 80067a2:	d158      	bne.n	8006856 <_malloc_r+0xf6>
 80067a4:	f8d8 4000 	ldr.w	r4, [r8]
 80067a8:	4627      	mov	r7, r4
 80067aa:	2f00      	cmp	r7, #0
 80067ac:	d143      	bne.n	8006836 <_malloc_r+0xd6>
 80067ae:	2c00      	cmp	r4, #0
 80067b0:	d04b      	beq.n	800684a <_malloc_r+0xea>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	4639      	mov	r1, r7
 80067b6:	4630      	mov	r0, r6
 80067b8:	eb04 0903 	add.w	r9, r4, r3
 80067bc:	f000 fdf4 	bl	80073a8 <_sbrk_r>
 80067c0:	4581      	cmp	r9, r0
 80067c2:	d142      	bne.n	800684a <_malloc_r+0xea>
 80067c4:	6821      	ldr	r1, [r4, #0]
 80067c6:	1a6d      	subs	r5, r5, r1
 80067c8:	4629      	mov	r1, r5
 80067ca:	4630      	mov	r0, r6
 80067cc:	f7ff ffa6 	bl	800671c <sbrk_aligned>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d03a      	beq.n	800684a <_malloc_r+0xea>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	442b      	add	r3, r5
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	f8d8 3000 	ldr.w	r3, [r8]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	bb62      	cbnz	r2, 800683c <_malloc_r+0xdc>
 80067e2:	f8c8 7000 	str.w	r7, [r8]
 80067e6:	e00f      	b.n	8006808 <_malloc_r+0xa8>
 80067e8:	6822      	ldr	r2, [r4, #0]
 80067ea:	1b52      	subs	r2, r2, r5
 80067ec:	d420      	bmi.n	8006830 <_malloc_r+0xd0>
 80067ee:	2a0b      	cmp	r2, #11
 80067f0:	d917      	bls.n	8006822 <_malloc_r+0xc2>
 80067f2:	1961      	adds	r1, r4, r5
 80067f4:	42a3      	cmp	r3, r4
 80067f6:	6025      	str	r5, [r4, #0]
 80067f8:	bf18      	it	ne
 80067fa:	6059      	strne	r1, [r3, #4]
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	bf08      	it	eq
 8006800:	f8c8 1000 	streq.w	r1, [r8]
 8006804:	5162      	str	r2, [r4, r5]
 8006806:	604b      	str	r3, [r1, #4]
 8006808:	4630      	mov	r0, r6
 800680a:	f000 f82f 	bl	800686c <__malloc_unlock>
 800680e:	f104 000b 	add.w	r0, r4, #11
 8006812:	1d23      	adds	r3, r4, #4
 8006814:	f020 0007 	bic.w	r0, r0, #7
 8006818:	1ac2      	subs	r2, r0, r3
 800681a:	bf1c      	itt	ne
 800681c:	1a1b      	subne	r3, r3, r0
 800681e:	50a3      	strne	r3, [r4, r2]
 8006820:	e7af      	b.n	8006782 <_malloc_r+0x22>
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	42a3      	cmp	r3, r4
 8006826:	bf0c      	ite	eq
 8006828:	f8c8 2000 	streq.w	r2, [r8]
 800682c:	605a      	strne	r2, [r3, #4]
 800682e:	e7eb      	b.n	8006808 <_malloc_r+0xa8>
 8006830:	4623      	mov	r3, r4
 8006832:	6864      	ldr	r4, [r4, #4]
 8006834:	e7ae      	b.n	8006794 <_malloc_r+0x34>
 8006836:	463c      	mov	r4, r7
 8006838:	687f      	ldr	r7, [r7, #4]
 800683a:	e7b6      	b.n	80067aa <_malloc_r+0x4a>
 800683c:	461a      	mov	r2, r3
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	42a3      	cmp	r3, r4
 8006842:	d1fb      	bne.n	800683c <_malloc_r+0xdc>
 8006844:	2300      	movs	r3, #0
 8006846:	6053      	str	r3, [r2, #4]
 8006848:	e7de      	b.n	8006808 <_malloc_r+0xa8>
 800684a:	230c      	movs	r3, #12
 800684c:	6033      	str	r3, [r6, #0]
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f80c 	bl	800686c <__malloc_unlock>
 8006854:	e794      	b.n	8006780 <_malloc_r+0x20>
 8006856:	6005      	str	r5, [r0, #0]
 8006858:	e7d6      	b.n	8006808 <_malloc_r+0xa8>
 800685a:	bf00      	nop
 800685c:	200004f8 	.word	0x200004f8

08006860 <__malloc_lock>:
 8006860:	4801      	ldr	r0, [pc, #4]	@ (8006868 <__malloc_lock+0x8>)
 8006862:	f7ff b89e 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 8006866:	bf00      	nop
 8006868:	200004f0 	.word	0x200004f0

0800686c <__malloc_unlock>:
 800686c:	4801      	ldr	r0, [pc, #4]	@ (8006874 <__malloc_unlock+0x8>)
 800686e:	f7ff b899 	b.w	80059a4 <__retarget_lock_release_recursive>
 8006872:	bf00      	nop
 8006874:	200004f0 	.word	0x200004f0

08006878 <_Balloc>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	69c6      	ldr	r6, [r0, #28]
 800687c:	4604      	mov	r4, r0
 800687e:	460d      	mov	r5, r1
 8006880:	b976      	cbnz	r6, 80068a0 <_Balloc+0x28>
 8006882:	2010      	movs	r0, #16
 8006884:	f7ff ff42 	bl	800670c <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	61e0      	str	r0, [r4, #28]
 800688c:	b920      	cbnz	r0, 8006898 <_Balloc+0x20>
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <_Balloc+0x78>)
 8006890:	4818      	ldr	r0, [pc, #96]	@ (80068f4 <_Balloc+0x7c>)
 8006892:	216b      	movs	r1, #107	@ 0x6b
 8006894:	f000 fd98 	bl	80073c8 <__assert_func>
 8006898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800689c:	6006      	str	r6, [r0, #0]
 800689e:	60c6      	str	r6, [r0, #12]
 80068a0:	69e6      	ldr	r6, [r4, #28]
 80068a2:	68f3      	ldr	r3, [r6, #12]
 80068a4:	b183      	cbz	r3, 80068c8 <_Balloc+0x50>
 80068a6:	69e3      	ldr	r3, [r4, #28]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ae:	b9b8      	cbnz	r0, 80068e0 <_Balloc+0x68>
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f605 	lsl.w	r6, r1, r5
 80068b6:	1d72      	adds	r2, r6, #5
 80068b8:	0092      	lsls	r2, r2, #2
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fda2 	bl	8007404 <_calloc_r>
 80068c0:	b160      	cbz	r0, 80068dc <_Balloc+0x64>
 80068c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068c6:	e00e      	b.n	80068e6 <_Balloc+0x6e>
 80068c8:	2221      	movs	r2, #33	@ 0x21
 80068ca:	2104      	movs	r1, #4
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fd99 	bl	8007404 <_calloc_r>
 80068d2:	69e3      	ldr	r3, [r4, #28]
 80068d4:	60f0      	str	r0, [r6, #12]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e4      	bne.n	80068a6 <_Balloc+0x2e>
 80068dc:	2000      	movs	r0, #0
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	6802      	ldr	r2, [r0, #0]
 80068e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068e6:	2300      	movs	r3, #0
 80068e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068ec:	e7f7      	b.n	80068de <_Balloc+0x66>
 80068ee:	bf00      	nop
 80068f0:	08007b19 	.word	0x08007b19
 80068f4:	08007b99 	.word	0x08007b99

080068f8 <_Bfree>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	69c6      	ldr	r6, [r0, #28]
 80068fc:	4605      	mov	r5, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	b976      	cbnz	r6, 8006920 <_Bfree+0x28>
 8006902:	2010      	movs	r0, #16
 8006904:	f7ff ff02 	bl	800670c <malloc>
 8006908:	4602      	mov	r2, r0
 800690a:	61e8      	str	r0, [r5, #28]
 800690c:	b920      	cbnz	r0, 8006918 <_Bfree+0x20>
 800690e:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <_Bfree+0x3c>)
 8006910:	4809      	ldr	r0, [pc, #36]	@ (8006938 <_Bfree+0x40>)
 8006912:	218f      	movs	r1, #143	@ 0x8f
 8006914:	f000 fd58 	bl	80073c8 <__assert_func>
 8006918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800691c:	6006      	str	r6, [r0, #0]
 800691e:	60c6      	str	r6, [r0, #12]
 8006920:	b13c      	cbz	r4, 8006932 <_Bfree+0x3a>
 8006922:	69eb      	ldr	r3, [r5, #28]
 8006924:	6862      	ldr	r2, [r4, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800692c:	6021      	str	r1, [r4, #0]
 800692e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	08007b19 	.word	0x08007b19
 8006938:	08007b99 	.word	0x08007b99

0800693c <__multadd>:
 800693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	690d      	ldr	r5, [r1, #16]
 8006942:	4607      	mov	r7, r0
 8006944:	460c      	mov	r4, r1
 8006946:	461e      	mov	r6, r3
 8006948:	f101 0c14 	add.w	ip, r1, #20
 800694c:	2000      	movs	r0, #0
 800694e:	f8dc 3000 	ldr.w	r3, [ip]
 8006952:	b299      	uxth	r1, r3
 8006954:	fb02 6101 	mla	r1, r2, r1, r6
 8006958:	0c1e      	lsrs	r6, r3, #16
 800695a:	0c0b      	lsrs	r3, r1, #16
 800695c:	fb02 3306 	mla	r3, r2, r6, r3
 8006960:	b289      	uxth	r1, r1
 8006962:	3001      	adds	r0, #1
 8006964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006968:	4285      	cmp	r5, r0
 800696a:	f84c 1b04 	str.w	r1, [ip], #4
 800696e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006972:	dcec      	bgt.n	800694e <__multadd+0x12>
 8006974:	b30e      	cbz	r6, 80069ba <__multadd+0x7e>
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	42ab      	cmp	r3, r5
 800697a:	dc19      	bgt.n	80069b0 <__multadd+0x74>
 800697c:	6861      	ldr	r1, [r4, #4]
 800697e:	4638      	mov	r0, r7
 8006980:	3101      	adds	r1, #1
 8006982:	f7ff ff79 	bl	8006878 <_Balloc>
 8006986:	4680      	mov	r8, r0
 8006988:	b928      	cbnz	r0, 8006996 <__multadd+0x5a>
 800698a:	4602      	mov	r2, r0
 800698c:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <__multadd+0x84>)
 800698e:	480d      	ldr	r0, [pc, #52]	@ (80069c4 <__multadd+0x88>)
 8006990:	21ba      	movs	r1, #186	@ 0xba
 8006992:	f000 fd19 	bl	80073c8 <__assert_func>
 8006996:	6922      	ldr	r2, [r4, #16]
 8006998:	3202      	adds	r2, #2
 800699a:	f104 010c 	add.w	r1, r4, #12
 800699e:	0092      	lsls	r2, r2, #2
 80069a0:	300c      	adds	r0, #12
 80069a2:	f7ff f800 	bl	80059a6 <memcpy>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4638      	mov	r0, r7
 80069aa:	f7ff ffa5 	bl	80068f8 <_Bfree>
 80069ae:	4644      	mov	r4, r8
 80069b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069b4:	3501      	adds	r5, #1
 80069b6:	615e      	str	r6, [r3, #20]
 80069b8:	6125      	str	r5, [r4, #16]
 80069ba:	4620      	mov	r0, r4
 80069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c0:	08007b88 	.word	0x08007b88
 80069c4:	08007b99 	.word	0x08007b99

080069c8 <__hi0bits>:
 80069c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069cc:	4603      	mov	r3, r0
 80069ce:	bf36      	itet	cc
 80069d0:	0403      	lslcc	r3, r0, #16
 80069d2:	2000      	movcs	r0, #0
 80069d4:	2010      	movcc	r0, #16
 80069d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069da:	bf3c      	itt	cc
 80069dc:	021b      	lslcc	r3, r3, #8
 80069de:	3008      	addcc	r0, #8
 80069e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e4:	bf3c      	itt	cc
 80069e6:	011b      	lslcc	r3, r3, #4
 80069e8:	3004      	addcc	r0, #4
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ee:	bf3c      	itt	cc
 80069f0:	009b      	lslcc	r3, r3, #2
 80069f2:	3002      	addcc	r0, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db05      	blt.n	8006a04 <__hi0bits+0x3c>
 80069f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069fc:	f100 0001 	add.w	r0, r0, #1
 8006a00:	bf08      	it	eq
 8006a02:	2020      	moveq	r0, #32
 8006a04:	4770      	bx	lr

08006a06 <__lo0bits>:
 8006a06:	6803      	ldr	r3, [r0, #0]
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f013 0007 	ands.w	r0, r3, #7
 8006a0e:	d00b      	beq.n	8006a28 <__lo0bits+0x22>
 8006a10:	07d9      	lsls	r1, r3, #31
 8006a12:	d421      	bmi.n	8006a58 <__lo0bits+0x52>
 8006a14:	0798      	lsls	r0, r3, #30
 8006a16:	bf49      	itett	mi
 8006a18:	085b      	lsrmi	r3, r3, #1
 8006a1a:	089b      	lsrpl	r3, r3, #2
 8006a1c:	2001      	movmi	r0, #1
 8006a1e:	6013      	strmi	r3, [r2, #0]
 8006a20:	bf5c      	itt	pl
 8006a22:	6013      	strpl	r3, [r2, #0]
 8006a24:	2002      	movpl	r0, #2
 8006a26:	4770      	bx	lr
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	b909      	cbnz	r1, 8006a30 <__lo0bits+0x2a>
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	2010      	movs	r0, #16
 8006a30:	b2d9      	uxtb	r1, r3
 8006a32:	b909      	cbnz	r1, 8006a38 <__lo0bits+0x32>
 8006a34:	3008      	adds	r0, #8
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	0719      	lsls	r1, r3, #28
 8006a3a:	bf04      	itt	eq
 8006a3c:	091b      	lsreq	r3, r3, #4
 8006a3e:	3004      	addeq	r0, #4
 8006a40:	0799      	lsls	r1, r3, #30
 8006a42:	bf04      	itt	eq
 8006a44:	089b      	lsreq	r3, r3, #2
 8006a46:	3002      	addeq	r0, #2
 8006a48:	07d9      	lsls	r1, r3, #31
 8006a4a:	d403      	bmi.n	8006a54 <__lo0bits+0x4e>
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	f100 0001 	add.w	r0, r0, #1
 8006a52:	d003      	beq.n	8006a5c <__lo0bits+0x56>
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4770      	bx	lr
 8006a58:	2000      	movs	r0, #0
 8006a5a:	4770      	bx	lr
 8006a5c:	2020      	movs	r0, #32
 8006a5e:	4770      	bx	lr

08006a60 <__i2b>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	2101      	movs	r1, #1
 8006a66:	f7ff ff07 	bl	8006878 <_Balloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <__i2b+0x1a>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <__i2b+0x24>)
 8006a70:	4805      	ldr	r0, [pc, #20]	@ (8006a88 <__i2b+0x28>)
 8006a72:	f240 1145 	movw	r1, #325	@ 0x145
 8006a76:	f000 fca7 	bl	80073c8 <__assert_func>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6144      	str	r4, [r0, #20]
 8006a7e:	6103      	str	r3, [r0, #16]
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08007b88 	.word	0x08007b88
 8006a88:	08007b99 	.word	0x08007b99

08006a8c <__multiply>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	4617      	mov	r7, r2
 8006a92:	690a      	ldr	r2, [r1, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	bfa8      	it	ge
 8006a9a:	463b      	movge	r3, r7
 8006a9c:	4689      	mov	r9, r1
 8006a9e:	bfa4      	itt	ge
 8006aa0:	460f      	movge	r7, r1
 8006aa2:	4699      	movge	r9, r3
 8006aa4:	693d      	ldr	r5, [r7, #16]
 8006aa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	eb05 060a 	add.w	r6, r5, sl
 8006ab2:	42b3      	cmp	r3, r6
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	bfb8      	it	lt
 8006ab8:	3101      	addlt	r1, #1
 8006aba:	f7ff fedd 	bl	8006878 <_Balloc>
 8006abe:	b930      	cbnz	r0, 8006ace <__multiply+0x42>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b41      	ldr	r3, [pc, #260]	@ (8006bc8 <__multiply+0x13c>)
 8006ac4:	4841      	ldr	r0, [pc, #260]	@ (8006bcc <__multiply+0x140>)
 8006ac6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006aca:	f000 fc7d 	bl	80073c8 <__assert_func>
 8006ace:	f100 0414 	add.w	r4, r0, #20
 8006ad2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4573      	cmp	r3, lr
 8006adc:	d320      	bcc.n	8006b20 <__multiply+0x94>
 8006ade:	f107 0814 	add.w	r8, r7, #20
 8006ae2:	f109 0114 	add.w	r1, r9, #20
 8006ae6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006aea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006aee:	9302      	str	r3, [sp, #8]
 8006af0:	1beb      	subs	r3, r5, r7
 8006af2:	3b15      	subs	r3, #21
 8006af4:	f023 0303 	bic.w	r3, r3, #3
 8006af8:	3304      	adds	r3, #4
 8006afa:	3715      	adds	r7, #21
 8006afc:	42bd      	cmp	r5, r7
 8006afe:	bf38      	it	cc
 8006b00:	2304      	movcc	r3, #4
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	9b02      	ldr	r3, [sp, #8]
 8006b06:	9103      	str	r1, [sp, #12]
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	d80c      	bhi.n	8006b26 <__multiply+0x9a>
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	dd03      	ble.n	8006b18 <__multiply+0x8c>
 8006b10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d055      	beq.n	8006bc4 <__multiply+0x138>
 8006b18:	6106      	str	r6, [r0, #16]
 8006b1a:	b005      	add	sp, #20
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	f843 2b04 	str.w	r2, [r3], #4
 8006b24:	e7d9      	b.n	8006ada <__multiply+0x4e>
 8006b26:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b2a:	f1ba 0f00 	cmp.w	sl, #0
 8006b2e:	d01f      	beq.n	8006b70 <__multiply+0xe4>
 8006b30:	46c4      	mov	ip, r8
 8006b32:	46a1      	mov	r9, r4
 8006b34:	2700      	movs	r7, #0
 8006b36:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006b3a:	f8d9 3000 	ldr.w	r3, [r9]
 8006b3e:	fa1f fb82 	uxth.w	fp, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b48:	443b      	add	r3, r7
 8006b4a:	f8d9 7000 	ldr.w	r7, [r9]
 8006b4e:	0c12      	lsrs	r2, r2, #16
 8006b50:	0c3f      	lsrs	r7, r7, #16
 8006b52:	fb0a 7202 	mla	r2, sl, r2, r7
 8006b56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b60:	4565      	cmp	r5, ip
 8006b62:	f849 3b04 	str.w	r3, [r9], #4
 8006b66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006b6a:	d8e4      	bhi.n	8006b36 <__multiply+0xaa>
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	50e7      	str	r7, [r4, r3]
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b76:	3104      	adds	r1, #4
 8006b78:	f1b9 0f00 	cmp.w	r9, #0
 8006b7c:	d020      	beq.n	8006bc0 <__multiply+0x134>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	4647      	mov	r7, r8
 8006b82:	46a4      	mov	ip, r4
 8006b84:	f04f 0a00 	mov.w	sl, #0
 8006b88:	f8b7 b000 	ldrh.w	fp, [r7]
 8006b8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006b90:	fb09 220b 	mla	r2, r9, fp, r2
 8006b94:	4452      	add	r2, sl
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b9c:	f84c 3b04 	str.w	r3, [ip], #4
 8006ba0:	f857 3b04 	ldr.w	r3, [r7], #4
 8006ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ba8:	f8bc 3000 	ldrh.w	r3, [ip]
 8006bac:	fb09 330a 	mla	r3, r9, sl, r3
 8006bb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006bb4:	42bd      	cmp	r5, r7
 8006bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bba:	d8e5      	bhi.n	8006b88 <__multiply+0xfc>
 8006bbc:	9a01      	ldr	r2, [sp, #4]
 8006bbe:	50a3      	str	r3, [r4, r2]
 8006bc0:	3404      	adds	r4, #4
 8006bc2:	e79f      	b.n	8006b04 <__multiply+0x78>
 8006bc4:	3e01      	subs	r6, #1
 8006bc6:	e7a1      	b.n	8006b0c <__multiply+0x80>
 8006bc8:	08007b88 	.word	0x08007b88
 8006bcc:	08007b99 	.word	0x08007b99

08006bd0 <__pow5mult>:
 8006bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	f012 0203 	ands.w	r2, r2, #3
 8006bda:	4607      	mov	r7, r0
 8006bdc:	460e      	mov	r6, r1
 8006bde:	d007      	beq.n	8006bf0 <__pow5mult+0x20>
 8006be0:	4c25      	ldr	r4, [pc, #148]	@ (8006c78 <__pow5mult+0xa8>)
 8006be2:	3a01      	subs	r2, #1
 8006be4:	2300      	movs	r3, #0
 8006be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bea:	f7ff fea7 	bl	800693c <__multadd>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	10ad      	asrs	r5, r5, #2
 8006bf2:	d03d      	beq.n	8006c70 <__pow5mult+0xa0>
 8006bf4:	69fc      	ldr	r4, [r7, #28]
 8006bf6:	b97c      	cbnz	r4, 8006c18 <__pow5mult+0x48>
 8006bf8:	2010      	movs	r0, #16
 8006bfa:	f7ff fd87 	bl	800670c <malloc>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	61f8      	str	r0, [r7, #28]
 8006c02:	b928      	cbnz	r0, 8006c10 <__pow5mult+0x40>
 8006c04:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <__pow5mult+0xac>)
 8006c06:	481e      	ldr	r0, [pc, #120]	@ (8006c80 <__pow5mult+0xb0>)
 8006c08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c0c:	f000 fbdc 	bl	80073c8 <__assert_func>
 8006c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c14:	6004      	str	r4, [r0, #0]
 8006c16:	60c4      	str	r4, [r0, #12]
 8006c18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c20:	b94c      	cbnz	r4, 8006c36 <__pow5mult+0x66>
 8006c22:	f240 2171 	movw	r1, #625	@ 0x271
 8006c26:	4638      	mov	r0, r7
 8006c28:	f7ff ff1a 	bl	8006a60 <__i2b>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c32:	4604      	mov	r4, r0
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	07eb      	lsls	r3, r5, #31
 8006c3c:	d50a      	bpl.n	8006c54 <__pow5mult+0x84>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4622      	mov	r2, r4
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ff22 	bl	8006a8c <__multiply>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff fe53 	bl	80068f8 <_Bfree>
 8006c52:	4646      	mov	r6, r8
 8006c54:	106d      	asrs	r5, r5, #1
 8006c56:	d00b      	beq.n	8006c70 <__pow5mult+0xa0>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	b938      	cbnz	r0, 8006c6c <__pow5mult+0x9c>
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff ff13 	bl	8006a8c <__multiply>
 8006c66:	6020      	str	r0, [r4, #0]
 8006c68:	f8c0 9000 	str.w	r9, [r0]
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e7e4      	b.n	8006c3a <__pow5mult+0x6a>
 8006c70:	4630      	mov	r0, r6
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c76:	bf00      	nop
 8006c78:	08007c4c 	.word	0x08007c4c
 8006c7c:	08007b19 	.word	0x08007b19
 8006c80:	08007b99 	.word	0x08007b99

08006c84 <__lshift>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	460c      	mov	r4, r1
 8006c8a:	6849      	ldr	r1, [r1, #4]
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	4607      	mov	r7, r0
 8006c96:	4691      	mov	r9, r2
 8006c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c9c:	f108 0601 	add.w	r6, r8, #1
 8006ca0:	42b3      	cmp	r3, r6
 8006ca2:	db0b      	blt.n	8006cbc <__lshift+0x38>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff fde7 	bl	8006878 <_Balloc>
 8006caa:	4605      	mov	r5, r0
 8006cac:	b948      	cbnz	r0, 8006cc2 <__lshift+0x3e>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	4b28      	ldr	r3, [pc, #160]	@ (8006d54 <__lshift+0xd0>)
 8006cb2:	4829      	ldr	r0, [pc, #164]	@ (8006d58 <__lshift+0xd4>)
 8006cb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cb8:	f000 fb86 	bl	80073c8 <__assert_func>
 8006cbc:	3101      	adds	r1, #1
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	e7ee      	b.n	8006ca0 <__lshift+0x1c>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f100 0114 	add.w	r1, r0, #20
 8006cc8:	f100 0210 	add.w	r2, r0, #16
 8006ccc:	4618      	mov	r0, r3
 8006cce:	4553      	cmp	r3, sl
 8006cd0:	db33      	blt.n	8006d3a <__lshift+0xb6>
 8006cd2:	6920      	ldr	r0, [r4, #16]
 8006cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cd8:	f104 0314 	add.w	r3, r4, #20
 8006cdc:	f019 091f 	ands.w	r9, r9, #31
 8006ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ce8:	d02b      	beq.n	8006d42 <__lshift+0xbe>
 8006cea:	f1c9 0e20 	rsb	lr, r9, #32
 8006cee:	468a      	mov	sl, r1
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8006cf8:	4310      	orrs	r0, r2
 8006cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8006cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d02:	459c      	cmp	ip, r3
 8006d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d08:	d8f3      	bhi.n	8006cf2 <__lshift+0x6e>
 8006d0a:	ebac 0304 	sub.w	r3, ip, r4
 8006d0e:	3b15      	subs	r3, #21
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	3304      	adds	r3, #4
 8006d16:	f104 0015 	add.w	r0, r4, #21
 8006d1a:	4560      	cmp	r0, ip
 8006d1c:	bf88      	it	hi
 8006d1e:	2304      	movhi	r3, #4
 8006d20:	50ca      	str	r2, [r1, r3]
 8006d22:	b10a      	cbz	r2, 8006d28 <__lshift+0xa4>
 8006d24:	f108 0602 	add.w	r6, r8, #2
 8006d28:	3e01      	subs	r6, #1
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	612e      	str	r6, [r5, #16]
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f7ff fde2 	bl	80068f8 <_Bfree>
 8006d34:	4628      	mov	r0, r5
 8006d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d3e:	3301      	adds	r3, #1
 8006d40:	e7c5      	b.n	8006cce <__lshift+0x4a>
 8006d42:	3904      	subs	r1, #4
 8006d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d48:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d4c:	459c      	cmp	ip, r3
 8006d4e:	d8f9      	bhi.n	8006d44 <__lshift+0xc0>
 8006d50:	e7ea      	b.n	8006d28 <__lshift+0xa4>
 8006d52:	bf00      	nop
 8006d54:	08007b88 	.word	0x08007b88
 8006d58:	08007b99 	.word	0x08007b99

08006d5c <__mcmp>:
 8006d5c:	690a      	ldr	r2, [r1, #16]
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6900      	ldr	r0, [r0, #16]
 8006d62:	1a80      	subs	r0, r0, r2
 8006d64:	b530      	push	{r4, r5, lr}
 8006d66:	d10e      	bne.n	8006d86 <__mcmp+0x2a>
 8006d68:	3314      	adds	r3, #20
 8006d6a:	3114      	adds	r1, #20
 8006d6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d7c:	4295      	cmp	r5, r2
 8006d7e:	d003      	beq.n	8006d88 <__mcmp+0x2c>
 8006d80:	d205      	bcs.n	8006d8e <__mcmp+0x32>
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d86:	bd30      	pop	{r4, r5, pc}
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d3f3      	bcc.n	8006d74 <__mcmp+0x18>
 8006d8c:	e7fb      	b.n	8006d86 <__mcmp+0x2a>
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e7f9      	b.n	8006d86 <__mcmp+0x2a>
	...

08006d94 <__mdiff>:
 8006d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	4689      	mov	r9, r1
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4648      	mov	r0, r9
 8006da0:	4614      	mov	r4, r2
 8006da2:	f7ff ffdb 	bl	8006d5c <__mcmp>
 8006da6:	1e05      	subs	r5, r0, #0
 8006da8:	d112      	bne.n	8006dd0 <__mdiff+0x3c>
 8006daa:	4629      	mov	r1, r5
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7ff fd63 	bl	8006878 <_Balloc>
 8006db2:	4602      	mov	r2, r0
 8006db4:	b928      	cbnz	r0, 8006dc2 <__mdiff+0x2e>
 8006db6:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb4 <__mdiff+0x120>)
 8006db8:	f240 2137 	movw	r1, #567	@ 0x237
 8006dbc:	483e      	ldr	r0, [pc, #248]	@ (8006eb8 <__mdiff+0x124>)
 8006dbe:	f000 fb03 	bl	80073c8 <__assert_func>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dc8:	4610      	mov	r0, r2
 8006dca:	b003      	add	sp, #12
 8006dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd0:	bfbc      	itt	lt
 8006dd2:	464b      	movlt	r3, r9
 8006dd4:	46a1      	movlt	r9, r4
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ddc:	bfba      	itte	lt
 8006dde:	461c      	movlt	r4, r3
 8006de0:	2501      	movlt	r5, #1
 8006de2:	2500      	movge	r5, #0
 8006de4:	f7ff fd48 	bl	8006878 <_Balloc>
 8006de8:	4602      	mov	r2, r0
 8006dea:	b918      	cbnz	r0, 8006df4 <__mdiff+0x60>
 8006dec:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <__mdiff+0x120>)
 8006dee:	f240 2145 	movw	r1, #581	@ 0x245
 8006df2:	e7e3      	b.n	8006dbc <__mdiff+0x28>
 8006df4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006df8:	6926      	ldr	r6, [r4, #16]
 8006dfa:	60c5      	str	r5, [r0, #12]
 8006dfc:	f109 0310 	add.w	r3, r9, #16
 8006e00:	f109 0514 	add.w	r5, r9, #20
 8006e04:	f104 0e14 	add.w	lr, r4, #20
 8006e08:	f100 0b14 	add.w	fp, r0, #20
 8006e0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	46d9      	mov	r9, fp
 8006e18:	f04f 0c00 	mov.w	ip, #0
 8006e1c:	9b01      	ldr	r3, [sp, #4]
 8006e1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	fa1f f38a 	uxth.w	r3, sl
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	b283      	uxth	r3, r0
 8006e30:	1acb      	subs	r3, r1, r3
 8006e32:	0c00      	lsrs	r0, r0, #16
 8006e34:	4463      	add	r3, ip
 8006e36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e44:	4576      	cmp	r6, lr
 8006e46:	f849 3b04 	str.w	r3, [r9], #4
 8006e4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e4e:	d8e5      	bhi.n	8006e1c <__mdiff+0x88>
 8006e50:	1b33      	subs	r3, r6, r4
 8006e52:	3b15      	subs	r3, #21
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	3415      	adds	r4, #21
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	bf38      	it	cc
 8006e60:	2304      	movcc	r3, #4
 8006e62:	441d      	add	r5, r3
 8006e64:	445b      	add	r3, fp
 8006e66:	461e      	mov	r6, r3
 8006e68:	462c      	mov	r4, r5
 8006e6a:	4544      	cmp	r4, r8
 8006e6c:	d30e      	bcc.n	8006e8c <__mdiff+0xf8>
 8006e6e:	f108 0103 	add.w	r1, r8, #3
 8006e72:	1b49      	subs	r1, r1, r5
 8006e74:	f021 0103 	bic.w	r1, r1, #3
 8006e78:	3d03      	subs	r5, #3
 8006e7a:	45a8      	cmp	r8, r5
 8006e7c:	bf38      	it	cc
 8006e7e:	2100      	movcc	r1, #0
 8006e80:	440b      	add	r3, r1
 8006e82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e86:	b191      	cbz	r1, 8006eae <__mdiff+0x11a>
 8006e88:	6117      	str	r7, [r2, #16]
 8006e8a:	e79d      	b.n	8006dc8 <__mdiff+0x34>
 8006e8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e90:	46e6      	mov	lr, ip
 8006e92:	0c08      	lsrs	r0, r1, #16
 8006e94:	fa1c fc81 	uxtah	ip, ip, r1
 8006e98:	4471      	add	r1, lr
 8006e9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e9e:	b289      	uxth	r1, r1
 8006ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ea4:	f846 1b04 	str.w	r1, [r6], #4
 8006ea8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006eac:	e7dd      	b.n	8006e6a <__mdiff+0xd6>
 8006eae:	3f01      	subs	r7, #1
 8006eb0:	e7e7      	b.n	8006e82 <__mdiff+0xee>
 8006eb2:	bf00      	nop
 8006eb4:	08007b88 	.word	0x08007b88
 8006eb8:	08007b99 	.word	0x08007b99

08006ebc <__d2b>:
 8006ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	ec59 8b10 	vmov	r8, r9, d0
 8006ec8:	4616      	mov	r6, r2
 8006eca:	f7ff fcd5 	bl	8006878 <_Balloc>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	b930      	cbnz	r0, 8006ee0 <__d2b+0x24>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b23      	ldr	r3, [pc, #140]	@ (8006f64 <__d2b+0xa8>)
 8006ed6:	4824      	ldr	r0, [pc, #144]	@ (8006f68 <__d2b+0xac>)
 8006ed8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006edc:	f000 fa74 	bl	80073c8 <__assert_func>
 8006ee0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ee4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ee8:	b10d      	cbz	r5, 8006eee <__d2b+0x32>
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ef4:	d023      	beq.n	8006f3e <__d2b+0x82>
 8006ef6:	4668      	mov	r0, sp
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	f7ff fd84 	bl	8006a06 <__lo0bits>
 8006efe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f02:	b1d0      	cbz	r0, 8006f3a <__d2b+0x7e>
 8006f04:	f1c0 0320 	rsb	r3, r0, #32
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	40c2      	lsrs	r2, r0
 8006f10:	6163      	str	r3, [r4, #20]
 8006f12:	9201      	str	r2, [sp, #4]
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	61a3      	str	r3, [r4, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2201      	moveq	r2, #1
 8006f1e:	2202      	movne	r2, #2
 8006f20:	6122      	str	r2, [r4, #16]
 8006f22:	b1a5      	cbz	r5, 8006f4e <__d2b+0x92>
 8006f24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f28:	4405      	add	r5, r0
 8006f2a:	603d      	str	r5, [r7, #0]
 8006f2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f30:	6030      	str	r0, [r6, #0]
 8006f32:	4620      	mov	r0, r4
 8006f34:	b003      	add	sp, #12
 8006f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	6161      	str	r1, [r4, #20]
 8006f3c:	e7ea      	b.n	8006f14 <__d2b+0x58>
 8006f3e:	a801      	add	r0, sp, #4
 8006f40:	f7ff fd61 	bl	8006a06 <__lo0bits>
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	6163      	str	r3, [r4, #20]
 8006f48:	3020      	adds	r0, #32
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	e7e8      	b.n	8006f20 <__d2b+0x64>
 8006f4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f56:	6038      	str	r0, [r7, #0]
 8006f58:	6918      	ldr	r0, [r3, #16]
 8006f5a:	f7ff fd35 	bl	80069c8 <__hi0bits>
 8006f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f62:	e7e5      	b.n	8006f30 <__d2b+0x74>
 8006f64:	08007b88 	.word	0x08007b88
 8006f68:	08007b99 	.word	0x08007b99

08006f6c <__ssputs_r>:
 8006f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	688e      	ldr	r6, [r1, #8]
 8006f72:	461f      	mov	r7, r3
 8006f74:	42be      	cmp	r6, r7
 8006f76:	680b      	ldr	r3, [r1, #0]
 8006f78:	4682      	mov	sl, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4690      	mov	r8, r2
 8006f7e:	d82d      	bhi.n	8006fdc <__ssputs_r+0x70>
 8006f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f88:	d026      	beq.n	8006fd8 <__ssputs_r+0x6c>
 8006f8a:	6965      	ldr	r5, [r4, #20]
 8006f8c:	6909      	ldr	r1, [r1, #16]
 8006f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f92:	eba3 0901 	sub.w	r9, r3, r1
 8006f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f9a:	1c7b      	adds	r3, r7, #1
 8006f9c:	444b      	add	r3, r9
 8006f9e:	106d      	asrs	r5, r5, #1
 8006fa0:	429d      	cmp	r5, r3
 8006fa2:	bf38      	it	cc
 8006fa4:	461d      	movcc	r5, r3
 8006fa6:	0553      	lsls	r3, r2, #21
 8006fa8:	d527      	bpl.n	8006ffa <__ssputs_r+0x8e>
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7ff fbd8 	bl	8006760 <_malloc_r>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	b360      	cbz	r0, 800700e <__ssputs_r+0xa2>
 8006fb4:	6921      	ldr	r1, [r4, #16]
 8006fb6:	464a      	mov	r2, r9
 8006fb8:	f7fe fcf5 	bl	80059a6 <memcpy>
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	6126      	str	r6, [r4, #16]
 8006fca:	6165      	str	r5, [r4, #20]
 8006fcc:	444e      	add	r6, r9
 8006fce:	eba5 0509 	sub.w	r5, r5, r9
 8006fd2:	6026      	str	r6, [r4, #0]
 8006fd4:	60a5      	str	r5, [r4, #8]
 8006fd6:	463e      	mov	r6, r7
 8006fd8:	42be      	cmp	r6, r7
 8006fda:	d900      	bls.n	8006fde <__ssputs_r+0x72>
 8006fdc:	463e      	mov	r6, r7
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	f000 f9c6 	bl	8007374 <memmove>
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	1b9b      	subs	r3, r3, r6
 8006fec:	60a3      	str	r3, [r4, #8]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	4433      	add	r3, r6
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	f000 fa28 	bl	8007450 <_realloc_r>
 8007000:	4606      	mov	r6, r0
 8007002:	2800      	cmp	r0, #0
 8007004:	d1e0      	bne.n	8006fc8 <__ssputs_r+0x5c>
 8007006:	6921      	ldr	r1, [r4, #16]
 8007008:	4650      	mov	r0, sl
 800700a:	f7ff fb35 	bl	8006678 <_free_r>
 800700e:	230c      	movs	r3, #12
 8007010:	f8ca 3000 	str.w	r3, [sl]
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007020:	e7e9      	b.n	8006ff6 <__ssputs_r+0x8a>
	...

08007024 <_svfiprintf_r>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	4698      	mov	r8, r3
 800702a:	898b      	ldrh	r3, [r1, #12]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	b09d      	sub	sp, #116	@ 0x74
 8007030:	4607      	mov	r7, r0
 8007032:	460d      	mov	r5, r1
 8007034:	4614      	mov	r4, r2
 8007036:	d510      	bpl.n	800705a <_svfiprintf_r+0x36>
 8007038:	690b      	ldr	r3, [r1, #16]
 800703a:	b973      	cbnz	r3, 800705a <_svfiprintf_r+0x36>
 800703c:	2140      	movs	r1, #64	@ 0x40
 800703e:	f7ff fb8f 	bl	8006760 <_malloc_r>
 8007042:	6028      	str	r0, [r5, #0]
 8007044:	6128      	str	r0, [r5, #16]
 8007046:	b930      	cbnz	r0, 8007056 <_svfiprintf_r+0x32>
 8007048:	230c      	movs	r3, #12
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007050:	b01d      	add	sp, #116	@ 0x74
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	2340      	movs	r3, #64	@ 0x40
 8007058:	616b      	str	r3, [r5, #20]
 800705a:	2300      	movs	r3, #0
 800705c:	9309      	str	r3, [sp, #36]	@ 0x24
 800705e:	2320      	movs	r3, #32
 8007060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007064:	f8cd 800c 	str.w	r8, [sp, #12]
 8007068:	2330      	movs	r3, #48	@ 0x30
 800706a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007208 <_svfiprintf_r+0x1e4>
 800706e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007072:	f04f 0901 	mov.w	r9, #1
 8007076:	4623      	mov	r3, r4
 8007078:	469a      	mov	sl, r3
 800707a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707e:	b10a      	cbz	r2, 8007084 <_svfiprintf_r+0x60>
 8007080:	2a25      	cmp	r2, #37	@ 0x25
 8007082:	d1f9      	bne.n	8007078 <_svfiprintf_r+0x54>
 8007084:	ebba 0b04 	subs.w	fp, sl, r4
 8007088:	d00b      	beq.n	80070a2 <_svfiprintf_r+0x7e>
 800708a:	465b      	mov	r3, fp
 800708c:	4622      	mov	r2, r4
 800708e:	4629      	mov	r1, r5
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ff6b 	bl	8006f6c <__ssputs_r>
 8007096:	3001      	adds	r0, #1
 8007098:	f000 80a7 	beq.w	80071ea <_svfiprintf_r+0x1c6>
 800709c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800709e:	445a      	add	r2, fp
 80070a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a2:	f89a 3000 	ldrb.w	r3, [sl]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 809f 	beq.w	80071ea <_svfiprintf_r+0x1c6>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b6:	f10a 0a01 	add.w	sl, sl, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80070c4:	4654      	mov	r4, sl
 80070c6:	2205      	movs	r2, #5
 80070c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070cc:	484e      	ldr	r0, [pc, #312]	@ (8007208 <_svfiprintf_r+0x1e4>)
 80070ce:	f7f9 f887 	bl	80001e0 <memchr>
 80070d2:	9a04      	ldr	r2, [sp, #16]
 80070d4:	b9d8      	cbnz	r0, 800710e <_svfiprintf_r+0xea>
 80070d6:	06d0      	lsls	r0, r2, #27
 80070d8:	bf44      	itt	mi
 80070da:	2320      	movmi	r3, #32
 80070dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e0:	0711      	lsls	r1, r2, #28
 80070e2:	bf44      	itt	mi
 80070e4:	232b      	movmi	r3, #43	@ 0x2b
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ea:	f89a 3000 	ldrb.w	r3, [sl]
 80070ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f0:	d015      	beq.n	800711e <_svfiprintf_r+0xfa>
 80070f2:	9a07      	ldr	r2, [sp, #28]
 80070f4:	4654      	mov	r4, sl
 80070f6:	2000      	movs	r0, #0
 80070f8:	f04f 0c0a 	mov.w	ip, #10
 80070fc:	4621      	mov	r1, r4
 80070fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007102:	3b30      	subs	r3, #48	@ 0x30
 8007104:	2b09      	cmp	r3, #9
 8007106:	d94b      	bls.n	80071a0 <_svfiprintf_r+0x17c>
 8007108:	b1b0      	cbz	r0, 8007138 <_svfiprintf_r+0x114>
 800710a:	9207      	str	r2, [sp, #28]
 800710c:	e014      	b.n	8007138 <_svfiprintf_r+0x114>
 800710e:	eba0 0308 	sub.w	r3, r0, r8
 8007112:	fa09 f303 	lsl.w	r3, r9, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	46a2      	mov	sl, r4
 800711c:	e7d2      	b.n	80070c4 <_svfiprintf_r+0xa0>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	1d19      	adds	r1, r3, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	9103      	str	r1, [sp, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfbb      	ittet	lt
 800712a:	425b      	neglt	r3, r3
 800712c:	f042 0202 	orrlt.w	r2, r2, #2
 8007130:	9307      	strge	r3, [sp, #28]
 8007132:	9307      	strlt	r3, [sp, #28]
 8007134:	bfb8      	it	lt
 8007136:	9204      	strlt	r2, [sp, #16]
 8007138:	7823      	ldrb	r3, [r4, #0]
 800713a:	2b2e      	cmp	r3, #46	@ 0x2e
 800713c:	d10a      	bne.n	8007154 <_svfiprintf_r+0x130>
 800713e:	7863      	ldrb	r3, [r4, #1]
 8007140:	2b2a      	cmp	r3, #42	@ 0x2a
 8007142:	d132      	bne.n	80071aa <_svfiprintf_r+0x186>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	9203      	str	r2, [sp, #12]
 800714c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007150:	3402      	adds	r4, #2
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007218 <_svfiprintf_r+0x1f4>
 8007158:	7821      	ldrb	r1, [r4, #0]
 800715a:	2203      	movs	r2, #3
 800715c:	4650      	mov	r0, sl
 800715e:	f7f9 f83f 	bl	80001e0 <memchr>
 8007162:	b138      	cbz	r0, 8007174 <_svfiprintf_r+0x150>
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	eba0 000a 	sub.w	r0, r0, sl
 800716a:	2240      	movs	r2, #64	@ 0x40
 800716c:	4082      	lsls	r2, r0
 800716e:	4313      	orrs	r3, r2
 8007170:	3401      	adds	r4, #1
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007178:	4824      	ldr	r0, [pc, #144]	@ (800720c <_svfiprintf_r+0x1e8>)
 800717a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800717e:	2206      	movs	r2, #6
 8007180:	f7f9 f82e 	bl	80001e0 <memchr>
 8007184:	2800      	cmp	r0, #0
 8007186:	d036      	beq.n	80071f6 <_svfiprintf_r+0x1d2>
 8007188:	4b21      	ldr	r3, [pc, #132]	@ (8007210 <_svfiprintf_r+0x1ec>)
 800718a:	bb1b      	cbnz	r3, 80071d4 <_svfiprintf_r+0x1b0>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	3307      	adds	r3, #7
 8007190:	f023 0307 	bic.w	r3, r3, #7
 8007194:	3308      	adds	r3, #8
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	4433      	add	r3, r6
 800719c:	9309      	str	r3, [sp, #36]	@ 0x24
 800719e:	e76a      	b.n	8007076 <_svfiprintf_r+0x52>
 80071a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a4:	460c      	mov	r4, r1
 80071a6:	2001      	movs	r0, #1
 80071a8:	e7a8      	b.n	80070fc <_svfiprintf_r+0xd8>
 80071aa:	2300      	movs	r3, #0
 80071ac:	3401      	adds	r4, #1
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	4619      	mov	r1, r3
 80071b2:	f04f 0c0a 	mov.w	ip, #10
 80071b6:	4620      	mov	r0, r4
 80071b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071bc:	3a30      	subs	r2, #48	@ 0x30
 80071be:	2a09      	cmp	r2, #9
 80071c0:	d903      	bls.n	80071ca <_svfiprintf_r+0x1a6>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0c6      	beq.n	8007154 <_svfiprintf_r+0x130>
 80071c6:	9105      	str	r1, [sp, #20]
 80071c8:	e7c4      	b.n	8007154 <_svfiprintf_r+0x130>
 80071ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ce:	4604      	mov	r4, r0
 80071d0:	2301      	movs	r3, #1
 80071d2:	e7f0      	b.n	80071b6 <_svfiprintf_r+0x192>
 80071d4:	ab03      	add	r3, sp, #12
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	462a      	mov	r2, r5
 80071da:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <_svfiprintf_r+0x1f0>)
 80071dc:	a904      	add	r1, sp, #16
 80071de:	4638      	mov	r0, r7
 80071e0:	f7fd fe4e 	bl	8004e80 <_printf_float>
 80071e4:	1c42      	adds	r2, r0, #1
 80071e6:	4606      	mov	r6, r0
 80071e8:	d1d6      	bne.n	8007198 <_svfiprintf_r+0x174>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	065b      	lsls	r3, r3, #25
 80071ee:	f53f af2d 	bmi.w	800704c <_svfiprintf_r+0x28>
 80071f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071f4:	e72c      	b.n	8007050 <_svfiprintf_r+0x2c>
 80071f6:	ab03      	add	r3, sp, #12
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	462a      	mov	r2, r5
 80071fc:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <_svfiprintf_r+0x1f0>)
 80071fe:	a904      	add	r1, sp, #16
 8007200:	4638      	mov	r0, r7
 8007202:	f7fe f8d5 	bl	80053b0 <_printf_i>
 8007206:	e7ed      	b.n	80071e4 <_svfiprintf_r+0x1c0>
 8007208:	08007bf2 	.word	0x08007bf2
 800720c:	08007bfc 	.word	0x08007bfc
 8007210:	08004e81 	.word	0x08004e81
 8007214:	08006f6d 	.word	0x08006f6d
 8007218:	08007bf8 	.word	0x08007bf8

0800721c <__sflush_r>:
 800721c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	0716      	lsls	r6, r2, #28
 8007226:	4605      	mov	r5, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d454      	bmi.n	80072d6 <__sflush_r+0xba>
 800722c:	684b      	ldr	r3, [r1, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	dc02      	bgt.n	8007238 <__sflush_r+0x1c>
 8007232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd48      	ble.n	80072ca <__sflush_r+0xae>
 8007238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800723a:	2e00      	cmp	r6, #0
 800723c:	d045      	beq.n	80072ca <__sflush_r+0xae>
 800723e:	2300      	movs	r3, #0
 8007240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007244:	682f      	ldr	r7, [r5, #0]
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	d030      	beq.n	80072ae <__sflush_r+0x92>
 800724c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	0759      	lsls	r1, r3, #29
 8007252:	d505      	bpl.n	8007260 <__sflush_r+0x44>
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	1ad2      	subs	r2, r2, r3
 8007258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800725a:	b10b      	cbz	r3, 8007260 <__sflush_r+0x44>
 800725c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	4628      	mov	r0, r5
 8007268:	47b0      	blx	r6
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	d106      	bne.n	800727e <__sflush_r+0x62>
 8007270:	6829      	ldr	r1, [r5, #0]
 8007272:	291d      	cmp	r1, #29
 8007274:	d82b      	bhi.n	80072ce <__sflush_r+0xb2>
 8007276:	4a2a      	ldr	r2, [pc, #168]	@ (8007320 <__sflush_r+0x104>)
 8007278:	40ca      	lsrs	r2, r1
 800727a:	07d6      	lsls	r6, r2, #31
 800727c:	d527      	bpl.n	80072ce <__sflush_r+0xb2>
 800727e:	2200      	movs	r2, #0
 8007280:	6062      	str	r2, [r4, #4]
 8007282:	04d9      	lsls	r1, r3, #19
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	d504      	bpl.n	8007294 <__sflush_r+0x78>
 800728a:	1c42      	adds	r2, r0, #1
 800728c:	d101      	bne.n	8007292 <__sflush_r+0x76>
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	b903      	cbnz	r3, 8007294 <__sflush_r+0x78>
 8007292:	6560      	str	r0, [r4, #84]	@ 0x54
 8007294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007296:	602f      	str	r7, [r5, #0]
 8007298:	b1b9      	cbz	r1, 80072ca <__sflush_r+0xae>
 800729a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800729e:	4299      	cmp	r1, r3
 80072a0:	d002      	beq.n	80072a8 <__sflush_r+0x8c>
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7ff f9e8 	bl	8006678 <_free_r>
 80072a8:	2300      	movs	r3, #0
 80072aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ac:	e00d      	b.n	80072ca <__sflush_r+0xae>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b0      	blx	r6
 80072b4:	4602      	mov	r2, r0
 80072b6:	1c50      	adds	r0, r2, #1
 80072b8:	d1c9      	bne.n	800724e <__sflush_r+0x32>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0c6      	beq.n	800724e <__sflush_r+0x32>
 80072c0:	2b1d      	cmp	r3, #29
 80072c2:	d001      	beq.n	80072c8 <__sflush_r+0xac>
 80072c4:	2b16      	cmp	r3, #22
 80072c6:	d11e      	bne.n	8007306 <__sflush_r+0xea>
 80072c8:	602f      	str	r7, [r5, #0]
 80072ca:	2000      	movs	r0, #0
 80072cc:	e022      	b.n	8007314 <__sflush_r+0xf8>
 80072ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d2:	b21b      	sxth	r3, r3
 80072d4:	e01b      	b.n	800730e <__sflush_r+0xf2>
 80072d6:	690f      	ldr	r7, [r1, #16]
 80072d8:	2f00      	cmp	r7, #0
 80072da:	d0f6      	beq.n	80072ca <__sflush_r+0xae>
 80072dc:	0793      	lsls	r3, r2, #30
 80072de:	680e      	ldr	r6, [r1, #0]
 80072e0:	bf08      	it	eq
 80072e2:	694b      	ldreq	r3, [r1, #20]
 80072e4:	600f      	str	r7, [r1, #0]
 80072e6:	bf18      	it	ne
 80072e8:	2300      	movne	r3, #0
 80072ea:	eba6 0807 	sub.w	r8, r6, r7
 80072ee:	608b      	str	r3, [r1, #8]
 80072f0:	f1b8 0f00 	cmp.w	r8, #0
 80072f4:	dde9      	ble.n	80072ca <__sflush_r+0xae>
 80072f6:	6a21      	ldr	r1, [r4, #32]
 80072f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072fa:	4643      	mov	r3, r8
 80072fc:	463a      	mov	r2, r7
 80072fe:	4628      	mov	r0, r5
 8007300:	47b0      	blx	r6
 8007302:	2800      	cmp	r0, #0
 8007304:	dc08      	bgt.n	8007318 <__sflush_r+0xfc>
 8007306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007318:	4407      	add	r7, r0
 800731a:	eba8 0800 	sub.w	r8, r8, r0
 800731e:	e7e7      	b.n	80072f0 <__sflush_r+0xd4>
 8007320:	20400001 	.word	0x20400001

08007324 <_fflush_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	b913      	cbnz	r3, 8007334 <_fflush_r+0x10>
 800732e:	2500      	movs	r5, #0
 8007330:	4628      	mov	r0, r5
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	b118      	cbz	r0, 800733e <_fflush_r+0x1a>
 8007336:	6a03      	ldr	r3, [r0, #32]
 8007338:	b90b      	cbnz	r3, 800733e <_fflush_r+0x1a>
 800733a:	f7fe f9e3 	bl	8005704 <__sinit>
 800733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f3      	beq.n	800732e <_fflush_r+0xa>
 8007346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007348:	07d0      	lsls	r0, r2, #31
 800734a:	d404      	bmi.n	8007356 <_fflush_r+0x32>
 800734c:	0599      	lsls	r1, r3, #22
 800734e:	d402      	bmi.n	8007356 <_fflush_r+0x32>
 8007350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007352:	f7fe fb26 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8007356:	4628      	mov	r0, r5
 8007358:	4621      	mov	r1, r4
 800735a:	f7ff ff5f 	bl	800721c <__sflush_r>
 800735e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007360:	07da      	lsls	r2, r3, #31
 8007362:	4605      	mov	r5, r0
 8007364:	d4e4      	bmi.n	8007330 <_fflush_r+0xc>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	059b      	lsls	r3, r3, #22
 800736a:	d4e1      	bmi.n	8007330 <_fflush_r+0xc>
 800736c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800736e:	f7fe fb19 	bl	80059a4 <__retarget_lock_release_recursive>
 8007372:	e7dd      	b.n	8007330 <_fflush_r+0xc>

08007374 <memmove>:
 8007374:	4288      	cmp	r0, r1
 8007376:	b510      	push	{r4, lr}
 8007378:	eb01 0402 	add.w	r4, r1, r2
 800737c:	d902      	bls.n	8007384 <memmove+0x10>
 800737e:	4284      	cmp	r4, r0
 8007380:	4623      	mov	r3, r4
 8007382:	d807      	bhi.n	8007394 <memmove+0x20>
 8007384:	1e43      	subs	r3, r0, #1
 8007386:	42a1      	cmp	r1, r4
 8007388:	d008      	beq.n	800739c <memmove+0x28>
 800738a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800738e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007392:	e7f8      	b.n	8007386 <memmove+0x12>
 8007394:	4402      	add	r2, r0
 8007396:	4601      	mov	r1, r0
 8007398:	428a      	cmp	r2, r1
 800739a:	d100      	bne.n	800739e <memmove+0x2a>
 800739c:	bd10      	pop	{r4, pc}
 800739e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073a6:	e7f7      	b.n	8007398 <memmove+0x24>

080073a8 <_sbrk_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d06      	ldr	r5, [pc, #24]	@ (80073c4 <_sbrk_r+0x1c>)
 80073ac:	2300      	movs	r3, #0
 80073ae:	4604      	mov	r4, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	602b      	str	r3, [r5, #0]
 80073b4:	f7fa fde4 	bl	8001f80 <_sbrk>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_sbrk_r+0x1a>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_sbrk_r+0x1a>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	200004ec 	.word	0x200004ec

080073c8 <__assert_func>:
 80073c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ca:	4614      	mov	r4, r2
 80073cc:	461a      	mov	r2, r3
 80073ce:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <__assert_func+0x2c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4605      	mov	r5, r0
 80073d4:	68d8      	ldr	r0, [r3, #12]
 80073d6:	b14c      	cbz	r4, 80073ec <__assert_func+0x24>
 80073d8:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <__assert_func+0x30>)
 80073da:	9100      	str	r1, [sp, #0]
 80073dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073e0:	4906      	ldr	r1, [pc, #24]	@ (80073fc <__assert_func+0x34>)
 80073e2:	462b      	mov	r3, r5
 80073e4:	f000 f870 	bl	80074c8 <fiprintf>
 80073e8:	f000 f880 	bl	80074ec <abort>
 80073ec:	4b04      	ldr	r3, [pc, #16]	@ (8007400 <__assert_func+0x38>)
 80073ee:	461c      	mov	r4, r3
 80073f0:	e7f3      	b.n	80073da <__assert_func+0x12>
 80073f2:	bf00      	nop
 80073f4:	20000020 	.word	0x20000020
 80073f8:	08007c0d 	.word	0x08007c0d
 80073fc:	08007c1a 	.word	0x08007c1a
 8007400:	08007c48 	.word	0x08007c48

08007404 <_calloc_r>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	fba1 5402 	umull	r5, r4, r1, r2
 800740a:	b934      	cbnz	r4, 800741a <_calloc_r+0x16>
 800740c:	4629      	mov	r1, r5
 800740e:	f7ff f9a7 	bl	8006760 <_malloc_r>
 8007412:	4606      	mov	r6, r0
 8007414:	b928      	cbnz	r0, 8007422 <_calloc_r+0x1e>
 8007416:	4630      	mov	r0, r6
 8007418:	bd70      	pop	{r4, r5, r6, pc}
 800741a:	220c      	movs	r2, #12
 800741c:	6002      	str	r2, [r0, #0]
 800741e:	2600      	movs	r6, #0
 8007420:	e7f9      	b.n	8007416 <_calloc_r+0x12>
 8007422:	462a      	mov	r2, r5
 8007424:	4621      	mov	r1, r4
 8007426:	f7fe fa3e 	bl	80058a6 <memset>
 800742a:	e7f4      	b.n	8007416 <_calloc_r+0x12>

0800742c <__ascii_mbtowc>:
 800742c:	b082      	sub	sp, #8
 800742e:	b901      	cbnz	r1, 8007432 <__ascii_mbtowc+0x6>
 8007430:	a901      	add	r1, sp, #4
 8007432:	b142      	cbz	r2, 8007446 <__ascii_mbtowc+0x1a>
 8007434:	b14b      	cbz	r3, 800744a <__ascii_mbtowc+0x1e>
 8007436:	7813      	ldrb	r3, [r2, #0]
 8007438:	600b      	str	r3, [r1, #0]
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	1e10      	subs	r0, r2, #0
 800743e:	bf18      	it	ne
 8007440:	2001      	movne	r0, #1
 8007442:	b002      	add	sp, #8
 8007444:	4770      	bx	lr
 8007446:	4610      	mov	r0, r2
 8007448:	e7fb      	b.n	8007442 <__ascii_mbtowc+0x16>
 800744a:	f06f 0001 	mvn.w	r0, #1
 800744e:	e7f8      	b.n	8007442 <__ascii_mbtowc+0x16>

08007450 <_realloc_r>:
 8007450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	4607      	mov	r7, r0
 8007456:	4614      	mov	r4, r2
 8007458:	460d      	mov	r5, r1
 800745a:	b921      	cbnz	r1, 8007466 <_realloc_r+0x16>
 800745c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007460:	4611      	mov	r1, r2
 8007462:	f7ff b97d 	b.w	8006760 <_malloc_r>
 8007466:	b92a      	cbnz	r2, 8007474 <_realloc_r+0x24>
 8007468:	f7ff f906 	bl	8006678 <_free_r>
 800746c:	4625      	mov	r5, r4
 800746e:	4628      	mov	r0, r5
 8007470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007474:	f000 f841 	bl	80074fa <_malloc_usable_size_r>
 8007478:	4284      	cmp	r4, r0
 800747a:	4606      	mov	r6, r0
 800747c:	d802      	bhi.n	8007484 <_realloc_r+0x34>
 800747e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007482:	d8f4      	bhi.n	800746e <_realloc_r+0x1e>
 8007484:	4621      	mov	r1, r4
 8007486:	4638      	mov	r0, r7
 8007488:	f7ff f96a 	bl	8006760 <_malloc_r>
 800748c:	4680      	mov	r8, r0
 800748e:	b908      	cbnz	r0, 8007494 <_realloc_r+0x44>
 8007490:	4645      	mov	r5, r8
 8007492:	e7ec      	b.n	800746e <_realloc_r+0x1e>
 8007494:	42b4      	cmp	r4, r6
 8007496:	4622      	mov	r2, r4
 8007498:	4629      	mov	r1, r5
 800749a:	bf28      	it	cs
 800749c:	4632      	movcs	r2, r6
 800749e:	f7fe fa82 	bl	80059a6 <memcpy>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff f8e7 	bl	8006678 <_free_r>
 80074aa:	e7f1      	b.n	8007490 <_realloc_r+0x40>

080074ac <__ascii_wctomb>:
 80074ac:	4603      	mov	r3, r0
 80074ae:	4608      	mov	r0, r1
 80074b0:	b141      	cbz	r1, 80074c4 <__ascii_wctomb+0x18>
 80074b2:	2aff      	cmp	r2, #255	@ 0xff
 80074b4:	d904      	bls.n	80074c0 <__ascii_wctomb+0x14>
 80074b6:	228a      	movs	r2, #138	@ 0x8a
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074be:	4770      	bx	lr
 80074c0:	700a      	strb	r2, [r1, #0]
 80074c2:	2001      	movs	r0, #1
 80074c4:	4770      	bx	lr
	...

080074c8 <fiprintf>:
 80074c8:	b40e      	push	{r1, r2, r3}
 80074ca:	b503      	push	{r0, r1, lr}
 80074cc:	4601      	mov	r1, r0
 80074ce:	ab03      	add	r3, sp, #12
 80074d0:	4805      	ldr	r0, [pc, #20]	@ (80074e8 <fiprintf+0x20>)
 80074d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d6:	6800      	ldr	r0, [r0, #0]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	f000 f83f 	bl	800755c <_vfiprintf_r>
 80074de:	b002      	add	sp, #8
 80074e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e4:	b003      	add	sp, #12
 80074e6:	4770      	bx	lr
 80074e8:	20000020 	.word	0x20000020

080074ec <abort>:
 80074ec:	b508      	push	{r3, lr}
 80074ee:	2006      	movs	r0, #6
 80074f0:	f000 fa08 	bl	8007904 <raise>
 80074f4:	2001      	movs	r0, #1
 80074f6:	f7fa fccb 	bl	8001e90 <_exit>

080074fa <_malloc_usable_size_r>:
 80074fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fe:	1f18      	subs	r0, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	bfbc      	itt	lt
 8007504:	580b      	ldrlt	r3, [r1, r0]
 8007506:	18c0      	addlt	r0, r0, r3
 8007508:	4770      	bx	lr

0800750a <__sfputc_r>:
 800750a:	6893      	ldr	r3, [r2, #8]
 800750c:	3b01      	subs	r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	b410      	push	{r4}
 8007512:	6093      	str	r3, [r2, #8]
 8007514:	da08      	bge.n	8007528 <__sfputc_r+0x1e>
 8007516:	6994      	ldr	r4, [r2, #24]
 8007518:	42a3      	cmp	r3, r4
 800751a:	db01      	blt.n	8007520 <__sfputc_r+0x16>
 800751c:	290a      	cmp	r1, #10
 800751e:	d103      	bne.n	8007528 <__sfputc_r+0x1e>
 8007520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007524:	f000 b932 	b.w	800778c <__swbuf_r>
 8007528:	6813      	ldr	r3, [r2, #0]
 800752a:	1c58      	adds	r0, r3, #1
 800752c:	6010      	str	r0, [r2, #0]
 800752e:	7019      	strb	r1, [r3, #0]
 8007530:	4608      	mov	r0, r1
 8007532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007536:	4770      	bx	lr

08007538 <__sfputs_r>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	4614      	mov	r4, r2
 8007540:	18d5      	adds	r5, r2, r3
 8007542:	42ac      	cmp	r4, r5
 8007544:	d101      	bne.n	800754a <__sfputs_r+0x12>
 8007546:	2000      	movs	r0, #0
 8007548:	e007      	b.n	800755a <__sfputs_r+0x22>
 800754a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754e:	463a      	mov	r2, r7
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff ffda 	bl	800750a <__sfputc_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d1f3      	bne.n	8007542 <__sfputs_r+0xa>
 800755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800755c <_vfiprintf_r>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	460d      	mov	r5, r1
 8007562:	b09d      	sub	sp, #116	@ 0x74
 8007564:	4614      	mov	r4, r2
 8007566:	4698      	mov	r8, r3
 8007568:	4606      	mov	r6, r0
 800756a:	b118      	cbz	r0, 8007574 <_vfiprintf_r+0x18>
 800756c:	6a03      	ldr	r3, [r0, #32]
 800756e:	b90b      	cbnz	r3, 8007574 <_vfiprintf_r+0x18>
 8007570:	f7fe f8c8 	bl	8005704 <__sinit>
 8007574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007576:	07d9      	lsls	r1, r3, #31
 8007578:	d405      	bmi.n	8007586 <_vfiprintf_r+0x2a>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	059a      	lsls	r2, r3, #22
 800757e:	d402      	bmi.n	8007586 <_vfiprintf_r+0x2a>
 8007580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007582:	f7fe fa0e 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	071b      	lsls	r3, r3, #28
 800758a:	d501      	bpl.n	8007590 <_vfiprintf_r+0x34>
 800758c:	692b      	ldr	r3, [r5, #16]
 800758e:	b99b      	cbnz	r3, 80075b8 <_vfiprintf_r+0x5c>
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f000 f938 	bl	8007808 <__swsetup_r>
 8007598:	b170      	cbz	r0, 80075b8 <_vfiprintf_r+0x5c>
 800759a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800759c:	07dc      	lsls	r4, r3, #31
 800759e:	d504      	bpl.n	80075aa <_vfiprintf_r+0x4e>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075a4:	b01d      	add	sp, #116	@ 0x74
 80075a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	0598      	lsls	r0, r3, #22
 80075ae:	d4f7      	bmi.n	80075a0 <_vfiprintf_r+0x44>
 80075b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b2:	f7fe f9f7 	bl	80059a4 <__retarget_lock_release_recursive>
 80075b6:	e7f3      	b.n	80075a0 <_vfiprintf_r+0x44>
 80075b8:	2300      	movs	r3, #0
 80075ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80075bc:	2320      	movs	r3, #32
 80075be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c6:	2330      	movs	r3, #48	@ 0x30
 80075c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007778 <_vfiprintf_r+0x21c>
 80075cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075d0:	f04f 0901 	mov.w	r9, #1
 80075d4:	4623      	mov	r3, r4
 80075d6:	469a      	mov	sl, r3
 80075d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075dc:	b10a      	cbz	r2, 80075e2 <_vfiprintf_r+0x86>
 80075de:	2a25      	cmp	r2, #37	@ 0x25
 80075e0:	d1f9      	bne.n	80075d6 <_vfiprintf_r+0x7a>
 80075e2:	ebba 0b04 	subs.w	fp, sl, r4
 80075e6:	d00b      	beq.n	8007600 <_vfiprintf_r+0xa4>
 80075e8:	465b      	mov	r3, fp
 80075ea:	4622      	mov	r2, r4
 80075ec:	4629      	mov	r1, r5
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff ffa2 	bl	8007538 <__sfputs_r>
 80075f4:	3001      	adds	r0, #1
 80075f6:	f000 80a7 	beq.w	8007748 <_vfiprintf_r+0x1ec>
 80075fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075fc:	445a      	add	r2, fp
 80075fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007600:	f89a 3000 	ldrb.w	r3, [sl]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 809f 	beq.w	8007748 <_vfiprintf_r+0x1ec>
 800760a:	2300      	movs	r3, #0
 800760c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007614:	f10a 0a01 	add.w	sl, sl, #1
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007620:	931a      	str	r3, [sp, #104]	@ 0x68
 8007622:	4654      	mov	r4, sl
 8007624:	2205      	movs	r2, #5
 8007626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762a:	4853      	ldr	r0, [pc, #332]	@ (8007778 <_vfiprintf_r+0x21c>)
 800762c:	f7f8 fdd8 	bl	80001e0 <memchr>
 8007630:	9a04      	ldr	r2, [sp, #16]
 8007632:	b9d8      	cbnz	r0, 800766c <_vfiprintf_r+0x110>
 8007634:	06d1      	lsls	r1, r2, #27
 8007636:	bf44      	itt	mi
 8007638:	2320      	movmi	r3, #32
 800763a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800763e:	0713      	lsls	r3, r2, #28
 8007640:	bf44      	itt	mi
 8007642:	232b      	movmi	r3, #43	@ 0x2b
 8007644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007648:	f89a 3000 	ldrb.w	r3, [sl]
 800764c:	2b2a      	cmp	r3, #42	@ 0x2a
 800764e:	d015      	beq.n	800767c <_vfiprintf_r+0x120>
 8007650:	9a07      	ldr	r2, [sp, #28]
 8007652:	4654      	mov	r4, sl
 8007654:	2000      	movs	r0, #0
 8007656:	f04f 0c0a 	mov.w	ip, #10
 800765a:	4621      	mov	r1, r4
 800765c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007660:	3b30      	subs	r3, #48	@ 0x30
 8007662:	2b09      	cmp	r3, #9
 8007664:	d94b      	bls.n	80076fe <_vfiprintf_r+0x1a2>
 8007666:	b1b0      	cbz	r0, 8007696 <_vfiprintf_r+0x13a>
 8007668:	9207      	str	r2, [sp, #28]
 800766a:	e014      	b.n	8007696 <_vfiprintf_r+0x13a>
 800766c:	eba0 0308 	sub.w	r3, r0, r8
 8007670:	fa09 f303 	lsl.w	r3, r9, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	46a2      	mov	sl, r4
 800767a:	e7d2      	b.n	8007622 <_vfiprintf_r+0xc6>
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	1d19      	adds	r1, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	9103      	str	r1, [sp, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbb      	ittet	lt
 8007688:	425b      	neglt	r3, r3
 800768a:	f042 0202 	orrlt.w	r2, r2, #2
 800768e:	9307      	strge	r3, [sp, #28]
 8007690:	9307      	strlt	r3, [sp, #28]
 8007692:	bfb8      	it	lt
 8007694:	9204      	strlt	r2, [sp, #16]
 8007696:	7823      	ldrb	r3, [r4, #0]
 8007698:	2b2e      	cmp	r3, #46	@ 0x2e
 800769a:	d10a      	bne.n	80076b2 <_vfiprintf_r+0x156>
 800769c:	7863      	ldrb	r3, [r4, #1]
 800769e:	2b2a      	cmp	r3, #42	@ 0x2a
 80076a0:	d132      	bne.n	8007708 <_vfiprintf_r+0x1ac>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9203      	str	r2, [sp, #12]
 80076aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076ae:	3402      	adds	r4, #2
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007788 <_vfiprintf_r+0x22c>
 80076b6:	7821      	ldrb	r1, [r4, #0]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4650      	mov	r0, sl
 80076bc:	f7f8 fd90 	bl	80001e0 <memchr>
 80076c0:	b138      	cbz	r0, 80076d2 <_vfiprintf_r+0x176>
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	eba0 000a 	sub.w	r0, r0, sl
 80076c8:	2240      	movs	r2, #64	@ 0x40
 80076ca:	4082      	lsls	r2, r0
 80076cc:	4313      	orrs	r3, r2
 80076ce:	3401      	adds	r4, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d6:	4829      	ldr	r0, [pc, #164]	@ (800777c <_vfiprintf_r+0x220>)
 80076d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076dc:	2206      	movs	r2, #6
 80076de:	f7f8 fd7f 	bl	80001e0 <memchr>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d03f      	beq.n	8007766 <_vfiprintf_r+0x20a>
 80076e6:	4b26      	ldr	r3, [pc, #152]	@ (8007780 <_vfiprintf_r+0x224>)
 80076e8:	bb1b      	cbnz	r3, 8007732 <_vfiprintf_r+0x1d6>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	3307      	adds	r3, #7
 80076ee:	f023 0307 	bic.w	r3, r3, #7
 80076f2:	3308      	adds	r3, #8
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	443b      	add	r3, r7
 80076fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fc:	e76a      	b.n	80075d4 <_vfiprintf_r+0x78>
 80076fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007702:	460c      	mov	r4, r1
 8007704:	2001      	movs	r0, #1
 8007706:	e7a8      	b.n	800765a <_vfiprintf_r+0xfe>
 8007708:	2300      	movs	r3, #0
 800770a:	3401      	adds	r4, #1
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	4619      	mov	r1, r3
 8007710:	f04f 0c0a 	mov.w	ip, #10
 8007714:	4620      	mov	r0, r4
 8007716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771a:	3a30      	subs	r2, #48	@ 0x30
 800771c:	2a09      	cmp	r2, #9
 800771e:	d903      	bls.n	8007728 <_vfiprintf_r+0x1cc>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0c6      	beq.n	80076b2 <_vfiprintf_r+0x156>
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	e7c4      	b.n	80076b2 <_vfiprintf_r+0x156>
 8007728:	fb0c 2101 	mla	r1, ip, r1, r2
 800772c:	4604      	mov	r4, r0
 800772e:	2301      	movs	r3, #1
 8007730:	e7f0      	b.n	8007714 <_vfiprintf_r+0x1b8>
 8007732:	ab03      	add	r3, sp, #12
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	462a      	mov	r2, r5
 8007738:	4b12      	ldr	r3, [pc, #72]	@ (8007784 <_vfiprintf_r+0x228>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	4630      	mov	r0, r6
 800773e:	f7fd fb9f 	bl	8004e80 <_printf_float>
 8007742:	4607      	mov	r7, r0
 8007744:	1c78      	adds	r0, r7, #1
 8007746:	d1d6      	bne.n	80076f6 <_vfiprintf_r+0x19a>
 8007748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800774a:	07d9      	lsls	r1, r3, #31
 800774c:	d405      	bmi.n	800775a <_vfiprintf_r+0x1fe>
 800774e:	89ab      	ldrh	r3, [r5, #12]
 8007750:	059a      	lsls	r2, r3, #22
 8007752:	d402      	bmi.n	800775a <_vfiprintf_r+0x1fe>
 8007754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007756:	f7fe f925 	bl	80059a4 <__retarget_lock_release_recursive>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	065b      	lsls	r3, r3, #25
 800775e:	f53f af1f 	bmi.w	80075a0 <_vfiprintf_r+0x44>
 8007762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007764:	e71e      	b.n	80075a4 <_vfiprintf_r+0x48>
 8007766:	ab03      	add	r3, sp, #12
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	462a      	mov	r2, r5
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <_vfiprintf_r+0x228>)
 800776e:	a904      	add	r1, sp, #16
 8007770:	4630      	mov	r0, r6
 8007772:	f7fd fe1d 	bl	80053b0 <_printf_i>
 8007776:	e7e4      	b.n	8007742 <_vfiprintf_r+0x1e6>
 8007778:	08007bf2 	.word	0x08007bf2
 800777c:	08007bfc 	.word	0x08007bfc
 8007780:	08004e81 	.word	0x08004e81
 8007784:	08007539 	.word	0x08007539
 8007788:	08007bf8 	.word	0x08007bf8

0800778c <__swbuf_r>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	460e      	mov	r6, r1
 8007790:	4614      	mov	r4, r2
 8007792:	4605      	mov	r5, r0
 8007794:	b118      	cbz	r0, 800779e <__swbuf_r+0x12>
 8007796:	6a03      	ldr	r3, [r0, #32]
 8007798:	b90b      	cbnz	r3, 800779e <__swbuf_r+0x12>
 800779a:	f7fd ffb3 	bl	8005704 <__sinit>
 800779e:	69a3      	ldr	r3, [r4, #24]
 80077a0:	60a3      	str	r3, [r4, #8]
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	071a      	lsls	r2, r3, #28
 80077a6:	d501      	bpl.n	80077ac <__swbuf_r+0x20>
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	b943      	cbnz	r3, 80077be <__swbuf_r+0x32>
 80077ac:	4621      	mov	r1, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f82a 	bl	8007808 <__swsetup_r>
 80077b4:	b118      	cbz	r0, 80077be <__swbuf_r+0x32>
 80077b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80077ba:	4638      	mov	r0, r7
 80077bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	1a98      	subs	r0, r3, r2
 80077c4:	6963      	ldr	r3, [r4, #20]
 80077c6:	b2f6      	uxtb	r6, r6
 80077c8:	4283      	cmp	r3, r0
 80077ca:	4637      	mov	r7, r6
 80077cc:	dc05      	bgt.n	80077da <__swbuf_r+0x4e>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7ff fda7 	bl	8007324 <_fflush_r>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d1ed      	bne.n	80077b6 <__swbuf_r+0x2a>
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	3b01      	subs	r3, #1
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	701e      	strb	r6, [r3, #0]
 80077e8:	6962      	ldr	r2, [r4, #20]
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d004      	beq.n	80077fa <__swbuf_r+0x6e>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d5e1      	bpl.n	80077ba <__swbuf_r+0x2e>
 80077f6:	2e0a      	cmp	r6, #10
 80077f8:	d1df      	bne.n	80077ba <__swbuf_r+0x2e>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff fd91 	bl	8007324 <_fflush_r>
 8007802:	2800      	cmp	r0, #0
 8007804:	d0d9      	beq.n	80077ba <__swbuf_r+0x2e>
 8007806:	e7d6      	b.n	80077b6 <__swbuf_r+0x2a>

08007808 <__swsetup_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4b29      	ldr	r3, [pc, #164]	@ (80078b0 <__swsetup_r+0xa8>)
 800780c:	4605      	mov	r5, r0
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	460c      	mov	r4, r1
 8007812:	b118      	cbz	r0, 800781c <__swsetup_r+0x14>
 8007814:	6a03      	ldr	r3, [r0, #32]
 8007816:	b90b      	cbnz	r3, 800781c <__swsetup_r+0x14>
 8007818:	f7fd ff74 	bl	8005704 <__sinit>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	0719      	lsls	r1, r3, #28
 8007822:	d422      	bmi.n	800786a <__swsetup_r+0x62>
 8007824:	06da      	lsls	r2, r3, #27
 8007826:	d407      	bmi.n	8007838 <__swsetup_r+0x30>
 8007828:	2209      	movs	r2, #9
 800782a:	602a      	str	r2, [r5, #0]
 800782c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007836:	e033      	b.n	80078a0 <__swsetup_r+0x98>
 8007838:	0758      	lsls	r0, r3, #29
 800783a:	d512      	bpl.n	8007862 <__swsetup_r+0x5a>
 800783c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800783e:	b141      	cbz	r1, 8007852 <__swsetup_r+0x4a>
 8007840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007844:	4299      	cmp	r1, r3
 8007846:	d002      	beq.n	800784e <__swsetup_r+0x46>
 8007848:	4628      	mov	r0, r5
 800784a:	f7fe ff15 	bl	8006678 <_free_r>
 800784e:	2300      	movs	r3, #0
 8007850:	6363      	str	r3, [r4, #52]	@ 0x34
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	2300      	movs	r3, #0
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f043 0308 	orr.w	r3, r3, #8
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	b94b      	cbnz	r3, 8007882 <__swsetup_r+0x7a>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007878:	d003      	beq.n	8007882 <__swsetup_r+0x7a>
 800787a:	4621      	mov	r1, r4
 800787c:	4628      	mov	r0, r5
 800787e:	f000 f883 	bl	8007988 <__smakebuf_r>
 8007882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007886:	f013 0201 	ands.w	r2, r3, #1
 800788a:	d00a      	beq.n	80078a2 <__swsetup_r+0x9a>
 800788c:	2200      	movs	r2, #0
 800788e:	60a2      	str	r2, [r4, #8]
 8007890:	6962      	ldr	r2, [r4, #20]
 8007892:	4252      	negs	r2, r2
 8007894:	61a2      	str	r2, [r4, #24]
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	b942      	cbnz	r2, 80078ac <__swsetup_r+0xa4>
 800789a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800789e:	d1c5      	bne.n	800782c <__swsetup_r+0x24>
 80078a0:	bd38      	pop	{r3, r4, r5, pc}
 80078a2:	0799      	lsls	r1, r3, #30
 80078a4:	bf58      	it	pl
 80078a6:	6962      	ldrpl	r2, [r4, #20]
 80078a8:	60a2      	str	r2, [r4, #8]
 80078aa:	e7f4      	b.n	8007896 <__swsetup_r+0x8e>
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7f7      	b.n	80078a0 <__swsetup_r+0x98>
 80078b0:	20000020 	.word	0x20000020

080078b4 <_raise_r>:
 80078b4:	291f      	cmp	r1, #31
 80078b6:	b538      	push	{r3, r4, r5, lr}
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	d904      	bls.n	80078c8 <_raise_r+0x14>
 80078be:	2316      	movs	r3, #22
 80078c0:	6003      	str	r3, [r0, #0]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078ca:	b112      	cbz	r2, 80078d2 <_raise_r+0x1e>
 80078cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078d0:	b94b      	cbnz	r3, 80078e6 <_raise_r+0x32>
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f830 	bl	8007938 <_getpid_r>
 80078d8:	4622      	mov	r2, r4
 80078da:	4601      	mov	r1, r0
 80078dc:	4628      	mov	r0, r5
 80078de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078e2:	f000 b817 	b.w	8007914 <_kill_r>
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d00a      	beq.n	8007900 <_raise_r+0x4c>
 80078ea:	1c59      	adds	r1, r3, #1
 80078ec:	d103      	bne.n	80078f6 <_raise_r+0x42>
 80078ee:	2316      	movs	r3, #22
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	2001      	movs	r0, #1
 80078f4:	e7e7      	b.n	80078c6 <_raise_r+0x12>
 80078f6:	2100      	movs	r1, #0
 80078f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078fc:	4620      	mov	r0, r4
 80078fe:	4798      	blx	r3
 8007900:	2000      	movs	r0, #0
 8007902:	e7e0      	b.n	80078c6 <_raise_r+0x12>

08007904 <raise>:
 8007904:	4b02      	ldr	r3, [pc, #8]	@ (8007910 <raise+0xc>)
 8007906:	4601      	mov	r1, r0
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f7ff bfd3 	b.w	80078b4 <_raise_r>
 800790e:	bf00      	nop
 8007910:	20000020 	.word	0x20000020

08007914 <_kill_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	@ (8007934 <_kill_r+0x20>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	4611      	mov	r1, r2
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	f7fa faa5 	bl	8001e70 <_kill>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d102      	bne.n	8007930 <_kill_r+0x1c>
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	b103      	cbz	r3, 8007930 <_kill_r+0x1c>
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	bd38      	pop	{r3, r4, r5, pc}
 8007932:	bf00      	nop
 8007934:	200004ec 	.word	0x200004ec

08007938 <_getpid_r>:
 8007938:	f7fa ba92 	b.w	8001e60 <_getpid>

0800793c <__swhatbuf_r>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	460c      	mov	r4, r1
 8007940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007944:	2900      	cmp	r1, #0
 8007946:	b096      	sub	sp, #88	@ 0x58
 8007948:	4615      	mov	r5, r2
 800794a:	461e      	mov	r6, r3
 800794c:	da0d      	bge.n	800796a <__swhatbuf_r+0x2e>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007954:	f04f 0100 	mov.w	r1, #0
 8007958:	bf14      	ite	ne
 800795a:	2340      	movne	r3, #64	@ 0x40
 800795c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007960:	2000      	movs	r0, #0
 8007962:	6031      	str	r1, [r6, #0]
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	b016      	add	sp, #88	@ 0x58
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	466a      	mov	r2, sp
 800796c:	f000 f848 	bl	8007a00 <_fstat_r>
 8007970:	2800      	cmp	r0, #0
 8007972:	dbec      	blt.n	800794e <__swhatbuf_r+0x12>
 8007974:	9901      	ldr	r1, [sp, #4]
 8007976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800797a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800797e:	4259      	negs	r1, r3
 8007980:	4159      	adcs	r1, r3
 8007982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007986:	e7eb      	b.n	8007960 <__swhatbuf_r+0x24>

08007988 <__smakebuf_r>:
 8007988:	898b      	ldrh	r3, [r1, #12]
 800798a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798c:	079d      	lsls	r5, r3, #30
 800798e:	4606      	mov	r6, r0
 8007990:	460c      	mov	r4, r1
 8007992:	d507      	bpl.n	80079a4 <__smakebuf_r+0x1c>
 8007994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2301      	movs	r3, #1
 800799e:	6163      	str	r3, [r4, #20]
 80079a0:	b003      	add	sp, #12
 80079a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a4:	ab01      	add	r3, sp, #4
 80079a6:	466a      	mov	r2, sp
 80079a8:	f7ff ffc8 	bl	800793c <__swhatbuf_r>
 80079ac:	9f00      	ldr	r7, [sp, #0]
 80079ae:	4605      	mov	r5, r0
 80079b0:	4639      	mov	r1, r7
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7fe fed4 	bl	8006760 <_malloc_r>
 80079b8:	b948      	cbnz	r0, 80079ce <__smakebuf_r+0x46>
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	059a      	lsls	r2, r3, #22
 80079c0:	d4ee      	bmi.n	80079a0 <__smakebuf_r+0x18>
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	e7e2      	b.n	8007994 <__smakebuf_r+0xc>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	6020      	str	r0, [r4, #0]
 80079d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079de:	b15b      	cbz	r3, 80079f8 <__smakebuf_r+0x70>
 80079e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 f81d 	bl	8007a24 <_isatty_r>
 80079ea:	b128      	cbz	r0, 80079f8 <__smakebuf_r+0x70>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	431d      	orrs	r5, r3
 80079fc:	81a5      	strh	r5, [r4, #12]
 80079fe:	e7cf      	b.n	80079a0 <__smakebuf_r+0x18>

08007a00 <_fstat_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	@ (8007a20 <_fstat_r+0x20>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7fa fa8f 	bl	8001f30 <_fstat>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_fstat_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_fstat_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	200004ec 	.word	0x200004ec

08007a24 <_isatty_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d06      	ldr	r5, [pc, #24]	@ (8007a40 <_isatty_r+0x1c>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7fa fa8e 	bl	8001f50 <_isatty>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_isatty_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_isatty_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	200004ec 	.word	0x200004ec

08007a44 <_init>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr

08007a50 <_fini>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr
